<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>VR全景功能实现</title>
      <link href="/2019/08/20/VR%E5%85%A8%E6%99%AF%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
      <content type="html"><![CDATA[<p>项目需要将华为全景相机拍摄出的照片展示在pc端，类似于微博常见的VR效果。实现效果的核心就是THREE.js。本文就介绍用webpack4搭建一个开发demo的环境，并简易介绍three.js.</p><a id="more"></a><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>webpack4与es6的开发环境,也就是一些插件的配置。</p><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p><code>npm init</code> 生成package.json文件。</p><h4 id="使用webpack"><a href="#使用webpack" class="headerlink" title="使用webpack"></a>使用webpack</h4><ol><li>我们在跟目录下创建一个文件夹src来存放源文件</li><li>在创建一个文件夹build来存放编译后的文件</li><li>新建index.html文件</li><li>创建配置文件webpack.config.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js </span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> appPath = path.resolve(__dirname, <span class="string">'./src/threeTwo.js'</span>);</span><br><span class="line"><span class="keyword">var</span> buildPath = path.resolve(__dirname, <span class="string">'./build'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: appPath,<span class="comment">//整个页面的入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: buildPath,<span class="comment">//打包输出的地址</span></span><br><span class="line">        filename: <span class="string">"bundle.js"</span>,<span class="comment">//输出的文件名称</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//url-loader的主要功能是：将源文件转换成DataUrl(声明文件mimetype的base64编码)</span></span><br><span class="line">                <span class="comment">//小于limit字节，以 base64 的方式引用，大于limit就交给file-loader处理了</span></span><br><span class="line">                <span class="comment">//file-loader的主要功能是：把源文件迁移到指定的目录（可以简单理解为从源文件目录迁移到build目录</span></span><br><span class="line">                test: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader?limit=8192&amp;name=asset/[hash:8].[name].[ext]'</span></span><br><span class="line">            &#125;,</span><br><span class="line">           </span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//以下是服务环境配置</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">8085</span>,<span class="comment">//端口</span></span><br><span class="line">        host: <span class="string">'localhost'</span>,<span class="comment">//地址</span></span><br><span class="line">        inline: <span class="literal">true</span>,<span class="comment">//用来支持dev-server自动刷新</span></span><br><span class="line">        open: <span class="literal">true</span>,<span class="comment">//开启webpack-dev-server时自动打开页面</span></span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">        contentBase: path.resolve(__dirname),<span class="comment">//用来指定index.html所在目录</span></span><br><span class="line">        publicPath: <span class="string">'/build/'</span>,<span class="comment">//用来指定编译后的bundle.js的目录</span></span><br><span class="line">        openPage: <span class="string">"build/index.html"</span>,<span class="comment">//指定打开的页面</span></span><br><span class="line">        hot: <span class="literal">true</span>,<span class="comment">//热部署</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// new HtmlWebpackPlugin(),</span></span><br><span class="line">        <span class="comment">//热部署插件</span></span><br><span class="line">        <span class="comment">// new webpack.HotModuleReplacementPlugin(),</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">// filename:'b.html',</span></span><br><span class="line">            template: <span class="string">"./src/index.html"</span>,</span><br><span class="line">            chunksSortMode: <span class="string">'none'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Three-js基础知识"><a href="#Three-js基础知识" class="headerlink" title="Three.js基础知识"></a>Three.js基础知识</h3><p>使用Three.js绘制一个三维效果，至少需要以下几个步骤：</p><ul><li>创建一个容纳三维空间的场景 (<strong>Sence</strong>)</li><li>将需要绘制的元素加入到场景中，对元素的形状、材料、阴影等进行设置</li><li>给定一个观察场景的位置，以及观察角度，我们用相机对象（<strong>Camera</strong>）来控制</li><li>将绘制好的元素使用渲染器（<strong>Renderer</strong>）进行渲染，最终呈现在浏览器上</li></ul><p>拿电影来类比的话，场景对应于整个布景空间，相机是拍摄镜头，渲染器用来把拍摄好的场景转换成胶卷。</p><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>场景允许你设置哪些对象被three.js渲染以及渲染在哪里。在场景中放置对象、灯光和相机。<br>很简单，直接创建一个Scene的实例即可。<code>_scene = new Scene()</code></p><h4 id="元素（包含光线）"><a href="#元素（包含光线）" class="headerlink" title="元素（包含光线）"></a>元素（包含光线）</h4><p>Three.js 为我们提供了非常多的Geometry，例如SphereGeometry（球体）、TetrahedronGeometry（四面体）、TorusGeometry（圆环体）等等。<br>在Three.js中，材质（Material）决定了几何图形具体是以什么形式展现的。它包括了一个几何体如何形状以外的其他属性，例如色彩、纹理、透明度等等，Material和Geometry是相辅相成的，必须结合使用。</p><h4 id="相机"><a href="#相机" class="headerlink" title="相机"></a>相机</h4><h5 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h5><div align="center"><img src="/2019/08/20/VR全景功能实现/VR/zbx.png" width="400" height="300" alt="图片名称" align="center"><br></div><p>我们可以在场景中添加一个坐标系，清楚的看到元素处于什么位置.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//坐标系插件</span></span><br><span class="line">scene.add(<span class="keyword">new</span> THREE.AxisHelper(<span class="number">1000</span>));</span><br></pre></td></tr></table></figure></p><h5 id="PerspectiveCamera（透视相机）"><a href="#PerspectiveCamera（透视相机）" class="headerlink" title="PerspectiveCamera（透视相机）"></a>PerspectiveCamera（透视相机）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_camera = <span class="keyword">new</span> PerspectiveCamera(fov, aspect, near, far);</span><br></pre></td></tr></table></figure><p>最常用的摄像机类型，模拟人眼的视觉，近大远小（透视），如果是需要模拟现实，基本都是用这个相机。Fov表示的是视角，Fov越大，表示眼睛睁得越大，离得越远，看得更多。aspect代表水平方向和竖直方向可观测距离的比值。near、far和上面的相同，分别对应相机可观测的最远和最近距离。</p><div align="center"><img src="/2019/08/20/VR全景功能实现/VR/camera.png" width="400" height="300" alt="图片名称" align="center"><br></div><h5 id="OrthographicCamera（正交投影相机）"><a href="#OrthographicCamera（正交投影相机）" class="headerlink" title="OrthographicCamera（正交投影相机）"></a>OrthographicCamera（正交投影相机）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_camera = <span class="keyword">new</span> OrthographicCamera(left, right, top, bottom, near, far);</span><br></pre></td></tr></table></figure><p>只有在这个矩形可视区域内才是可见的物体无论物体距离相机距离远或者近，在最终渲染的图片中物体的大小都保持不变。对于渲染2D场景或者UI元素是非常有用的。</p><div align="center"><img src="/2019/08/20/VR全景功能实现/VR/camera1.png" width="400" height="300" alt="图片名称" align="center"><br></div><h5 id="position、lookAt"><a href="#position、lookAt" class="headerlink" title="position、lookAt"></a>position、lookAt</h5><p>position属性指定了相机所处的位置。lookAt函数指定相机观察的方向。接收的参数都是一个类型为Vector3的对象。</p><h4 id="渲染器"><a href="#渲染器" class="headerlink" title="渲染器"></a>渲染器</h4><p>Three.js也为我们提供了几种不同的渲染器，主要看WebGL渲染器(WebGLRenderer)。WebGL渲染器使用WebGL来绘制场景，其够利用GPU硬件加速从而提高渲染性能。Three.js绘制的元素添加到浏览器上，这个过程需要一个载体，这个载体就是Canvas，你可以通过_renderer.domElement获取到这个Canvas，并将它给定到真实DOM中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_renderer = <span class="keyword">new</span> WebGLRenderer();</span><br><span class="line">_container = <span class="built_in">document</span>.getElementById(<span class="string">'conianer'</span>);</span><br><span class="line">_container.appendChild(_renderer.domElement);</span><br></pre></td></tr></table></figure><p>使用setSize函数设定你要渲染的范围，实际上它改变的就是上面Canvas的范围.通过render函数渲染上面指定的场景和相机.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_renderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</span><br><span class="line">_renderer.render(_scene, _camera);</span><br></pre></td></tr></table></figure><h4 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h4><p>要渲染的元素可能并未被加载完，你就执行了渲染，并且只执行了一次，这时需要requestAnimationFrame方法，让场景和相机进行实时渲染。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     requestAnimationFrame(animate);</span><br><span class="line">     _renderer.render(_scene, _camera);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h3 id="全景效果"><a href="#全景效果" class="headerlink" title="全景效果"></a>全景效果</h3>]]></content>
      
      <categories>
          
          <category> Three.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Three.js </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker部署web项目</title>
      <link href="/2019/06/27/Docker%E9%83%A8%E7%BD%B2web%E9%A1%B9%E7%9B%AE/"/>
      <content type="html"><![CDATA[<p>本文使用Docker来部署一个vue的前端应用,后台是express提供的接口。更多的实践docker命令,<a href="https://ouyangresume.github.io/2019/06/24/Docker-Base/#more" target="_blank" rel="noopener">上篇文章</a>有关于Docker更详细的介绍.<br><a id="more"></a></p><h3 id="部署node服务"><a href="#部署node服务" class="headerlink" title="部署node服务"></a>部署node服务</h3><h4 id="运行本地express"><a href="#运行本地express" class="headerlink" title="运行本地express"></a>运行本地express</h4><p>这个后台服务就用很早之前写的项目,<a href="https://github.com/OuYangResume/node/tree/master/expressdemo" target="_blank" rel="noopener">项目地址</a>在github上。运行该 express 应用需要 node 环境，我们基于 node 镜像来构建一个新镜像.</p><h4 id="拉取node镜像"><a href="#拉取node镜像" class="headerlink" title="拉取node镜像"></a>拉取node镜像</h4><p><code>docker pull node</code><br>docker 镜像名称由REPOSITORY和TAG组成 [REPOSITORY[:TAG]]，TAG默认为latest。查看所有镜像<code>docker image ls</code></p><h4 id="编写Dockerfile文件"><a href="#编写Dockerfile文件" class="headerlink" title="编写Dockerfile文件"></a>编写Dockerfile文件</h4><p>在express项目的根目录创建Dockerfile文件。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基于 node:latest 镜像而构建的</span></span><br><span class="line"><span class="keyword">FROM</span> node</span><br><span class="line"><span class="comment">#指定工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span> /usr/src/app</span><br><span class="line">#COPY 指令将从构建上下文目录中 &lt;源路径&gt; 的文件/目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置。</span><br><span class="line">COPY package*.json ./</span><br><span class="line">#安装依赖</span><br><span class="line">RUN npm install</span><br><span class="line">#将所有文件copy到工作目录</span><br><span class="line">COPY . .</span><br><span class="line">#声明运行时容器提供服务端口</span><br><span class="line">EXPOSE 8082</span><br><span class="line">#指定默认的容器主进程的启动命令</span><br><span class="line">CMD [ "npm", "start" ]</span><br></pre></td></tr></table></figure><p>这里的端口是指容器端口<code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code>跟运行并没有关系。</p><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p><code>docker build -t nodeWebServer .</code><br>-t 是给镜像命名 . 是基于当前目录的Dockerfile来构建镜像</p><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><p>基于该镜像启动一个docker容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 8088:8082 \</span><br><span class="line">-d --name nodeApp \</span><br><span class="line">nodeWebServer</span><br></pre></td></tr></table></figure><pre><code> docker run 基于镜像启动一个容器-p 8088:8082 端口映射，将宿主的8088端口映射到容器的8082端口-d 后台方式运行--name 容器名     </code></pre><p>查看 docker 进程<br><code>docker container ls -a</code><br>进入这个已经启动的容器<code>docker exec -it containerID bash</code> 可以看到Dockerfile指定的工作目录和copy过来的文件。</p><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p><code>http://localhost:8088</code></p><h3 id="部署前端应用"><a href="#部署前端应用" class="headerlink" title="部署前端应用"></a>部署前端应用</h3><h4 id="vue项目"><a href="#vue项目" class="headerlink" title="vue项目"></a>vue项目</h4><p>将前端项目运行起来并打包<code>npm run build</code>现在将这个生成的dist静态文件部署到docker上。</p><h4 id="拉取nginx镜像"><a href="#拉取nginx镜像" class="headerlink" title="拉取nginx镜像"></a>拉取nginx镜像</h4><p><code>docker pull nginx</code>这次就基于nginx这个基础镜像部署项目（node项目是新建了一个镜像）。</p><h4 id="创建nginx-config配置文件"><a href="#创建nginx-config配置文件" class="headerlink" title="创建nginx config配置文件"></a>创建nginx config配置文件</h4><p>在项目根目录下创建nginx文件夹，该文件夹下新建文件default.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line">    error_log  /var/log/nginx/error.log  error;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /api/ &#123;</span><br><span class="line">        rewrite  /api/(.*)  /$1  break;</span><br><span class="line">        proxy_pass http://172.17.0.4:8082;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个文件可以看到首页的指向为 /usr/share/nginx/html/index.html, 所以我们可以一会把构建出来的index.html文件和相关的静态资源放到/usr/share/nginx/html目录下。<br>还将上面node服务代理出去了。容器内部 ip 通过查看<code>docker inspect containerID</code></p><h4 id="启动容器-1"><a href="#启动容器-1" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 8000:80 \</span><br><span class="line">-d --name vuenginx \</span><br><span class="line">--mount type=bind,source=$HOME/vueclidemo/nginx,target=/etc/nginx/conf.d \</span><br><span class="line">--mount type=bind,source=$HOME/vueclidemo/dist,target=/usr/share/nginx/html \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$HOME是指项目所在系统盘位置</span><br><span class="line">--mount type=bind,source=&#123;sourceDir&#125;,target=&#123;targetDir&#125; 将宿主机的sourceDir 挂载到容器的 targetDir 目录上。</span><br></pre></td></tr></table></figure><p>访问localhost:8000/api/*就可以请求到node的后台服务了。</p><h4 id="编写sheel脚本"><a href="#编写sheel脚本" class="headerlink" title="编写sheel脚本"></a>编写sheel脚本</h4><p>每次启动容器运行的命令较长，如果每次重新输入难免麻烦，我们可以将完整的命令保存到一个shell文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/sh</span><br><span class="line">:&lt;&lt;EOF</span><br><span class="line">    docker 运行脚本</span><br><span class="line">    shell</span><br><span class="line">    author:oouyang</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span> `解释器 !# 而不用在终端之前输入sh, bash.`</span><br><span class="line"><span class="meta">#</span>!/bin/sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>#### 查看所有镜像 docker image ls</span><br><span class="line"><span class="meta">#</span>#### 查看所有容器 docker container ls -a</span><br><span class="line"><span class="meta">#</span>#### 启动已终止容器 docker container start  containerID</span><br><span class="line"><span class="meta">#</span>###   查看单个容器信息  docker inspect containerID</span><br><span class="line"><span class="meta">#</span>#### 进入容器 docker exec -it containerID bash</span><br><span class="line"></span><br><span class="line">HOME=/Users/oouyang/Desktop/github/node</span><br><span class="line">echo "输入1查看所有镜像"</span><br><span class="line">echo "输入2 运行nginx"</span><br><span class="line">echo "输入3 查看所有容器并选择删除"</span><br><span class="line">echo "输入4 删除镜像"</span><br><span class="line">echo "输入5 查看容器信息"</span><br><span class="line">read -p $'\n\n请选择你要的操作:' aNum</span><br><span class="line"></span><br><span class="line">case $aNum in</span><br><span class="line">    1)  </span><br><span class="line">        echo '所有镜像'</span><br><span class="line">        docker image ls</span><br><span class="line">        ;;</span><br><span class="line">    2) </span><br><span class="line">        echo '查看所有容器'</span><br><span class="line">        docker container ls -a</span><br><span class="line">        read -p $'\n\n请输入您要运行的镜像：' imageName</span><br><span class="line">        if [[ $imageName = 'nginx' || $imageName = 'vuenginxcontainer' ]]</span><br><span class="line">        then</span><br><span class="line">            read -p $'\n\n请输入映射端口：' -n 6 -t 5 -s ipCode </span><br><span class="line">            #-p 输入提示文字</span><br><span class="line">            #-n 输入字符长度限制(达到6位，自动结束)</span><br><span class="line">            #-t 输入限时</span><br><span class="line">            #-s 隐藏输入内容</span><br><span class="line">            docker run -p $ipCode:80 -d \</span><br><span class="line">            --mount type=bind,source=$HOME/vueclidemo/nginx,target=/etc/nginx/conf.d \</span><br><span class="line">            --mount type=bind,source=$HOME/vueclidemo/dist,target=/usr/share/nginx/html \</span><br><span class="line">            $imageName</span><br><span class="line">            echo -e "\n请访问localhost:$ipCode" #echo 后面是双引号</span><br><span class="line">        fi</span><br><span class="line">        ;;</span><br><span class="line">    3)  </span><br><span class="line">        echo '查看所有容器'</span><br><span class="line">        docker container ls -a</span><br><span class="line">        read -p $'\n\n请输入您要删除的容器：' containerName</span><br><span class="line">        docker container stop $containerName</span><br><span class="line">        docker container rm $containerName</span><br><span class="line">        echo "\n删除 $containerName容器成功！"</span><br><span class="line">        ;;</span><br><span class="line">    4)  </span><br><span class="line">        echo '查看所有镜像'</span><br><span class="line">        docker image ls</span><br><span class="line">        read -p $'\n\n请输入您要删除的镜像:' imageName</span><br><span class="line">        docker image rm $imageName</span><br><span class="line">        ;;</span><br><span class="line">    5)</span><br><span class="line">        echo '查看所有容器信息'</span><br><span class="line">        docker container ls -a</span><br><span class="line">        read -p $'\n\n请输入您要查看的容器名称:' containerName1</span><br><span class="line">        docker inspect $containerName1</span><br><span class="line">        ;;</span><br><span class="line">    *)  echo '你没有输入 1 到 5 之间的数字'</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
            <tag> Vue </tag>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker Base</title>
      <link href="/2019/06/24/Docker-Base/"/>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此文章是公司同事docker培训时准备的资料，也来自于网络。如有侵权，联系必删。</p><h3 id="什么是-Docker"><a href="#什么是-Docker" class="headerlink" title="什么是 Docker"></a>什么是 Docker</h3><p>Docker 是个划时代的开源项目，它彻底释放了计算虚拟化的威力，极大提高了应用的维护效率，降低了云计算应用开发的成本！使用 Docker，可以让应用的部署、测试和分发都变得前所未有的高效和轻松！</p><p>无论是应用开发者、运维人员、还是其他信息技术从业人员，都有必要认识和掌握 Docker，节约有限的生命。</p><a id="more"></a><p>本教程适用于具备基础 Linux 知识的 Docker 初学者。</p><p>Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于 2013 年 3 月以 Apache 2.0 授权协议开源，主要项目代码在 GitHub 上进行维护。Docker 项目后来还加入了 Linux 基金会，并成立推动 开放容器联盟（OCI）。</p><p>Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于 操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 LXC，从 0.7 版本以后开始去除 LXC，转而使用自行开发的 libcontainer，从 1.11 开始，则进一步演进为使用 runC 和 containerd。</p><p>Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。</p><h3 id="为什么要使用-Docker？"><a href="#为什么要使用-Docker？" class="headerlink" title="为什么要使用 Docker？"></a>为什么要使用 Docker？</h3><p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p><h4 id="更高效的利用系统资源"><a href="#更高效的利用系统资源" class="headerlink" title="更高效的利用系统资源"></a>更高效的利用系统资源</h4><p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p><h4 id="更快速的启动时间"><a href="#更快速的启动时间" class="headerlink" title="更快速的启动时间"></a>更快速的启动时间</h4><p>传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</p><h4 id="一致的运行环境"><a href="#一致的运行环境" class="headerlink" title="一致的运行环境"></a>一致的运行环境</h4><p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。而 Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 <em>「这段代码在我机器上没问题啊」</em> 这类问题。</p><h4 id="持续交付和部署"><a href="#持续交付和部署" class="headerlink" title="持续交付和部署"></a>持续交付和部署</h4><p>对开发和运维（DevOps）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。</p><p>使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 Dockerfile 来进行镜像构建，并结合 持续集成(Continuous Integration) 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment) 系统进行自动部署。</p><p>而且使用 <code>Dockerfile</code> 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。</p><h4 id="更轻松的迁移"><a href="#更轻松的迁移" class="headerlink" title="更轻松的迁移"></a>更轻松的迁移</h4><p>由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p><h4 id="更轻松的维护和扩展"><a href="#更轻松的维护和扩展" class="headerlink" title="更轻松的维护和扩展"></a>更轻松的维护和扩展</h4><p>Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker 团队同各个开源项目团队一起维护了一大批高质量的 官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p><h4 id="对比传统虚拟机总结"><a href="#对比传统虚拟机总结" class="headerlink" title="对比传统虚拟机总结"></a>对比传统虚拟机总结</h4><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr><tr><td>硬盘使用</td><td>一般为 <code>MB</code></td><td>一般为 <code>GB</code></td></tr><tr><td>性能</td><td>接近原生</td><td>弱于</td></tr><tr><td>系统支持量</td><td>单机支持上千个容器</td><td>一般几十个</td></tr></tbody></table><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>Docker 包括三个基本概念</p><ul><li>镜像（<code>Image</code>）</li><li>容器（<code>Container</code>）</li><li>仓库（<code>Repository</code>）</li></ul><p>理解了这三个概念，就理解了 Docker 的整个生命周期。</p><h2 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h2><p>我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 <code>root</code> 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 <code>root</code> 文件系统。比如官方镜像 <code>ubuntu:18.04</code> 就包含了完整的一套 Ubuntu 18.04 最小系统的 <code>root</code> 文件系统。</p><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><h3 id="分层存储"><a href="#分层存储" class="headerlink" title="分层存储"></a>分层存储</h3><p>因为镜像包含操作系统完整的 <code>root</code> 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 Union FS 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p><p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p><p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p><h2 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h2><p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。</p><p>前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为<strong>容器存储层</strong>。</p><p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p><p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p><p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</p><h2 id="Docker-Registry"><a href="#Docker-Registry" class="headerlink" title="Docker Registry"></a>Docker Registry</h2><p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。</p><p>一个 <strong>Docker Registry</strong> 中可以包含多个<strong>仓库</strong>（<code>Repository</code>）；每个仓库可以包含多个<strong>标签</strong>（<code>Tag</code>）；每个标签对应一个镜像。</p><p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <code>&lt;仓库名&gt;:&lt;标签&gt;</code> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <code>latest</code> 作为默认标签。</p><p>以 Ubuntu 镜像 为例，<code>ubuntu</code> 是仓库的名字，其内包含有不同的版本标签，如，<code>16.04</code>, <code>18.04</code>。我们可以通过 <code>ubuntu:14.04</code>，或者 <code>ubuntu:18.04</code> 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 <code>ubuntu</code>，那将视为 <code>ubuntu:latest</code>。</p><p>仓库名经常以 <em>两段式路径</em> 形式出现，比如 <code>jwilder/nginx-proxy</code>，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。</p><h3 id="Docker-Registry-公开服务"><a href="#Docker-Registry-公开服务" class="headerlink" title="Docker Registry 公开服务"></a>Docker Registry 公开服务</h3><p>Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。</p><p>最常使用的 Registry 公开服务是官方的 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>，这也是默认的 Registry，并拥有大量的高质量的官方镜像。除此以外，还有 <a href="https://coreos.com/" target="_blank" rel="noopener">CoreOS</a> 的 <a href="https://quay.io/repository/" target="_blank" rel="noopener">Quay.io</a>，CoreOS 相关的镜像存储在这里；Google 的 <a href="https://cloud.google.com/container-registry/" target="_blank" rel="noopener">Google Container Registry</a>，<a href="https://kubernetes.io/" target="_blank" rel="noopener">Kubernetes</a> 的镜像使用的就是这个服务。</p><p>由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对 Docker Hub 的镜像服务（<code>Registry Mirror</code>），这些镜像服务被称为<strong>加速器</strong>。常见的有 <a href="https://cr.console.aliyun.com/#/accelerator" target="_blank" rel="noopener">阿里云加速器</a>、<a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">DaoCloud 加速器</a> 等。使用加速器会直接从国内的地址下载 Docker Hub 的镜像，比直接从 Docker Hub 下载速度会提高很多。在 安装 Docker 一节中有详细的配置方法。</p><p>国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 <a href="https://hub.tenxcloud.com/" target="_blank" rel="noopener">时速云镜像仓库</a>、<a href="https://c.163.com/hub#/m/library/" target="_blank" rel="noopener">网易云镜像服务</a>、<a href="https://hub.daocloud.io/" target="_blank" rel="noopener">DaoCloud 镜像市场</a>、<a href="https://cr.console.aliyun.com/" target="_blank" rel="noopener">阿里云镜像库</a> 等。</p><h3 id="私有-Docker-Registry"><a href="#私有-Docker-Registry" class="headerlink" title="私有 Docker Registry"></a>私有 Docker Registry</h3><p>除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 <a href="https://hub.docker.com/_/registry/" target="_blank" rel="noopener">Docker Registry</a>镜像，可以直接使用做为私有 Registry 服务。在 私有仓库 一节中，会有进一步的搭建私有 Registry 服务的讲解。</p><p>开源的 Docker Registry 镜像只提供了 <a href="https://docs.docker.com/registry/spec/api/" target="_blank" rel="noopener">Docker Registry API</a> 的服务端实现，足以支持 <code>docker</code> 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。在官方的商业化版本 <a href="https://docs.docker.com/datacenter/dtr/2.0/" target="_blank" rel="noopener">Docker Trusted Registry</a> 中，提供了这些高级功能。</p><p>除了官方的 Docker Registry 外，还有第三方软件实现了 Docker Registry API，甚至提供了用户界面以及一些高级功能。比如，VMWare Harbor 和 <strong>Sonatype Nexus</strong>。</p><h1 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h1><p>Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费，支持周期 7 个月），EE 即企业版，强调安全，付费使用，支持周期 24 个月。</p><p>Docker 社区版 (CE) 是开发人员和小型团队开始使用 Docker 并尝试使用基于容器的应用的理想之选。Docker CE 有两个更新渠道，即 <strong>stable</strong> 和 <strong>edge</strong>：</p><ul><li><strong>Stable</strong> 每个季度为您提供可靠更新</li><li><strong>Edge</strong> 每个月为您提供新功能</li></ul><p>从 Docker 17.03 开始，Docker 使用基于时间的发行计划。</p><p>官方网站上有各种环境下的 <a href="https://docs.docker.com/engine/installation/" target="_blank" rel="noopener">安装指南</a>，这里主要介绍 Docker CE 在 Linux 的安装。</p><h2 id="CentOS-安装-Docker-CE"><a href="#CentOS-安装-Docker-CE" class="headerlink" title="CentOS 安装 Docker CE"></a>CentOS 安装 Docker CE</h2><blockquote><p>警告：切勿在没有配置 Docker YUM 源的情况下直接使用 yum 命令安装 Docker.</p></blockquote><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h4><p>Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10。 CentOS 7 满足最低内核的要求，但由于内核版本比较低，部分功能（如 <code>overlay2</code> 存储层驱动）无法使用，并且部分功能可能不太稳定。</p><h4 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h4><p>旧版本的 Docker 称为 <code>docker</code> 或者 <code>docker-engine</code>，使用以下命令卸载旧版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h3 id="使用-yum-安装"><a href="#使用-yum-安装" class="headerlink" title="使用 yum 安装"></a>使用 yum 安装</h3><p>执行以下命令安装依赖包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2</span><br></pre></td></tr></table></figure><p>安装 yum-utils，它提供一个 yum-config-manager 单元，同时安装的 device-mapper-persistent-data 和 lvm2 用于储存设备映射（devicemapper）必须的两个软件包。</p><p>鉴于国内网络问题，强烈建议使用国内源，官方源请在注释中查看。</p><p>执行下面的命令添加 <code>yum</code> 软件源：</p><p>仓库配置会保存到 /etc/yum.repos.d/docker-ce.repo 文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># $ sudo yum-config-manager \</span></span><br><span class="line"><span class="comment">#     --add-repo \</span></span><br><span class="line"><span class="comment">#     https://download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure><h4 id="安装-Docker-CE"><a href="#安装-Docker-CE" class="headerlink" title="安装 Docker CE"></a>安装 Docker CE</h4><p>更新 <code>yum</code> 软件源缓存，并安装 <code>docker-ce</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum makecache fast</span><br><span class="line">$ sudo yum install docker-ce</span><br></pre></td></tr></table></figure><h3 id="使用脚本自动安装"><a href="#使用脚本自动安装" class="headerlink" title="使用脚本自动安装"></a>使用脚本自动安装</h3><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，CentOS 系统上可以使用这套脚本安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><p>执行这个命令，脚本就会自动的将一切准备工作做好，并把 Docker CE 的 Edge 版本安装在系统中。</p><p>由于网络原因，在国内这个脚本可能会出现下载错误的情况。国内一些云服务商提供了这个脚本的修改版本，使用国内的 Docker 软件源镜像安装。如DaoCloud 的安装脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure><h3 id="查看-Docker-版本"><a href="#查看-Docker-版本" class="headerlink" title="查看 Docker 版本"></a>查看 Docker 版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@skyline Null]# docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:           18.09.5</span><br><span class="line"> API version:       1.39</span><br><span class="line"> Go version:        go1.10.8</span><br><span class="line"> Git commit:        e8ff056</span><br><span class="line"> Built:             Thu Apr 11 04:43:34 2019</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.09.5</span><br><span class="line">  API version:      1.39 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.8</span><br><span class="line">  Git commit:       e8ff056</span><br><span class="line">  Built:            Thu Apr 11 04:13:40 2019</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br></pre></td></tr></table></figure><h3 id="启动-Docker-CE"><a href="#启动-Docker-CE" class="headerlink" title="启动 Docker CE"></a>启动 Docker CE</h3><p>设置随系统启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>启动 Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="建立-docker-用户组"><a href="#建立-docker-用户组" class="headerlink" title="建立 docker 用户组"></a>建立 docker 用户组</h3><p>默认情况下，<code>docker</code> 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 <code>root</code> 用户和 <code>docker</code> 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 <code>root</code> 用户。因此，更好地做法是将需要使用 <code>docker</code> 的用户加入 <code>docker</code> 用户组。</p><p>建立 <code>docker</code> 组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure><p>将当前用户加入 <code>docker</code> 组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>退出当前终端并重新登录，进行如下测试。</p><h3 id="测试-Docker-是否安装正确"><a href="#测试-Docker-是否安装正确" class="headerlink" title="测试 Docker 是否安装正确"></a>测试 Docker 是否安装正确</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@skyline Null]<span class="comment"># docker run hello-world</span></span><br><span class="line">Unable to find image <span class="string">'hello-world:latest'</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">1b930d010525: Pull complete </span><br><span class="line">Digest: sha256:2557e3c07ed1e38f26e389462d03ed943586f744621577a99efb77324b0fe535</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">"hello-world"</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><p>若能正常输出以上信息，则说明安装成功。</p><h2 id="镜像加速器"><a href="#镜像加速器" class="headerlink" title="镜像加速器"></a>镜像加速器</h2><p>国内从 Docker Hub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。Docker 官方和国内很多云服务商都提供了国内加速器服务，例如：</p><ul><li><a href="https://docs.docker.com/registry/recipes/mirror/#use-case-the-china-registry-mirror" target="_blank" rel="noopener">Docker 官方提供的中国 registry mirror <code>https://registry.docker-cn.com</code></a></li><li><a href="https://cr.console.aliyun.com/cn-hangzhou/mirrors" target="_blank" rel="noopener">阿里云加速器(需登录账号获取)</a></li><li><a href="https://www.daocloud.io/mirror" target="_blank" rel="noopener">道客 DaoCloud 镜像站</a></li></ul><blockquote><p>当配置某一个加速器地址之后，若发现拉取不到镜像，请切换到另一个加速器地址。</p><p>国内各大云服务商均提供了 Docker 镜像加速服务，建议根据运行 Docker 的云平台选择对应的镜像加速服务。</p></blockquote><p>我们以 Docker 官方加速器 <code>https://registry.docker-cn.com</code> 为例进行介绍。</p><h3 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h3><p>对于使用 systemd 的系统，请在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，一定要保证该文件符合 json 规范，否则 Docker 将不能启动。</p></blockquote><p>之后重新启动服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="检查加速器是否生效"><a href="#检查加速器是否生效" class="headerlink" title="检查加速器是否生效"></a>检查加速器是否生效</h3><p>命令行执行 <code>docker info</code>，如果从结果中看到了如下内容，说明配置成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Registry Mirrors:</span><br><span class="line"> https://registry.docker-cn.com/</span><br></pre></td></tr></table></figure><h1 id="使用-Docker-镜像"><a href="#使用-Docker-镜像" class="headerlink" title="使用 Docker 镜像"></a>使用 Docker 镜像</h1><p>在之前的介绍中，我们知道镜像是 Docker 的三大组件之一。</p><p>Docker 运行容器前需要本地存在对应的镜像，如果本地不存在该镜像，Docker 会从镜像仓库下载该镜像。</p><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>之前提到过，<a href="https://hub.docker.com/explore/" target="_blank" rel="noopener">Docker Hub</a> 上有大量的高质量的镜像可以用。</p><p>从 Docker 镜像仓库获取镜像的命令是 <code>docker pull</code>。其命令格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br></pre></td></tr></table></figure><p>具体的选项可以通过 <code>docker pull --help</code> 命令看到，这里我们说一下镜像名称的格式。</p><ul><li>Docker 镜像仓库地址：地址的格式一般是 <code>&lt;域名/IP&gt;[:端口号]</code>。默认地址是 Docker Hub。</li><li>仓库名：如之前所说，这里的仓库名是两段式名称，即 <code>&lt;用户名&gt;/&lt;软件名&gt;</code>。对于 Docker Hub，如果不给出用户名，则默认为 <code>library</code>，也就是官方镜像。</li></ul><p>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Null@skyline ~]$ docker pull nginx:1.14.0</span><br><span class="line">1.14.0: Pulling from library/nginx</span><br><span class="line">f17d81b4b692: Pull complete </span><br><span class="line">3df1ab0a1750: Pull complete </span><br><span class="line">576b56a453df: Pull complete </span><br><span class="line">Digest: sha256:8b600a4d029481cc5b459f1380b30ff6cb98e27544fc02370de836e397e34030</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> nginx:1.14.0</span><br></pre></td></tr></table></figure><p>上面的命令中没有给出 Docker 镜像仓库地址，因此将会从 Docker Hub 获取镜像。而镜像名称是 <code>nginx:1.14.0</code>，因此将会获取官方镜像 <code>library/nginx</code> 仓库中标签为 <code>1.14.0</code> 的镜像。</p><p>从下载过程中可以看到我们之前提及的分层存储的概念，镜像是由多层存储所构成。下载也是一层层的去下载，并非单一文件。下载过程中给出了每一层的 ID 的前 12 位。并且下载结束后，给出该镜像完整的 <code>sha256</code> 的摘要，以确保下载一致性。</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>有了镜像后，我们就能够以这个镜像为基础启动并运行一个容器。以上面的 <code>centos:7</code> 为例，如果我们打算启动里面的 <code>bash</code> 并且进行交互式操作的话，可以执行下面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm \</span><br><span class="line">    centos:7 \</span><br><span class="line">    bash</span><br><span class="line"></span><br><span class="line">[root@a69cb7d46e0c /]<span class="comment"># cat /etc/centos-release</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br><span class="line">[root@a69cb7d46e0c /]<span class="comment"># uname -a</span></span><br><span class="line">Linux a69cb7d46e0c 3.10.0-957.el7.x86_64 <span class="comment">#1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><p><code>docker run</code> 就是运行容器的命令，我们这里简要的说明一下上面用到的参数。</p><ul><li><code>-it</code>：这是两个参数，一个是 <code>-i</code>：交互式操作，一个是 <code>-t</code> 终端。我们这里打算进入 <code>bash</code> 执行一些命令并查看返回结果，因此我们需要交互式终端。</li><li><code>--rm</code>：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 <code>docker rm</code>。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 <code>--rm</code> 可以避免浪费空间。</li><li><code>centos:7</code>：这是指用 <code>centos:7</code> 镜像为基础来启动容器。</li><li><code>bash</code>：放在镜像名后的是<strong>命令</strong>，这里我们希望有个交互式 Shell，因此用的是 <code>bash</code>。</li></ul><p>进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。这里，我们执行了 <code>cat /etc/centos-release</code>，这是 CentOS 常用的查看当前系统版本的命令，从返回的结果可以看到容器内是 <code>CentOS Linux release 7.6</code> 系统。</p><p>最后我们通过 <code>exit</code> 退出了这个容器。</p><h2 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h2><p>要想列出已经下载下来的镜像，可以使用 <code>docker image ls</code> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Null@skyline ~]$ docker image ls</span><br><span class="line">REPOSITORY      TAG        IMAGE ID         CREATED          SIZE</span><br><span class="line">centos          7          9f38484d220f     3 weeks ago      202MB</span><br><span class="line">hello-world     latest     fce289e99eb9     3 months ago     1.84kB</span><br><span class="line">nginx           1.14.0     ecc98fc2f376     5 months ago     109MB</span><br></pre></td></tr></table></figure><p>列表包含了 <code>仓库名</code>、<code>标签</code>、<code>镜像 ID</code>、<code>创建时间</code> 以及 <code>所占用的空间</code>。</p><p>其中仓库名、标签在之前的基础概念章节已经介绍过了。<strong>镜像 ID</strong> 则是镜像的唯一标识，一个镜像可以对应多个<strong>标签</strong>。</p><h3 id="镜像体积"><a href="#镜像体积" class="headerlink" title="镜像体积"></a>镜像体积</h3><p>如果仔细观察，会注意到，这里标识的所占用空间和在 Docker Hub 上看到的镜像大小不同。在镜像下载和上传过程中镜像是保持着压缩状态的，因此 Docker Hub 所显示的大小是网络传输中更关心的流量大小。而 <code>docker image ls</code> 显示的是镜像下载到本地后，展开的大小，准确说，是展开后的各层所占空间的总和，因为镜像到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。</p><p>另外一个需要注意的问题是，<code>docker image ls</code> 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 Docker 使用 Union FS，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。</p><p>你可以通过以下命令来便捷的查看镜像、容器、数据卷所占用的空间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Null@skyline ~]$ docker system df</span><br><span class="line">TYPE             TOTAL    ACTIVE   SIZE      RECLAIMABLE</span><br><span class="line">Images           3        0        310.7MB   310.7MB (100%)</span><br><span class="line">Containers       0        0        0B        0B</span><br><span class="line">Local Volumes    0        0        0B        0B</span><br><span class="line">Build Cache      0        0        0B        0B</span><br></pre></td></tr></table></figure><h3 id="虚悬镜像"><a href="#虚悬镜像" class="headerlink" title="虚悬镜像"></a>虚悬镜像</h3><p>镜像列表中，还可以看到一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 <code>&lt;none&gt;</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;none&gt;    &lt;none&gt;    00285df0df87    5 days ago    342 MB</span><br></pre></td></tr></table></figure><p>这个镜像原本是有镜像名和标签的，原来为 <code>mongo:3.2</code>，随着官方镜像维护，发布了新版本后，重新 <code>docker pull mongo:3.2</code> 时，<code>mongo:3.2</code> 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 <code>&lt;none&gt;</code>。除了 <code>docker pull</code> 可能导致这种情况，<code>docker build</code> 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <code>&lt;none&gt;</code> 的镜像。这类无标签镜像也被称为 <strong>虚悬镜像(dangling image)</strong> ，可以用下面的命令专门显示这类镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls -f dangling=<span class="literal">true</span></span><br><span class="line">REPOSITORY    TAG        IMAGE ID         CREATED       SIZE</span><br><span class="line">&lt;none&gt;        &lt;none&gt;     00285df0df87     5 days ago    342 MB</span><br></pre></td></tr></table></figure><p>一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Null@skyline ~]$ docker image prune</span><br><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] y</span><br><span class="line">Total reclaimed space: 0B</span><br></pre></td></tr></table></figure><h3 id="中间层镜像"><a href="#中间层镜像" class="headerlink" title="中间层镜像"></a>中间层镜像</h3><p>为了加速镜像构建、重复利用资源，Docker 会利用 <strong>中间层镜像</strong>。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 <code>docker image ls</code> 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 <code>-a</code> 参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls -a</span><br></pre></td></tr></table></figure><p>这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说过，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。</p><h3 id="列出部分镜像"><a href="#列出部分镜像" class="headerlink" title="列出部分镜像"></a>列出部分镜像</h3><p>不加任何参数的情况下，<code>docker image ls</code> 会列出所有顶级镜像，但是有时候我们只希望列出部分镜像。<code>docker image ls</code> 有好几个参数可以帮助做到这个事情。</p><p>根据仓库名列出镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls ubuntu</span><br><span class="line">REPOSITORY    TAG       IMAGE ID        CREATED        SIZE</span><br><span class="line">ubuntu        18.04     f753707788c5    4 weeks ago    127 MB</span><br><span class="line">ubuntu        latest    f753707788c5    4 weeks ago    127 MB</span><br></pre></td></tr></table></figure><p>列出特定的某个镜像，也就是说指定仓库名和标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls ubuntu:18.04</span><br><span class="line">REPOSITORY    TAG       IMAGE ID         CREATED        SIZE</span><br><span class="line">ubuntu        18.04     f753707788c5     4 weeks ago    127 MB</span><br></pre></td></tr></table></figure><p>除此以外，<code>docker image ls</code> 还支持强大的过滤器参数 <code>--filter</code>，或者简写 <code>-f</code>。之前我们已经看到了使用过滤器来列出虚悬镜像的用法，它还有更多的用法。比如，我们希望看到在 <code>mongo:3.2</code> 之后建立的镜像，可以用下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls -f since=mongo:3.2</span><br><span class="line">REPOSITORY     TAG        IMAGE ID          CREATED        SIZE</span><br><span class="line">redis          latest     5f515359c7f8      5 days ago     183 MB</span><br><span class="line">nginx          latest     05a60462f8ba      5 days ago     181 MB</span><br></pre></td></tr></table></figure><p>想查看某个位置之前的镜像也可以，只需要把 <code>since</code> 换成 <code>before</code> 即可。</p><p>此外，如果镜像构建时，定义了 <code>LABEL</code>，还可以通过 <code>LABEL</code> 来过滤。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls -f label=com.example.version=0.1</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="以特定格式显示"><a href="#以特定格式显示" class="headerlink" title="以特定格式显示"></a>以特定格式显示</h3><p>默认情况下，<code>docker image ls</code> 会输出一个完整的表格，但是我们并非所有时候都会需要这些内容。比如，刚才删除虚悬镜像的时候，我们需要利用 <code>docker image ls</code> 把所有的虚悬镜像的 ID 列出来，然后才可以交给 <code>docker image rm</code> 命令作为参数来删除指定的这些镜像，这个时候就用到了 <code>-q</code> 参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls -q</span><br><span class="line">5f515359c7f8</span><br><span class="line">05a60462f8ba</span><br><span class="line">fe9198c04d62</span><br><span class="line">00285df0df87</span><br><span class="line">f753707788c5</span><br><span class="line">f753707788c5</span><br><span class="line">1e0c3dd64ccd</span><br></pre></td></tr></table></figure><p><code>--filter</code> 配合 <code>-q</code> 产生出指定范围的 ID 列表，然后送给另一个 <code>docker</code> 命令作为参数，从而针对这组实体成批的进行某种操作的做法在 Docker 命令行使用过程中非常常见，不仅仅是镜像，将来我们会在各个命令中看到这类搭配以完成很强大的功能。因此每次在文档看到过滤器后，可以多注意一下它们的用法。</p><p>另外一些时候，我们可能只是对表格的结构不满意，希望自己组织列；或者不希望有标题，这样方便其它程序解析结果等，这就用到了 Go 的模板语法。</p><p>比如，下面的命令会直接列出镜像结果，并且只包含镜像ID和仓库名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls --format <span class="string">"&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;"</span></span><br><span class="line">5f515359c7f8: redis</span><br><span class="line">05a60462f8ba: nginx</span><br><span class="line">fe9198c04d62: mongo</span><br><span class="line">00285df0df87: &lt;none&gt;</span><br><span class="line">f753707788c5: ubuntu</span><br><span class="line">f753707788c5: ubuntu</span><br><span class="line">1e0c3dd64ccd: ubuntu</span><br></pre></td></tr></table></figure><p>或者打算以表格等距显示，并且有标题行，和默认一样，不过自己定义列：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls --format <span class="string">"table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Repository&#125;&#125;\t&#123;&#123;.Tag&#125;&#125;"</span></span><br><span class="line">IMAGE ID            REPOSITORY          TAG</span><br><span class="line">5f515359c7f8        redis               latest</span><br><span class="line">05a60462f8ba        nginx               latest</span><br><span class="line">fe9198c04d62        mongo               3.2</span><br><span class="line">00285df0df87        &lt;none&gt;              &lt;none&gt;</span><br><span class="line">f753707788c5        ubuntu              18.04</span><br><span class="line">f753707788c5        ubuntu              latest</span><br></pre></td></tr></table></figure><h2 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h2><p>如果要删除本地的镜像，可以使用 <code>docker image rm</code> 命令，其格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br></pre></td></tr></table></figure><h3 id="用-ID、镜像名、摘要删除镜像"><a href="#用-ID、镜像名、摘要删除镜像" class="headerlink" title="用 ID、镜像名、摘要删除镜像"></a>用 ID、镜像名、摘要删除镜像</h3><p>其中，<code>&lt;镜像&gt;</code> 可以是 <code>镜像短 ID</code>、<code>镜像长 ID</code>、<code>镜像名</code> 或者 <code>镜像摘要</code>。</p><p>比如我们有这么一些镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY    TAG         IMAGE ID         CREATED         SIZE</span><br><span class="line">centos        latest      0584b3d2cf6d     3 weeks ago     196.5 MB</span><br><span class="line">redis         alpine      501ad78535f0     3 weeks ago     21.03 MB</span><br><span class="line">docker        latest      cf693ec9b5c7     3 weeks ago     105.1 MB</span><br><span class="line">nginx         latest      e43d811ce2f4     5 weeks ago     181.5 MB</span><br></pre></td></tr></table></figure><p>我们可以用镜像的完整 ID，也称为 <code>长 ID</code>，来删除镜像。使用脚本的时候可能会用长 ID，但是人工输入就太累了，所以更多的时候是用 <code>短 ID</code> 来删除镜像。<code>docker image ls</code> 默认列出的就已经是短 ID 了，一般取前3个字符以上，只要足够区分于别的镜像就可以了。</p><p>比如这里，如果我们要删除 <code>redis:alpine</code> 镜像，可以执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm 501</span><br><span class="line">Untagged: redis:alpine</span><br><span class="line">Untagged: redis@sha256:f1ed3708f538b537eb9c2a7dd50dc90a706f7debd7e1196c9264edeea521a86d</span><br><span class="line">Deleted: sha256:501ad78535f015d88872e13fa87a828425117e3d28075d0c117932b05bf189b7</span><br><span class="line">Deleted: sha256:96167737e29ca8e9d74982ef2a0dda76ed7b430da55e321c071f0dbff8c2899b</span><br><span class="line">Deleted: sha256:32770d1dcf835f192cafd6b9263b7b597a1778a403a109e2cc2ee866f74adf23</span><br><span class="line">Deleted: sha256:127227698ad74a5846ff5153475e03439d96d4b1c7f2a449c7a826ef74a2d2fa</span><br><span class="line">Deleted: sha256:1333ecc582459bac54e1437335c0816bc17634e131ea0cc48daa27d32c75eab3</span><br><span class="line">Deleted: sha256:4fc455b921edf9c4aea207c51ab39b10b06540c8b4825ba57b3feed1668fa7c7</span><br></pre></td></tr></table></figure><p>我们也可以用<code>镜像名</code>，也就是 <code>&lt;仓库名&gt;:&lt;标签&gt;</code>，来删除镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm centos</span><br><span class="line">Untagged: centos:latest</span><br><span class="line">Untagged: centos@sha256:b2f9d1c0ff5f87a4743104d099a3d561002ac500db1b9bfa02a783a46e0d366c</span><br><span class="line">Deleted: sha256:0584b3d2cf6d235ee310cf14b54667d889887b838d3f3d3033acd70fc3c48b8a</span><br><span class="line">Deleted: sha256:97ca462ad9eeae25941546209454496e1d66749d53dfa2ee32bf1faabd239d38</span><br></pre></td></tr></table></figure><h3 id="Untagged-和-Deleted"><a href="#Untagged-和-Deleted" class="headerlink" title="Untagged 和 Deleted"></a>Untagged 和 Deleted</h3><p>如果观察上面这几个命令的运行输出信息的话，你会注意到删除行为分为两类，一类是 <code>Untagged</code>，另一类是 <code>Deleted</code>。我们之前介绍过，镜像的唯一标识是其 ID 和摘要，而一个镜像可以有多个标签。</p><p>因此当我们使用上面命令删除镜像的时候，实际上是在要求删除某个标签的镜像。所以首先需要做的是将满足我们要求的所有镜像标签都取消，这就是我们看到的 <code>Untagged</code> 的信息。因为一个镜像可以对应多个标签，因此当我们删除了所指定的标签后，可能还有别的标签指向了这个镜像，如果是这种情况，那么 <code>Delete</code> 行为就不会发生。所以并非所有的 <code>docker image rm</code> 都会产生删除镜像的行为，有可能仅仅是取消了某个标签而已。</p><p>当该镜像所有的标签都被取消了，该镜像很可能会失去了存在的意义，因此会触发删除行为。镜像是多层存储结构，因此在删除的时候也是从上层向基础层方向依次进行判断删除。镜像的多层结构让镜像复用变动非常容易，因此很有可能某个其它镜像正依赖于当前镜像的某一层。这种情况，依旧不会触发删除该层的行为。直到没有任何层依赖当前层时，才会真实的删除当前层。这就是为什么，有时候会奇怪，为什么明明没有别的标签指向这个镜像，但是它还是存在的原因，也是为什么有时候会发现所删除的层数和自己 <code>docker pull</code> 看到的层数不一样的源。</p><p>除了镜像依赖以外，还需要注意的是容器对镜像的依赖。如果有用这个镜像启动的容器存在（即使容器没有运行），那么同样不可以删除这个镜像。之前讲过，容器是以镜像为基础，再加一层容器存储层，组成这样的多层存储结构去运行的。因此该镜像如果被这个容器所依赖的，那么删除必然会导致故障。如果这些容器是不需要的，应该先将它们删除，然后再来删除镜像。</p><h3 id="用-docker-image-ls-命令来配合"><a href="#用-docker-image-ls-命令来配合" class="headerlink" title="用 docker image ls 命令来配合"></a>用 docker image ls 命令来配合</h3><p>像其它可以承接多个实体的命令一样，可以使用 <code>docker image ls -q</code> 来配合使用 <code>docker image rm</code>，这样可以成批的删除希望删除的镜像。我们在“镜像列表”章节介绍过很多过滤镜像列表的方式都可以拿过来使用。</p><p>比如，我们需要删除所有仓库名为 <code>redis</code> 的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm $(docker image ls -q redis)</span><br></pre></td></tr></table></figure><p>或者删除所有在 <code>mongo:3.2</code> 之前的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm $(docker image ls -q -f before=mongo:3.2)</span><br></pre></td></tr></table></figure><p>充分利用你的想象力和 Linux 命令行的强大，你可以完成很多非常赞的功能。</p><h2 id="利用-commit-理解镜像构成"><a href="#利用-commit-理解镜像构成" class="headerlink" title="利用 commit 理解镜像构成"></a>利用 commit 理解镜像构成</h2><p>注意： <code>docker commit</code> 命令除了学习之外，还有一些特殊的应用场合，比如被入侵后保存现场等。但是，不要使用 <code>docker commit</code> 定制镜像，定制镜像应该使用 <code>Dockerfile</code> 来完成。</p><p>镜像是容器的基础，每次执行 <code>docker run</code> 的时候都会指定哪个镜像作为容器运行的基础。在之前的例子中，我们所使用的都是来自于 Docker Hub 的镜像。直接使用这些镜像是可以满足一定的需求，而当这些镜像无法直接满足需求时，我们就需要定制这些镜像。</p><p>回顾一下之前我们学到的知识，镜像是多层存储，每一层是在前一层的基础上进行的修改；而容器同样也是多层存储，是在以镜像为基础层，在其基础上加一层作为容器运行时的存储层。</p><p>现在让我们以定制一个 Web 服务器为例子，来讲解镜像是如何构建的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name webserver -d -p 80:80 nginx</span><br></pre></td></tr></table></figure><p>这条命令会用 <code>nginx</code> 镜像启动一个容器，命名为 <code>webserver</code>，并且映射了 80 端口，这样我们可以用浏览器或<code>curl</code>命令去访问这个 <code>nginx</code> 服务器。我们会看到默认的 Nginx 欢迎页面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[Null@skyline ~]$ curl http://127.0.0.1</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">"http://nginx.org/"</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">"http://nginx.com/"</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html</span><br></pre></td></tr></table></figure><p>现在，假设我们不喜欢这个欢迎页面，我们改成欢迎 Docker 的文字，我们可以使用 <code>docker exec</code>命令进入容器，修改其内容。重新访问后就能看到内容被改变了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Null@skyline ~]$ docker <span class="built_in">exec</span> -it webserver bash</span><br><span class="line">root@bc54bf48628a:/<span class="comment"># echo '&lt;h1&gt;Hello, Docker!&lt;/h1&gt;' &gt; /usr/share/nginx/html/index.html </span></span><br><span class="line">root@bc54bf48628a:/<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[Null@skyline ~]$ curl http://127.0.0.1</span><br><span class="line">&lt;h1&gt;Hello, Docker!&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>我们修改了容器的文件，也就是改动了容器的存储层。我们可以通过 <code>docker diff</code> 命令看到具体的改动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[Null@skyline ~]$ docker diff webserver</span><br><span class="line">C /var</span><br><span class="line">C /var/cache</span><br><span class="line">C /var/cache/nginx</span><br><span class="line">A /var/cache/nginx/fastcgi_temp</span><br><span class="line">A /var/cache/nginx/proxy_temp</span><br><span class="line">A /var/cache/nginx/scgi_temp</span><br><span class="line">A /var/cache/nginx/uwsgi_temp</span><br><span class="line">A /var/cache/nginx/client_temp</span><br><span class="line">C /run</span><br><span class="line">A /run/nginx.pid</span><br><span class="line">C /usr</span><br><span class="line">C /usr/share</span><br><span class="line">C /usr/share/nginx</span><br><span class="line">C /usr/share/nginx/html</span><br><span class="line">C /usr/share/nginx/html/index.html</span><br><span class="line">C /root</span><br><span class="line">A /root/.bash_history</span><br></pre></td></tr></table></figure><p>现在我们定制好了变化，我们希望能将其保存下来形成镜像。</p><p>要知道，当我们运行一个容器的时候（如果不使用卷的话），我们做的任何文件修改都会被记录于容器存储层里。而 Docker 提供了一个 <code>docker commit</code> 命令，可以将容器的存储层保存下来成为镜像。换句话说，就是在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化。</p><p><code>docker commit</code> 的语法格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]</span><br></pre></td></tr></table></figure><p>我们可以用下面的命令将容器保存为镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Null@skyline ~]$ docker commit \</span><br><span class="line"> --author <span class="string">"Null &lt;test@skyline.name&gt;"</span> \</span><br><span class="line"> --message <span class="string">"update"</span> \</span><br><span class="line"> webserver \</span><br><span class="line"> nginx:v2</span><br><span class="line">sha256:de0d79c679fd4c7b17d25cb502f48443b92066186b0ea305a401242e15b62a80</span><br></pre></td></tr></table></figure><p>其中 <code>--author</code> 是指定修改的作者，而 <code>--message</code> 则是记录本次修改的内容。这点和 <code>git</code> 版本控制相似，不过这里这些信息可以省略留空。</p><p>我们可以在 <code>docker images</code> 中看到这个新定制的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Null@skyline ~]$ docker images</span><br><span class="line">REPOSITORY     TAG         IMAGE ID         CREATED           SIZE</span><br><span class="line">nginx          v2          de0d79c679fd     19 seconds ago    109MB</span><br><span class="line">nginx          latest      bb776ce48575     5 days ago        109MB</span><br><span class="line">centos         7           9f38484d220f     4 weeks ago       202MB</span><br><span class="line">hello-world    latest      fce289e99eb9     3 months ago      1.84kB</span><br><span class="line">nginx          1.14.0      ecc98fc2f376     6 months ago      109MB</span><br></pre></td></tr></table></figure><p>我们还可以用 <code>docker history</code> 具体查看镜像内的历史记录，如果比较 <code>nginx:latest</code> 的历史记录，我们会发现新增了我们刚刚提交的这一层。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Null@skyline ~]$ docker <span class="built_in">history</span> nginx:v2</span><br><span class="line">IMAGE          CREATED         CREATED BY                 SIZE   COMMENT</span><br><span class="line">de0d79c679fd   2 minutes ago   nginx -g daemon off;       98B    update</span><br><span class="line">bb776ce48575   5 days ago      /bin/sh -c <span class="comment">#(nop)  CMD …   0B     </span></span><br><span class="line">&lt;missing&gt;      5 days ago      /bin/sh -c <span class="comment">#(nop)  STOP…   0B     </span></span><br><span class="line">&lt;missing&gt;      5 days ago      /bin/sh -c <span class="comment">#(nop)  EXPO…   0B     </span></span><br><span class="line">&lt;missing&gt;      5 days ago      /bin/sh -c ln -sf /dev/…   22B    </span><br><span class="line">&lt;missing&gt;      5 days ago      /bin/sh -c <span class="built_in">set</span> -x  &amp;&amp; a…   54MB   </span><br><span class="line">&lt;missing&gt;      5 days ago      /bin/sh -c <span class="comment">#(nop)  ENV …   0B     </span></span><br><span class="line">&lt;missing&gt;      5 days ago      /bin/sh -c <span class="comment">#(nop)  ENV …   0B     </span></span><br><span class="line">&lt;missing&gt;      2 weeks ago     /bin/sh -c <span class="comment">#(nop)  LABE…   0B     </span></span><br><span class="line">&lt;missing&gt;      2 weeks ago     /bin/sh -c <span class="comment">#(nop)  CMD …   0B     </span></span><br><span class="line">&lt;missing&gt;      2 weeks ago     /bin/sh -c <span class="comment">#(nop) ADD f…   55.3MB</span></span><br></pre></td></tr></table></figure><p>新的镜像定制好后，我们可以来运行这个镜像。并访问容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Null@skyline ~]$ docker run --name web2 -d -p 81:80 nginx:v2</span><br><span class="line">e7666e6d3677274727f2d4a53faf8567fc4def19fcfff17d5081d33fe1e95e71</span><br><span class="line">[Null@skyline ~]$ curl http://127.0.0.1:81</span><br><span class="line">&lt;h1&gt;Hello, Docker!&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>这里我们命名为新的服务为 <code>web2</code>，并且映射到 <code>81</code> 端口。其内容应该和之前修改后的 <code>webserver</code> 一样。</p><h3 id="慎用-docker-commit"><a href="#慎用-docker-commit" class="headerlink" title="慎用 docker commit"></a>慎用 <code>docker commit</code></h3><p>使用 <code>docker commit</code> 命令虽然可以比较直观的帮助理解镜像分层存储的概念，但是实际环境中并不会这样使用。</p><p>首先，如果仔细观察之前的 <code>docker diff webserver</code> 的结果，你会发现除了真正想要修改的 <code>/usr/share/nginx/html/index.html</code> 文件外，由于命令的执行，还有很多文件被改动或添加了。这还仅仅是最简单的操作，如果是安装软件包、编译构建，那会有大量的无关内容被添加进来，如果不小心清理，将会导致镜像极为臃肿。</p><p>此外，使用 <code>docker commit</code> 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为<strong>黑箱镜像</strong>，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间后也无法记清具体在操作的。虽然 <code>docker diff</code> 或许可以告诉得到一些线索，但是远远不到可以确保生成一致镜像的地步。这种黑箱镜像的维护工作是非常痛苦的。</p><p>而且，回顾之前提及的镜像所使用的分层存储的概念，除当前层外，之前的每一层都是不会发生改变的，换句话说，任何修改的结果仅仅是在当前层进行标记、添加、修改，而不会改动上一层。如果使用 <code>docker commit</code> 制作镜像，以及后期修改的话，每一次修改都会让镜像更加臃肿一次，所删除的上一层的东西并不会丢失，会一直如影随形的跟着这个镜像，即使根本无法访问到。这会让镜像更加臃肿。</p><h2 id="使用-Dockerfile-定制镜像"><a href="#使用-Dockerfile-定制镜像" class="headerlink" title="使用 Dockerfile 定制镜像"></a>使用 Dockerfile 定制镜像</h2><p>从刚才的 <code>docker commit</code> 的学习中，我们可以了解到，镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。</p><p>Dockerfile 是一个文本文件，其内包含了一条条的<strong>指令(Instruction)</strong>，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><p>还以之前定制 <code>nginx</code> 镜像为例，这次我们使用 Dockerfile 来定制。</p><p>在一个空白目录中，建立一个文本文件，并命名为 <code>Dockerfile</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Null@skyline ~]$ mkdir nginx-v3</span><br><span class="line">[Null@skyline ~]$ <span class="built_in">cd</span> nginx-v3/</span><br><span class="line">[Null@skyline nginx-v3]$ touch Dockerfile</span><br></pre></td></tr></table></figure><p>其内容为：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure><p>这个 Dockerfile 很简单，一共就两行。涉及到了两条指令，<code>FROM</code> 和 <code>RUN</code>。</p><h3 id="FROM-指定基础镜像"><a href="#FROM-指定基础镜像" class="headerlink" title="FROM 指定基础镜像"></a>FROM 指定基础镜像</h3><p>所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 <code>nginx</code> 镜像的容器，再进行修改一样，基础镜像是必须指定的。而 <code>FROM</code> 就是指定<strong>基础镜像</strong>，因此一个 <code>Dockerfile</code> 中 <code>FROM</code> 是必备的指令，并且必须是第一条指令。</p><p>在 Docker Hub 上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如 <code>nginx</code>、<code>redis</code>、<code>mongo</code>、<code>mysql</code>、<code>httpd</code>、<code>php</code>、<code>tomcat</code> 等；也有一些方便开发、构建、运行各种语言应用的镜像，如 <code>node</code>、<code>openjdk</code>、<code>python</code>、<code>ruby</code>、<code>golang</code> 等。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。</p><p>如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如 <code>ubuntu</code>、<code>debian</code>、<code>centos</code>、<code>fedora</code>、<code>alpine</code> 等，这些操作系统的软件库为我们提供了更广阔的扩展空间。</p><p>除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 <code>scratch</code>。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如果你以 <code>scratch</code> 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p><p>不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，比如 <code>swarm</code>、<code>coreos/etcd</code>。对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 <code>FROM scratch</code> 会让镜像体积更加小巧。使用 Go 语言 开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为 Go 是特别适合容器微服务架构的语言的原因之一。</p><h3 id="RUN-执行命令"><a href="#RUN-执行命令" class="headerlink" title="RUN 执行命令"></a>RUN 执行命令</h3><p><code>RUN</code> 指令是用来执行命令行命令的。由于命令行的强大能力，<code>RUN</code> 指令在定制镜像时是最常用的指令之一。其格式有两种：</p><ul><li><em>shell</em> 格式：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 <code>RUN</code> 指令就是这种格式。</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure><ul><li><em>exec</em> 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</li></ul><p>既然 <code>RUN</code> 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:stretch</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="bash">RUN apt-get install -y gcc libc6-dev make wget</span></span><br><span class="line"><span class="bash">RUN wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span></span></span><br><span class="line"><span class="bash">RUN mkdir -p /usr/src/redis</span></span><br><span class="line"><span class="bash">RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span></span><br><span class="line"><span class="bash">RUN make -C /usr/src/redis</span></span><br><span class="line"><span class="bash">RUN make -C /usr/src/redis install</span></span><br></pre></td></tr></table></figure><p>之前说过，Dockerfile 中每一个指令都会建立一层，<code>RUN</code> 也不例外。每一个 <code>RUN</code> 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，<code>commit</code> 这一层的修改，构成新的镜像。</p><p>而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。 这是很多初学 Docker 的人常犯的一个错误。</p><p><em>Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。</em></p><p>上面的 <code>Dockerfile</code> 正确的写法应该是这样：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:stretch</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> buildDeps=<span class="string">'gcc libc6-dev make wget'</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install -y <span class="variable">$buildDeps</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mkdir -p /usr/src/redis \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; make -C /usr/src/redis \</span></span><br><span class="line"><span class="bash">    &amp;&amp; make -C /usr/src/redis install \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/* \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm redis.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -r /usr/src/redis \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get purge -y --auto-remove <span class="variable">$buildDeps</span></span></span><br></pre></td></tr></table></figure><p>首先，之前所有的命令只有一个目的，就是编译、安装 redis 可执行文件。因此没有必要建立很多层，这只是一层的事情。因此，这里没有使用很多个 <code>RUN</code> 对一一对应不同的命令，而是仅仅使用一个 <code>RUN</code> 指令，并使用 <code>&amp;&amp;</code> 将各个所需命令串联起来。将之前的 7 层，简化为了 1 层。在撰写 Dockerfile 的时候，要经常提醒自己，这并不是在写 Shell 脚本，而是在定义每一层该如何构建。</p><p>并且，这里为了格式化还进行了换行。Dockerfile 支持 Shell 类的行尾添加 <code>\</code> 的命令换行方式，以及行首 <code>#</code> 进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。</p><p>此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 <code>apt</code> 缓存文件。这是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。</p><p>很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了每一层构建的最后一定要清理掉无关文件。</p><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>好了，让我们再回到之前定制的 nginx 镜像的 Dockerfile 来。现在我们明白了这个 Dockerfile 的内容，那么让我们来构建这个镜像吧。</p><p>在 <code>Dockerfile</code> 文件所在目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Null@skyline nginx-v3]$ docker build -t nginx:v3 .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/2 : FROM nginx</span><br><span class="line"> ---&gt; bb776ce48575</span><br><span class="line">Step 2/2 : RUN <span class="built_in">echo</span> <span class="string">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> a507cc636c47</span><br><span class="line">Removing intermediate container a507cc636c47</span><br><span class="line"> ---&gt; 209117ed7ac3</span><br><span class="line">Successfully built 209117ed7ac3</span><br><span class="line">Successfully tagged nginx:v3</span><br></pre></td></tr></table></figure><p>从命令的输出结果中，我们可以清晰的看到镜像的构建过程。在 <code>Step 2</code> 中，如同我们之前所说的那样，<code>RUN</code> 指令启动了一个容器 <code>a507cc636c47</code>，执行了所要求的命令，并最后提交了这一层 <code>209117ed7ac3</code>，随后删除了所用到的这个容器 <code>a507cc636c47</code>。</p><p>这里我们使用了 <code>docker build</code> 命令进行镜像构建。其格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build [选项] &lt;上下文路径/URL/-&gt;</span><br></pre></td></tr></table></figure><p>在这里我们指定了最终镜像的名称 <code>-t nginx:v3</code>，构建成功后，我们可以像之前运行 <code>nginx:v2</code> 那样来运行这个镜像，其结果会和 <code>nginx:v2</code> 一样。</p><h3 id="镜像构建上下文（Context）"><a href="#镜像构建上下文（Context）" class="headerlink" title="镜像构建上下文（Context）"></a>镜像构建上下文（Context）</h3><p>如果注意，会看到 <code>docker build</code> 命令最后有一个 <code>.</code>。<code>.</code> 表示当前目录，而 <code>Dockerfile</code> 就在当前目录，因此不少初学者以为这个路径是在指定 <code>Dockerfile</code> 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定<strong>上下文路径</strong>。那么什么是上下文呢？</p><p>首先我们要理解 <code>docker build</code> 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 Docker Remote API，而如 <code>docker</code> 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 <code>docker</code> 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。</p><p>当我们进行镜像构建的时候，并非所有定制都会通过 <code>RUN</code> 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 <code>COPY</code> 指令、<code>ADD</code> 指令等。而 <code>docker build</code> 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？</p><p>这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，<code>docker build</code> 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。</p><p>如果在 <code>Dockerfile</code> 中这么写：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> ./package.json /app/</span></span><br></pre></td></tr></table></figure><p>这并不是要复制执行 <code>docker build</code> 命令所在的目录下的 <code>package.json</code>，也不是复制 <code>Dockerfile</code> 所在目录下的 <code>package.json</code>，而是复制 <strong>上下文（context）</strong> 目录下的 <code>package.json</code>。</p><p>因此，<code>COPY</code> 这类指令中的源文件的路径都是<em>相对路径</em>。这也是初学者经常会问的为什么 <code>COPY ../package.json /app</code> 或者 <code>COPY /opt/xxxx /app</code> 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。</p><p>现在就可以理解刚才的命令 <code>docker build -t nginx:v3 .</code> 中的这个 <code>.</code>，实际上是在指定上下文的目录，<code>docker build</code> 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。</p><p>如果观察 <code>docker build</code> 输出，我们其实已经看到了这个发送上下文的过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Null@skyline nginx-v3]$ docker build -t nginx:v3 .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 <code>COPY /opt/xxxx /app</code> 不工作后，于是干脆将 <code>Dockerfile</code> 放到了硬盘根目录去构建，结果发现 <code>docker build</code>执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 <code>docker build</code> 打包整个硬盘，这显然是使用错误。</p><p>一般来说，应该会将 <code>Dockerfile</code> 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 <code>.gitignore</code> 一样的语法写一个 <code>.dockerignore</code>，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。</p><p>那么为什么会有人误以为 <code>.</code> 是指定 <code>Dockerfile</code> 所在目录呢？这是因为在默认情况下，如果不额外指定 <code>Dockerfile</code> 的话，会将上下文目录下的名为 <code>Dockerfile</code> 的文件作为 Dockerfile。</p><p>这只是默认行为，实际上 <code>Dockerfile</code> 的文件名并不要求必须为 <code>Dockerfile</code>，而且并不要求必须位于上下文目录中，比如可以用 <code>-f ../Dockerfile.php</code> 参数指定某个文件作为 <code>Dockerfile</code>。</p><p>当然，一般大家习惯性的会使用默认的文件名 <code>Dockerfile</code>，以及会将其置于镜像构建上下文目录中。</p><h3 id="其它-docker-build-的用法"><a href="#其它-docker-build-的用法" class="headerlink" title="其它 docker build 的用法"></a>其它 <code>docker build</code> 的用法</h3><h4 id="直接用-Git-repo-进行构建"><a href="#直接用-Git-repo-进行构建" class="headerlink" title="直接用 Git repo 进行构建"></a>直接用 Git repo 进行构建</h4><p>或许你已经注意到了，<code>docker build</code> 还支持从 URL 构建，比如可以直接从 Git repo 中构建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker build https://github.com/twang2218/gitlab-ce-zh.git<span class="comment">#:11.1</span></span><br><span class="line"></span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">Step 1 : FROM gitlab/gitlab-ce:11.1.0-ce.0</span><br><span class="line">11.1.0-ce.0: Pulling from gitlab/gitlab-ce</span><br><span class="line">aed15891ba52: Already exists</span><br><span class="line">773ae8583d14: Already exists</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这行命令指定了构建所需的 Git repo，并且指定默认的 <code>master</code> 分支，构建目录为 <code>/11.1/</code>，然后 Docker 就会自己去 <code>git clone</code> 这个项目、切换到指定分支、并进入到指定目录后开始构建。</p><h4 id="用给定的-tar-压缩包构建"><a href="#用给定的-tar-压缩包构建" class="headerlink" title="用给定的 tar 压缩包构建"></a>用给定的 tar 压缩包构建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build http://server/context.tar.gz</span><br></pre></td></tr></table></figure><p>如果所给出的 URL 不是个 Git repo，而是个 <code>tar</code> 压缩包，那么 Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。</p><h4 id="从标准输入中读取-Dockerfile-进行构建"><a href="#从标准输入中读取-Dockerfile-进行构建" class="headerlink" title="从标准输入中读取 Dockerfile 进行构建"></a>从标准输入中读取 Dockerfile 进行构建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build - &lt; Dockerfile</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat Dockerfile | docker build -</span><br></pre></td></tr></table></figure><p>如果标准输入传入的是文本文件，则将其视为 <code>Dockerfile</code>，并开始构建。这种形式由于直接从标准输入中读取 Dockerfile 的内容，它没有上下文，因此不可以像其他方法那样可以将本地文件 <code>COPY</code> 进镜像之类的事情。</p><h4 id="从标准输入中读取上下文压缩包进行构建"><a href="#从标准输入中读取上下文压缩包进行构建" class="headerlink" title="从标准输入中读取上下文压缩包进行构建"></a>从标准输入中读取上下文压缩包进行构建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build - &lt; context.tar.gz</span><br></pre></td></tr></table></figure><p>如果发现标准输入的文件格式是 <code>gzip</code>、<code>bzip2</code> 以及 <code>xz</code> 的话，将会使其为上下文压缩包，直接将其展开，将里面视为上下文，并开始构建。</p><h2 id="Dockerfile-指令详解"><a href="#Dockerfile-指令详解" class="headerlink" title="Dockerfile 指令详解"></a>Dockerfile 指令详解</h2><p>我们已经介绍了 <code>FROM</code>，<code>RUN</code>，还提及了 <code>COPY</code>, <code>ADD</code>，其实 <code>Dockerfile</code> 功能很强大，它提供了十多个指令。下面我们继续讲解其他的指令。</p><h3 id="COPY-复制文件"><a href="#COPY-复制文件" class="headerlink" title="COPY 复制文件"></a>COPY 复制文件</h3><p>格式：</p><ul><li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;</code></li><li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></li></ul><p>和 <code>RUN</code> 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。</p><p><code>COPY</code> 指令将从构建上下文目录中 <code>&lt;源路径&gt;</code> 的文件/目录复制到新的一层的镜像内的 <code>&lt;目标路径&gt;</code> 位置。比如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> package.json /usr/src/app/</span></span><br></pre></td></tr></table></figure><p><code>&lt;源路径&gt;</code> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 <a href="https://golang.org/pkg/path/filepath/#Match" target="_blank" rel="noopener"><code>filepath.Match</code></a> 规则，如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> hom* /mydir/</span></span><br><span class="line"><span class="bash">COPY hom?.txt /mydir/</span></span><br></pre></td></tr></table></figure><p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 <code>WORKDIR</code> 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p><p>此外，还需要注意一点，使用 <code>COPY</code> 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。</p><p>在使用该指令的时候还可以加上 <code>--chown=&lt;user&gt;:&lt;group&gt;</code> 选项来改变文件的所属用户及所属组。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> --chown=55:mygroup files* /mydir/</span></span><br><span class="line"><span class="bash">COPY --chown=bin files* /mydir/</span></span><br><span class="line"><span class="bash">COPY --chown=1 files* /mydir/</span></span><br><span class="line"><span class="bash">COPY --chown=10:11 files* /mydir/</span></span><br></pre></td></tr></table></figure><h3 id="ADD-更高级的复制文件"><a href="#ADD-更高级的复制文件" class="headerlink" title="ADD 更高级的复制文件"></a>ADD 更高级的复制文件</h3><p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致。但是在 <code>COPY</code> 基础上增加了一些功能。</p><p>比如 <code>&lt;源路径&gt;</code> 可以是一个 <code>URL</code>，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 <code>&lt;目标路径&gt;</code> 去。下载后的文件权限自动设置为 <code>600</code>，如果这并不是想要的权限，那么还需要增加额外的一层 <code>RUN</code>进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 <code>RUN</code> 指令进行解压缩。所以不如直接使用 <code>RUN</code> 指令，然后使用 <code>wget</code> 或者 <code>curl</code> 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。</p><p>如果 <code>&lt;源路径&gt;</code> 为一个 <code>tar</code> 压缩文件的话，压缩格式为 <code>gzip</code>, <code>bzip2</code> 以及 <code>xz</code> 的情况下，<code>ADD</code> 指令将会自动解压缩这个压缩文件到 <code>&lt;目标路径&gt;</code> 去。</p><p>在某些情况下，这个自动解压缩的功能非常有用，比如官方镜像 <code>ubuntu</code> 中：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /</span></span><br><span class="line"><span class="bash">...</span></span><br></pre></td></tr></table></figure><p>但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就不可以使用 <code>ADD</code> 命令了。</p><p>在 Docker 官方的 <a href="https://yeasy.gitbooks.io/docker_practice/content/appendix/best_practices.html" target="_blank" rel="noopener">Dockerfile 最佳实践文档</a> 中要求，尽可能的使用 <code>COPY</code>，因为 <code>COPY</code> 的语义很明确，就是复制文件而已，而 <code>ADD</code> 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 <code>ADD</code> 的场合，就是所提及的需要自动解压缩的场合。</p><p>另外需要注意的是，<code>ADD</code> 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。</p><p>因此在 <code>COPY</code> 和 <code>ADD</code> 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 <code>COPY</code> 指令，仅在需要自动解压缩的场合使用 <code>ADD</code>。</p><p>在使用该指令的时候还可以加上 <code>--chown=&lt;user&gt;:&lt;group&gt;</code> 选项来改变文件的所属用户及所属组。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> --chown=55:mygroup files* /mydir/</span></span><br><span class="line"><span class="bash">ADD --chown=bin files* /mydir/</span></span><br><span class="line"><span class="bash">ADD --chown=1 files* /mydir/</span></span><br><span class="line"><span class="bash">ADD --chown=10:11 files* /mydir/</span></span><br></pre></td></tr></table></figure><h3 id="CMD-容器启动命令"><a href="#CMD-容器启动命令" class="headerlink" title="CMD 容器启动命令"></a>CMD 容器启动命令</h3><p><code>CMD</code> 指令的格式和 <code>RUN</code> 相似，也是两种格式：</p><ul><li><code>shell</code> 格式：<code>CMD &lt;命令&gt;</code></li><li><code>exec</code> 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code></li><li>参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>。在指定了 <code>ENTRYPOINT</code> 指令后，用 <code>CMD</code> 指定具体的参数。</li></ul><p>之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。<code>CMD</code> 指令就是用于指定默认的容器主进程的启动命令的。</p><p>在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，<code>ubuntu</code> 镜像默认的 <code>CMD</code> 是 <code>/bin/bash</code>，如果我们直接 <code>docker run -it ubuntu</code> 的话，会直接进入 <code>bash</code>。我们也可以在运行时指定运行别的命令，如 <code>docker run -it ubuntu cat /etc/os-release</code>。这就是用 <code>cat /etc/os-release</code> 命令替换了默认的 <code>/bin/bash</code> 命令了，输出了系统版本信息。</p><p>在指令格式上，一般推荐使用 <code>exec</code> 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 <code>&quot;</code>，而不要使用单引号。</p><p>如果使用 <code>shell</code> 格式的话，实际的命令会被包装为 <code>sh -c</code> 的参数的形式进行执行。比如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$HOME</span></span></span><br></pre></td></tr></table></figure><p>在实际执行中，会将其变更为：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">"sh"</span>, <span class="string">"-c"</span>, <span class="string">"echo <span class="variable">$HOME</span>"</span> ]</span></span><br></pre></td></tr></table></figure><p>这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。</p><p>提到 <code>CMD</code> 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出现的一个混淆。</p><p>Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 upstart/systemd 去启动后台服务，容器内没有后台服务的概念。</p><p>一些初学者将 <code>CMD</code> 写为：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> service nginx start</span></span><br></pre></td></tr></table></figure><p>然后发现容器执行后就立即退出了。甚至在容器内去使用 <code>systemctl</code> 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。</p><p>对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。</p><p>而使用 <code>service nginx start</code> 命令，则是希望 upstart 来以后台守护进程形式启动 <code>nginx</code> 服务。而刚才说了 <code>CMD service nginx start</code> 会被理解为 <code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;service nginx start&quot;]</code>，因此主进程实际上是 <code>sh</code>。那么当 <code>service nginx start</code> 命令结束后，<code>sh</code> 也就结束了，<code>sh</code> 作为主进程退出了，自然就会令容器退出。</p><p>正确的做法是直接执行 <code>nginx</code> 可执行文件，并且要求以前台形式运行。比如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span>]</span></span><br></pre></td></tr></table></figure><h3 id="ENTRYPOINT-入口点"><a href="#ENTRYPOINT-入口点" class="headerlink" title="ENTRYPOINT 入口点"></a>ENTRYPOINT 入口点</h3><p><code>ENTRYPOINT</code> 的格式和 <code>RUN</code> 指令格式一样，分为 <code>exec</code> 格式和 <code>shell</code> 格式。</p><p><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code> 在运行时也可以替代，不过比 <code>CMD</code> 要略显繁琐，需要通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定。</p><p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令，换句话说实际执行时，将变为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ENTRYPOINT&gt; <span class="string">"&lt;CMD&gt;"</span></span><br></pre></td></tr></table></figure><p>那么有了 <code>CMD</code> 后，为什么还要有 <code>ENTRYPOINT</code> 呢？这种 <code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code> 有什么好处么？让我们来看几个场景。</p><h4 id="场景一：让镜像变成像命令一样使用"><a href="#场景一：让镜像变成像命令一样使用" class="headerlink" title="场景一：让镜像变成像命令一样使用"></a>场景一：让镜像变成像命令一样使用</h4><p>假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 <code>CMD</code> 来实现：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">"curl"</span>, <span class="string">"-s"</span>, <span class="string">"https://pv.sohu.com/cityjson"</span> ]</span></span><br></pre></td></tr></table></figure><p>假如我们使用 <code>docker build -t myip .</code> 来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Null@skyline docker]$ docker run myip</span><br><span class="line">var returnCitySN = &#123;<span class="string">"cip"</span>: <span class="string">"120.229.5.147"</span>, <span class="string">"cid"</span>: <span class="string">"CN"</span>, <span class="string">"cname"</span>: <span class="string">"CHINA"</span>&#125;;</span><br></pre></td></tr></table></figure><p>嗯，这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我们希望加参数呢？比如从上面的 <code>CMD</code> 中可以看到实质的命令是 <code>curl</code>，那么如果我们希望显示 HTTP 头信息，就需要加上 <code>-i</code> 参数。那么我们可以直接加 <code>-i</code> 参数给 <code>docker run myip</code> 么？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Null@skyline docker]$ docker run myip -i</span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:345: starting container process caused <span class="string">"exec: \"-i\": executable file not found in <span class="variable">$PATH</span>"</span>: unknown.</span><br></pre></td></tr></table></figure><p>我们可以看到可执行文件找不到的报错，<code>executable file not found</code>。之前我们说过，跟在镜像名后面的是 <code>command</code>，运行时会替换 <code>CMD</code> 的默认值。因此这里的 <code>-i</code> 替换了原来的 <code>CMD</code>，而不是添加在原来的 <code>curl -s https://ip.cn</code> 后面。而 <code>-i</code> 根本不是命令，所以自然找不到。</p><p>那么如果我们希望加入 <code>-i</code> 这参数，我们就必须重新完整的输入这个命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run myip curl -s https://pv.sohu.com/cityjson -i</span><br></pre></td></tr></table></figure><p>这显然不是很好的解决方案，而使用 <code>ENTRYPOINT</code> 就可以解决这个问题。现在我们重新用 <code>ENTRYPOINT</code> 来实现这个镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">ENTRYPOINT [ <span class="string">"curl"</span>, <span class="string">"-s"</span>, <span class="string">"https://pv.sohu.com/cityjson"</span> ]</span><br></pre></td></tr></table></figure><p>这次我们再来尝试直接使用 <code>docker run myip -i</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ docker run myip</span><br><span class="line">var returnCitySN = &#123;<span class="string">"cip"</span>: <span class="string">"120.229.5.147"</span>, <span class="string">"cid"</span>: <span class="string">"CN"</span>, <span class="string">"cname"</span>: <span class="string">"CHINA"</span>&#125;;</span><br><span class="line"></span><br><span class="line">$ docker run myip -i</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/json; charset=gbk</span><br><span class="line">Content-Length: 75</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Server: nginx/1.0.15</span><br><span class="line">Date: Sun, 21 Apr 2019 08:26:27 GMT</span><br><span class="line">FSS-Proxy: Powered by 3420734.4862536.4739156</span><br><span class="line"></span><br><span class="line">var returnCitySN = &#123;<span class="string">"cip"</span>: <span class="string">"120.229.5.147"</span>, <span class="string">"cid"</span>: <span class="string">"CN"</span>, <span class="string">"cname"</span>: <span class="string">"CHINA"</span>&#125;;</span><br></pre></td></tr></table></figure><p>可以看到，这次成功了。这是因为当存在 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的内容将会作为参数传给 <code>ENTRYPOINT</code>，而这里 <code>-i</code> 就是新的 <code>CMD</code>，因此会作为参数传给 <code>curl</code>，从而达到了我们预期的效果。</p><h4 id="场景二：应用运行前的准备工作"><a href="#场景二：应用运行前的准备工作" class="headerlink" title="场景二：应用运行前的准备工作"></a>场景二：应用运行前的准备工作</h4><p>启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。</p><p>比如 <code>mysql</code> 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。</p><p>此外，可能希望避免使用 <code>root</code> 用户去启动服务，从而提高安全性，而在启动服务前还需要以 <code>root</code> 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。或者除了服务外，其它命令依旧可以使用 <code>root</code> 身份执行，方便调试等。</p><p>这些准备工作是和容器 <code>CMD</code> 无关的，无论 <code>CMD</code> 为什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 <code>ENTRYPOINT</code> 中去执行，而这个脚本会将接到的参数（也就是 <code>&lt;CMD&gt;</code>）作为命令，在脚本最后执行。比如官方镜像 <code>redis</code> 中就是这么做的：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.4</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> addgroup -S redis &amp;&amp; adduser -S -G redis redis</span></span><br><span class="line"><span class="bash">...</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"docker-entrypoint.sh"</span>]</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">EXPOSE 6379</span></span><br><span class="line"><span class="bash">CMD [ <span class="string">"redis-server"</span> ]</span></span><br></pre></td></tr></table></figure><p>可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 <code>ENTRYPOINT</code> 为 <code>docker-entrypoint.sh</code>脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># allow the container to be started with `--user`</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">'redis-server'</span> -a <span class="string">"<span class="variable">$(id -u)</span>"</span> = <span class="string">'0'</span> ]; <span class="keyword">then</span></span><br><span class="line">    chown -R redis .</span><br><span class="line">    <span class="built_in">exec</span> su-exec redis <span class="string">"<span class="variable">$0</span>"</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure><p>该脚本的内容就是根据 <code>CMD</code> 的内容来判断，如果是 <code>redis-server</code> 的话，则切换到 <code>redis</code> 用户身份启动服务器，否则依旧使用 <code>root</code> 身份执行。比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it redis id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure><h3 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV 设置环境变量"></a>ENV 设置环境变量</h3><p>格式有两种：</p><ul><li><code>ENV &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li></ul><p>这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 <code>RUN</code>，还是运行时的应用，都可以直接使用这里定义的环境变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV VERSION=1.0 DEBUG=on \</span><br><span class="line">    NAME=&quot;Happy Feet&quot;</span><br></pre></td></tr></table></figure><p>这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。</p><p>定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 <code>node</code> 镜像 <code>Dockerfile</code>中，就有类似这样的代码：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> NODE_VERSION <span class="number">7.2</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -SLO <span class="string">"https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz"</span> \</span></span><br><span class="line"><span class="bash">  &amp;&amp; curl -SLO <span class="string">"https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/SHASUMS256.txt.asc"</span> \</span></span><br><span class="line"><span class="bash">  &amp;&amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \</span></span><br><span class="line"><span class="bash">  &amp;&amp; grep <span class="string">" node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz\$"</span> SHASUMS256.txt | sha256sum -c - \</span></span><br><span class="line"><span class="bash">  &amp;&amp; tar -xJf <span class="string">"node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz"</span> -C /usr/<span class="built_in">local</span> --strip-components=1 \</span></span><br><span class="line"><span class="bash">  &amp;&amp; rm <span class="string">"node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz"</span> SHASUMS256.txt.asc SHASUMS256.txt \</span></span><br><span class="line"><span class="bash">  &amp;&amp; ln -s /usr/<span class="built_in">local</span>/bin/node /usr/<span class="built_in">local</span>/bin/nodejs</span></span><br></pre></td></tr></table></figure><p>在这里先定义了环境变量 <code>NODE_VERSION</code>，其后的 <code>RUN</code> 这层里，多次使用 <code>$NODE_VERSION</code> 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 <code>7.2.0</code> 即可，<code>Dockerfile</code> 构建维护变得更轻松了。</p><p>下列指令可以支持环境变量展开： <code>ADD</code>、<code>COPY</code>、<code>ENV</code>、<code>EXPOSE</code>、<code>LABEL</code>、<code>USER</code>、<code>WORKDIR</code>、<code>VOLUME</code>、<code>STOPSIGNAL</code>、<code>ONBUILD</code>。</p><p>可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 <code>Dockerfile</code> 制作更多的镜像，只需使用不同的环境变量即可。</p><h3 id="ARG-构建参数"><a href="#ARG-构建参数" class="headerlink" title="ARG 构建参数"></a>ARG 构建参数</h3><p>格式：<code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></p><p>构建参数和 <code>ENV</code> 的效果一样，都是设置环境变量。所不同的是，<code>ARG</code> 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 <code>ARG</code> 保存密码之类的信息，因为 <code>docker history</code> 还是可以看到所有值的。</p><p><code>Dockerfile</code> 中的 <code>ARG</code> 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p><p>在 1.13 之前的版本，要求 <code>--build-arg</code> 中的参数名，必须在 <code>Dockerfile</code> 中用 <code>ARG</code> 定义过了，换句话说，就是 <code>--build-arg</code> 指定的参数，必须在 <code>Dockerfile</code> 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 <code>Dockerfile</code> 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。</p><h3 id="VOLUME-定义匿名卷"><a href="#VOLUME-定义匿名卷" class="headerlink" title="VOLUME 定义匿名卷"></a>VOLUME 定义匿名卷</h3><p>格式为：</p><ul><li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></li><li><code>VOLUME &lt;路径&gt;</code></li></ul><p>之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 <code>Dockerfile</code> 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /data</span></span><br></pre></td></tr></table></figure><p>这里的 <code>/data</code> 目录就会在运行时自动挂载为匿名卷，任何向 <code>/data</code> 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v mydata:/data xxxx</span><br></pre></td></tr></table></figure><p>在这行命令中，就使用了 <code>mydata</code> 这个命名卷挂载到了 <code>/data</code> 这个位置，替代了 <code>Dockerfile</code> 中定义的匿名卷的挂载配置。</p><p>匿名卷一般保存在<code>/var/lib/docker/volumes</code>路径下。</p><h3 id="EXPOSE-声明端口"><a href="#EXPOSE-声明端口" class="headerlink" title="EXPOSE 声明端口"></a>EXPOSE 声明端口</h3><p>格式为 <code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code>。</p><p><code>EXPOSE</code> 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code>时，会自动随机映射 <code>EXPOSE</code> 的端口。</p><p>要将 <code>EXPOSE</code> 和在运行时使用 <code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code> 区分开来。<code>-p</code>，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 <code>EXPOSE</code> 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p><h3 id="WORKDIR-指定工作目录"><a href="#WORKDIR-指定工作目录" class="headerlink" title="WORKDIR 指定工作目录"></a>WORKDIR 指定工作目录</h3><p>格式为 <code>WORKDIR &lt;工作目录路径&gt;</code>。</p><p>使用 <code>WORKDIR</code> 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录。</p><p>之前提到一些初学者常犯的错误是把 <code>Dockerfile</code> 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /app</span></span><br><span class="line"><span class="bash">RUN <span class="built_in">echo</span> <span class="string">"hello"</span> &gt; world.txt</span></span><br></pre></td></tr></table></figure><p>如果将这个 <code>Dockerfile</code> 进行构建镜像运行后，会发现找不到 <code>/app/world.txt</code> 文件，或者其内容不是 <code>hello</code>。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 <code>Dockerfile</code> 中，这两行 <code>RUN</code> 命令的执行环境根本不同，是两个完全不同的容器。这就是对 <code>Dockerfile</code> 构建分层存储的概念不了解所导致的错误。</p><p>之前说过每一个 <code>RUN</code> 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 <code>RUN cd /app</code> 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。</p><p>因此如果需要改变以后各层的工作目录的位置，那么应该使用 <code>WORKDIR</code> 指令。</p><h3 id="USER-指定当前用户"><a href="#USER-指定当前用户" class="headerlink" title="USER 指定当前用户"></a>USER 指定当前用户</h3><p>格式：<code>USER &lt;用户名&gt;[:&lt;用户组&gt;]</code></p><p><code>USER</code> 指令和 <code>WORKDIR</code> 相似，都是改变环境状态并影响以后的层。<code>WORKDIR</code> 是改变工作目录，<code>USER</code> 则是改变之后层的执行 <code>RUN</code>, <code>CMD</code> 以及 <code>ENTRYPOINT</code> 这类命令的身份。</p><p>当然，和 <code>WORKDIR</code> 一样，<code>USER</code> 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> groupadd -r redis &amp;&amp; useradd -r -g redis redis</span></span><br><span class="line"><span class="bash">USER redis</span></span><br><span class="line"><span class="bash">RUN [ <span class="string">"redis-server"</span> ]</span></span><br></pre></td></tr></table></figure><p>如果以 <code>root</code> 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 <code>su</code> 或者 <code>sudo</code>，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 <a href="https://github.com/tianon/gosu" target="_blank" rel="noopener"><code>gosu</code></a>。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立 redis 用户，并使用 gosu 换另一个用户执行命令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> groupadd -r redis &amp;&amp; useradd -r -g redis redis</span></span><br><span class="line"><span class="bash"><span class="comment"># 下载 gosu</span></span></span><br><span class="line"><span class="bash">RUN wget -O /usr/<span class="built_in">local</span>/bin/gosu <span class="string">"https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64"</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod +x /usr/<span class="built_in">local</span>/bin/gosu \</span></span><br><span class="line"><span class="bash">    &amp;&amp; gosu nobody <span class="literal">true</span></span></span><br><span class="line"><span class="bash"><span class="comment"># 设置 CMD，并以另外的用户执行</span></span></span><br><span class="line"><span class="bash">CMD [ <span class="string">"exec"</span>, <span class="string">"gosu"</span>, <span class="string">"redis"</span>, <span class="string">"redis-server"</span> ]</span></span><br></pre></td></tr></table></figure><h3 id="HEALTHCHECK-健康检查"><a href="#HEALTHCHECK-健康检查" class="headerlink" title="HEALTHCHECK 健康检查"></a>HEALTHCHECK 健康检查</h3><p>格式：</p><ul><li><code>HEALTHCHECK [选项] CMD &lt;命令&gt;</code>：设置检查容器健康状况的命令</li><li><code>HEALTHCHECK NONE</code>：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</li></ul><p><code>HEALTHCHECK</code> 指令是告诉 Docker 应该如何进行判断容器的状态是否正常，这是 Docker 1.12 引入的新指令。</p><p>在没有 <code>HEALTHCHECK</code> 指令前，Docker 引擎只可以通过容器内主进程是否退出来判断容器是否状态异常。很多情况下这没问题，但是如果程序进入死锁状态，或者死循环状态，应用进程并不退出，但是该容器已经无法提供服务了。在 1.12 以前，Docker 不会检测到容器的这种状态，从而不会重新调度，导致可能会有部分容器已经无法提供服务了却还在接受用户请求。</p><p>而自 1.12 之后，Docker 提供了 <code>HEALTHCHECK</code> 指令，通过该指令指定一行命令，用这行命令来判断容器主进程的服务状态是否还正常，从而比较真实的反应容器实际状态。</p><p>当在一个镜像指定了 <code>HEALTHCHECK</code> 指令后，用其启动容器，初始状态会为 <code>starting</code>，在 <code>HEALTHCHECK</code> 指令检查成功后变为 <code>healthy</code>，如果连续一定次数失败，则会变为 <code>unhealthy</code>。</p><p><code>HEALTHCHECK</code> 支持下列选项：</p><ul><li><code>--interval=&lt;间隔&gt;</code>：两次健康检查的间隔，默认为 30 秒；</li><li><code>--timeout=&lt;时长&gt;</code>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；</li><li><code>--retries=&lt;次数&gt;</code>：当连续失败指定次数后，则将容器状态视为 <code>unhealthy</code>，默认 3 次。</li></ul><p>和 <code>CMD</code>, <code>ENTRYPOINT</code> 一样，<code>HEALTHCHECK</code> 只可以出现一次，如果写了多个，只有最后一个生效。</p><p>在 <code>HEALTHCHECK [选项] CMD</code> 后面的命令，格式和 <code>ENTRYPOINT</code> 一样，分为 <code>shell</code> 格式，和 <code>exec</code> 格式。命令的返回值决定了该次健康检查的成功与否：<code>0</code>：成功；<code>1</code>：失败；<code>2</code>：保留，不要使用这个值。</p><p>假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 <code>curl</code> 来帮助判断，其 <code>Dockerfile</code> 的 <code>HEALTHCHECK</code> 可以这么写：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"><span class="bash">HEALTHCHECK --interval=5s --timeout=3s \</span></span><br><span class="line"><span class="bash">  CMD curl -fs http://localhost/ || <span class="built_in">exit</span> 1</span></span><br></pre></td></tr></table></figure><p>这里我们设置了每 5 秒检查一次（这里为了试验所以间隔非常短，实际应该相对较长），如果健康检查命令超过 3 秒没响应就视为失败，并且使用 <code>curl -fs http://localhost/ || exit 1</code> 作为健康检查命令。</p><p>使用 <code>docker build</code> 来构建这个镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t myweb:v1 .</span><br></pre></td></tr></table></figure><p>构建好了后，我们启动一个容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name web -p 80:80 myweb:v1</span><br></pre></td></tr></table></figure><p>当运行该镜像后，可以通过 <code>docker container ls</code> 看到最初的状态为 <code>(health: starting)</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID   IMAGE      COMMAND                  CREATED         STATUS                            PORTS             NAMES</span><br><span class="line">03e28eb00bd0   myweb:v1   <span class="string">"nginx -g 'daemon off"</span>   3 seconds ago   Up 2 seconds (health: starting)   80/tcp, 443/tcp   web</span><br></pre></td></tr></table></figure><p>在等待几秒钟后，再次 <code>docker container ls</code>，就会看到健康状态变化为了 <code>(healthy)</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED          STATUS                    PORTS             NAMES</span><br><span class="line">03e28eb00bd0   myweb:v1    <span class="string">"nginx -g 'daemon off"</span>   18 seconds ago   Up 16 seconds (healthy)   80/tcp, 443/tcp   web</span><br></pre></td></tr></table></figure><p>如果健康检查连续失败超过了重试次数，状态就会变为 <code>(unhealthy)</code>。</p><p>为了帮助排障，健康检查命令的输出（包括 <code>stdout</code> 以及 <code>stderr</code>）都会被存储于健康状态里，可以用 <code>docker inspect</code> 来查看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect --format <span class="string">'&#123;&#123;json .State.Health&#125;&#125;'</span> web | python -m json.tool</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"FailingStreak"</span>: 0,</span><br><span class="line">    <span class="string">"Log"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"End"</span>: <span class="string">"2016-11-25T14:35:37.940957051Z"</span>,</span><br><span class="line">            <span class="string">"ExitCode"</span>: 0,</span><br><span class="line">            <span class="string">"Output"</span>: <span class="string">"&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Welcome to nginx!&lt;/title&gt;\n&lt;style&gt;\n    body &#123;\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    &#125;\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;\n&lt;p&gt;If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.&lt;/p&gt;\n\n&lt;p&gt;For online documentation and support please refer to\n&lt;a href=\"http://nginx.org/\"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;\nCommercial support is available at\n&lt;a href=\"http://nginx.com/\"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n"</span>,</span><br><span class="line">            <span class="string">"Start"</span>: <span class="string">"2016-11-25T14:35:37.780192565Z"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"Status"</span>: <span class="string">"healthy"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ONBUILD-为他人做嫁衣裳"><a href="#ONBUILD-为他人做嫁衣裳" class="headerlink" title="ONBUILD 为他人做嫁衣裳"></a>ONBUILD 为他人做嫁衣裳</h3><p>格式：<code>ONBUILD &lt;其它指令&gt;</code>。</p><p><code>ONBUILD</code> 是一个特殊的指令，它后面跟的是其它指令，比如 <code>RUN</code>, <code>COPY</code> 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</p><p><code>Dockerfile</code> 中的其它指令都是为了定制当前镜像而准备的，唯有 <code>ONBUILD</code> 是为了帮助别人定制自己而准备的。</p><p>假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 <code>npm</code> 进行包管理，所有依赖、配置、启动信息等会放到 <code>package.json</code> 文件里。在拿到程序代码后，需要先进行 <code>npm install</code> 才可以获得所有需要的依赖。然后就可以通过 <code>npm start</code> 来启动应用。因此，一般来说会这样写 <code>Dockerfile</code>：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:slim</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /app</span></span><br><span class="line"><span class="bash">WORKDIR /app</span></span><br><span class="line"><span class="bash">COPY ./package.json /app</span></span><br><span class="line"><span class="bash">RUN [ <span class="string">"npm"</span>, <span class="string">"install"</span> ]</span></span><br><span class="line"><span class="bash">COPY . /app/</span></span><br><span class="line"><span class="bash">CMD [ <span class="string">"npm"</span>, <span class="string">"start"</span> ]</span></span><br></pre></td></tr></table></figure><p>把这个 <code>Dockerfile</code> 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 <code>Dockerfile</code> 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。</p><p>如果第一个 Node.js 项目在开发过程中，发现这个 <code>Dockerfile</code> 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 <code>Dockerfile</code>，再次构建，问题解决。第一个项目没问题了，但是第二个项目呢？虽然最初 <code>Dockerfile</code> 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 <code>Dockerfile</code>，而第二个项目的 <code>Dockerfile</code> 就会被自动修复。</p><p>那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 <code>Dockerfile</code> 的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 <code>Dockerfile</code> 就会变为：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:slim</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /app</span></span><br><span class="line"><span class="bash">WORKDIR /app</span></span><br><span class="line"><span class="bash">CMD [ <span class="string">"npm"</span>, <span class="string">"start"</span> ]</span></span><br></pre></td></tr></table></figure><p>这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 <code>my-node</code> 的话，各个项目内的自己的 <code>Dockerfile</code> 就变为：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> my-node</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./package.json /app</span></span><br><span class="line"><span class="bash">RUN [ <span class="string">"npm"</span>, <span class="string">"install"</span> ]</span></span><br><span class="line"><span class="bash">COPY . /app/</span></span><br></pre></td></tr></table></figure><p>基础镜像变化后，各个项目都用这个 <code>Dockerfile</code> 重新构建镜像，会继承基础镜像的更新。</p><p>那么，问题解决了么？没有。准确说，只解决了一半。如果这个 <code>Dockerfile</code> 里面有些东西需要调整呢？比如 <code>npm install</code> 都需要加一些参数，那怎么办？这一行 <code>RUN</code> 是不可能放入基础镜像的，因为涉及到了当前项目的 <code>./package.json</code>，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 <code>Dockerfile</code> 的前4条指令的变化问题，而后面三条指令的变化则完全没办法处理。</p><p><code>ONBUILD</code> 可以解决这个问题。让我们用 <code>ONBUILD</code> 重新写一下基础镜像的 <code>Dockerfile</code>:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:slim</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /app</span></span><br><span class="line"><span class="bash">WORKDIR /app</span></span><br><span class="line"><span class="bash">ONBUILD COPY ./package.json /app</span></span><br><span class="line"><span class="bash">ONBUILD RUN [ <span class="string">"npm"</span>, <span class="string">"install"</span> ]</span></span><br><span class="line"><span class="bash">ONBUILD COPY . /app/</span></span><br><span class="line"><span class="bash">CMD [ <span class="string">"npm"</span>, <span class="string">"start"</span> ]</span></span><br></pre></td></tr></table></figure><p>这次我们回到原始的 <code>Dockerfile</code>，但是这次将项目相关的指令加上 <code>ONBUILD</code>，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 <code>Dockerfile</code> 就变成了简单地：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> my-node</span><br></pre></td></tr></table></figure><p>是的，只有这么一行。当在各个项目目录中，用这个只有一行的 <code>Dockerfile</code> 构建镜像时，之前基础镜像的那三行 <code>ONBUILD</code> 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 <code>npm install</code>，生成应用镜像。</p><h2 id="Dockerfile-多阶段构建"><a href="#Dockerfile-多阶段构建" class="headerlink" title="Dockerfile 多阶段构建"></a>Dockerfile 多阶段构建</h2><h3 id="之前的做法"><a href="#之前的做法" class="headerlink" title="之前的做法"></a>之前的做法</h3><p>在 Docker 17.05 版本之前，我们构建 Docker 镜像时，通常会采用两种方式：</p><h4 id="全部放入一个-Dockerfile"><a href="#全部放入一个-Dockerfile" class="headerlink" title="全部放入一个 Dockerfile"></a>全部放入一个 Dockerfile</h4><p>一种方式是将所有的构建过程编包含在一个 <code>Dockerfile</code> 中，包括项目及其依赖库的编译、测试、打包等流程，这里可能会带来的一些问题：</p><ul><li>镜像层次多，镜像体积较大，部署时间变长</li><li>源代码存在泄露的风险</li></ul><p>例如，编写 <code>app.go</code> 文件，该程序输出 <code>Hello World!</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span>  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    fmt.Printf(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写 <code>Dockerfile.one</code> 文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.9</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk --no-cache add git ca-certificates</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">WORKDIR /go/src/github.com/go/helloworld/</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY app.go .</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN go get -d -v github.com/go-sql-driver/mysql \</span></span><br><span class="line"><span class="bash">  &amp;&amp; CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app . \</span></span><br><span class="line"><span class="bash">  &amp;&amp; cp /go/src/github.com/go/helloworld/app /root</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">WORKDIR /root/</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">CMD [<span class="string">"./app"</span>]</span></span><br></pre></td></tr></table></figure><p>构建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t go/helloworld:1 -f Dockerfile.one .</span><br></pre></td></tr></table></figure><h4 id="分散到多个-Dockerfile"><a href="#分散到多个-Dockerfile" class="headerlink" title="分散到多个 Dockerfile"></a>分散到多个 Dockerfile</h4><p>另一种方式，就是我们事先在一个 <code>Dockerfile</code> 将项目及其依赖库编译测试打包好后，再将其拷贝到运行环境中，这种方式需要我们编写两个 <code>Dockerfile</code> 和一些编译脚本才能将其两个阶段自动整合起来，这种方式虽然可以很好地规避第一种方式存在的风险，但明显部署过程较复杂。</p><p>例如，编写 <code>Dockerfile.build</code> 文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.9</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk --no-cache add git</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">WORKDIR /go/src/github.com/go/helloworld</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY app.go .</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN go get -d -v github.com/go-sql-driver/mysql \</span></span><br><span class="line"><span class="bash">  &amp;&amp; CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .</span></span><br></pre></td></tr></table></figure><p>编写 <code>Dockerfile.copy</code> 文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk --no-cache add ca-certificates</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">WORKDIR /root/</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY app .</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">CMD [<span class="string">"./app"</span>]</span></span><br></pre></td></tr></table></figure><p>新建 <code>build.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> Building go/helloworld:build</span><br><span class="line"></span><br><span class="line">docker build -t go/helloworld:build . -f Dockerfile.build</span><br><span class="line"></span><br><span class="line">docker create --name extract go/helloworld:build</span><br><span class="line">docker cp extract:/go/src/github.com/go/helloworld/app ./app</span><br><span class="line">docker rm -f extract</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Building go/helloworld:2</span><br><span class="line"></span><br><span class="line">docker build --no-cache -t go/helloworld:2 . -f Dockerfile.copy</span><br><span class="line">rm ./app</span><br></pre></td></tr></table></figure><p>现在运行脚本即可构建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x build.sh</span><br><span class="line"></span><br><span class="line">$ ./build.sh</span><br></pre></td></tr></table></figure><p>对比两种方式生成的镜像大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line"></span><br><span class="line">REPOSITORY      TAG    IMAGE ID        CREATED         SIZE</span><br><span class="line">go/helloworld   2      f7cf3465432c    22 seconds ago  6.47MB</span><br><span class="line">go/helloworld   1      f55d3e16affc    2 minutes ago   295MB</span><br></pre></td></tr></table></figure><h3 id="使用多阶段构建"><a href="#使用多阶段构建" class="headerlink" title="使用多阶段构建"></a>使用多阶段构建</h3><p>为解决以上问题，Docker v17.05 开始支持多阶段构建 (<code>multistage builds</code>)。使用多阶段构建我们就可以很容易解决前面提到的问题，并且只需要编写一个 <code>Dockerfile</code>：</p><p>例如，编写 <code>Dockerfile</code> 文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.9</span>-alpine as builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk --no-cache add git</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">WORKDIR /go/src/github.com/go/helloworld/</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN go get -d -v github.com/go-sql-driver/mysql</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY app.go .</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">FROM alpine:latest as prod</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN apk --no-cache add ca-certificates</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">WORKDIR /root/</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY --from=0 /go/src/github.com/go/helloworld/app .</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">CMD [<span class="string">"./app"</span>]</span></span><br></pre></td></tr></table></figure><p>构建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t go/helloworld:3 .</span><br></pre></td></tr></table></figure><p>对比三个镜像大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line"></span><br><span class="line">REPOSITORY        TAG   IMAGE ID         CREATED            SIZE</span><br><span class="line">go/helloworld     3     d6911ed9c846     7 seconds ago      6.47MB</span><br><span class="line">go/helloworld     2     f7cf3465432c     22 seconds ago     6.47MB</span><br><span class="line">go/helloworld     1     f55d3e16affc     2 minutes ago      295MB</span><br></pre></td></tr></table></figure><p>很明显使用多阶段构建的镜像体积小，同时也完美解决了上边提到的问题。</p><h4 id="只构建某一阶段的镜像"><a href="#只构建某一阶段的镜像" class="headerlink" title="只构建某一阶段的镜像"></a>只构建某一阶段的镜像</h4><p>我们可以使用 <code>as</code> 来为某一阶段命名，例如</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.9</span>-alpine as builder</span><br></pre></td></tr></table></figure><p>例如当我们只想构建 <code>builder</code> 阶段的镜像时，增加 <code>--target=builder</code> 参数即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build --target builder -t username/imagename:tag .</span><br></pre></td></tr></table></figure><h4 id="构建时从其他镜像复制文件"><a href="#构建时从其他镜像复制文件" class="headerlink" title="构建时从其他镜像复制文件"></a>构建时从其他镜像复制文件</h4><p>上面例子中我们使用 <code>COPY --from=0 /go/src/github.com/go/helloworld/app .</code> 从上一阶段的镜像中复制文件，我们也可以复制任意镜像中的文件。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">COPY</span><span class="bash"> --from=nginx:latest /etc/nginx/nginx.conf /nginx.conf</span></span><br></pre></td></tr></table></figure><h2 id="其它制作镜像的方式"><a href="#其它制作镜像的方式" class="headerlink" title="其它制作镜像的方式"></a>其它制作镜像的方式</h2><p>除了标准的使用 <code>Dockerfile</code> 生成镜像的方法外，由于各种特殊需求和历史原因，还提供了一些其它方法用以生成镜像。</p><h3 id="从-rootfs-压缩包导入"><a href="#从-rootfs-压缩包导入" class="headerlink" title="从 rootfs 压缩包导入"></a>从 rootfs 压缩包导入</h3><p>格式：<code>docker import [选项] &lt;文件&gt;|&lt;URL&gt;|- [&lt;仓库名&gt;[:&lt;标签&gt;]]</code></p><p>压缩包可以是本地文件、远程 Web 文件，甚至是从标准输入中得到。压缩包将会在镜像 <code>/</code> 目录展开，并直接作为镜像第一层提交。</p><p>比如我们想要创建一个 OpenVZ 的 Ubuntu 14.04 模板的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker import \</span><br><span class="line">    http://download.openvz.org/template/precreated/ubuntu-14.04-x86_64-minimal.tar.gz \</span><br><span class="line">    openvz/ubuntu:14.04</span><br><span class="line">Downloading from http://download.openvz.org/template/precreated/ubuntu-14.04-x86_64-minimal.tar.gz</span><br><span class="line">sha256:f477a6e18e989839d25223f301ef738b69621c4877600ae6467c4e5289822a79B/78.42 MB</span><br></pre></td></tr></table></figure><p>这条命令自动下载了 <code>ubuntu-14.04-x86_64-minimal.tar.gz</code> 文件，并且作为根文件系统展开导入，并保存为镜像 <code>openvz/ubuntu:14.04</code>。</p><p>导入成功后，我们可以用 <code>docker image ls</code> 看到这个导入的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls openvz/ubuntu</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">openvz/ubuntu       14.04               f477a6e18e98        55 seconds ago      214.9 MB</span><br></pre></td></tr></table></figure><p>如果我们查看其历史的话，会看到描述中有导入的文件链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">history</span> openvz/ubuntu:14.04</span><br><span class="line">IMAGE               CREATED              CREATED BY          SIZE                COMMENT</span><br><span class="line">f477a6e18e98        About a minute ago                       214.9 MB            Imported from http://download.openvz.org/template/precreated/ubuntu-14.04-x86_64-minimal.tar.gz</span><br></pre></td></tr></table></figure><h3 id="docker-save-和-docker-load"><a href="#docker-save-和-docker-load" class="headerlink" title="docker save 和 docker load"></a><code>docker save</code> 和 <code>docker load</code></h3><p>Docker 还提供了 <code>docker save</code> 和 <code>docker load</code> 命令，用以将镜像保存为一个文件，然后传输到另一个位置上，再加载进来。这是在没有 Docker Registry 时的做法，现在已经不推荐，镜像迁移应该直接使用 Docker Registry，无论是直接使用 Docker Hub 还是使用内网私有 Registry 都可以。</p><h4 id="保存镜像"><a href="#保存镜像" class="headerlink" title="保存镜像"></a>保存镜像</h4><p>使用 <code>docker save</code> 命令可以将镜像保存为归档文件。</p><p>比如我们希望保存这个 <code>alpine</code> 镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls alpine</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">alpine              latest              baa5d63471ea        5 weeks ago         4.803 MB</span><br></pre></td></tr></table></figure><p>保存镜像的命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker save alpine -o filename</span><br><span class="line">$ file filename</span><br><span class="line">filename: POSIX tar archive</span><br></pre></td></tr></table></figure><p>这里的 filename 可以为任意名称甚至任意后缀名，但文件的本质都是归档文件</p><p><strong>注意：如果同名则会覆盖（没有警告）</strong></p><p>若使用 <code>gzip</code> 压缩：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker save alpine | gzip &gt; alpine-latest.tar.gz</span><br></pre></td></tr></table></figure><p>然后我们将 <code>alpine-latest.tar.gz</code> 文件复制到了到了另一个机器上，可以用下面这个命令加载镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker load -i alpine-latest.tar.gz</span><br><span class="line">Loaded image: alpine:latest</span><br></pre></td></tr></table></figure><p>如果我们结合这两个命令以及 <code>ssh</code> 甚至 <code>pv</code> 的话，利用 Linux 强大的管道，我们可以写一个命令完成从一个机器将镜像迁移到另一个机器，并且带进度条的功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save &lt;镜像名&gt; | bzip2 | pv | ssh &lt;用户名&gt;@&lt;主机名&gt; <span class="string">'cat | docker load'</span></span><br></pre></td></tr></table></figure><h2 id="镜像的实现原理"><a href="#镜像的实现原理" class="headerlink" title="镜像的实现原理"></a>镜像的实现原理</h2><p>Docker 镜像是怎么实现增量的修改和维护的？</p><p>每个镜像都由很多层次构成，Docker 使用 Union FS 将这些不同的层结合到一个镜像中去。</p><p>通常 Union FS 有两个用途, 一方面可以实现不借助 LVM、RAID 将多个 disk 挂到同一个目录下,另一个更常用的就是将一个只读的分支和一个可写的分支联合在一起，Live CD 正是基于此方法可以允许在镜像不变的基础上允许用户在其上进行一些写操作。</p><p>Docker 在 AUFS 上构建的容器也是利用了类似的原理。</p><h1 id="操作-Docker-容器"><a href="#操作-Docker-容器" class="headerlink" title="操作 Docker 容器"></a>操作 Docker 容器</h1><p>容器是 Docker 又一核心概念。</p><p>简单的说，容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。</p><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（<code>stopped</code>）的容器重新启动。</p><p>因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。</p><h3 id="新建并启动"><a href="#新建并启动" class="headerlink" title="新建并启动"></a>新建并启动</h3><p>所需要的命令主要为 <code>docker run</code>。</p><p>例如，下面的命令输出一个 “Hello World”，之后终止容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run centos:7 <span class="built_in">echo</span> <span class="string">'hello world'</span></span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>这跟在本地直接执行 <code>echo &#39;hello world&#39;</code> 几乎感觉不出任何区别。</p><p>下面的命令则启动一个 bash 终端，允许用户进行交互。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it centos:7  /bin/bash</span><br><span class="line">[root@e3571344ce1d /]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>其中，<code>-t</code> 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， <code>-i</code> 则让容器的标准输入保持打开。</p><p>在交互模式下，用户可以通过所创建的终端来输入命令，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@e3571344ce1d /]<span class="comment"># pwd</span></span><br><span class="line">/</span><br><span class="line">[root@e3571344ce1d /]<span class="comment"># ls</span></span><br><span class="line">anaconda-post.log  bin  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure><p>当利用 <code>docker run</code> 来创建容器时，Docker 在后台运行的标准操作包括：</p><ul><li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li><li>利用镜像创建并启动一个容器</li><li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li><li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li><li>从地址池配置一个 ip 地址给容器</li><li>执行用户指定的应用程序</li><li>执行完毕后容器被终止</li></ul><h3 id="启动已终止容器"><a href="#启动已终止容器" class="headerlink" title="启动已终止容器"></a>启动已终止容器</h3><p>可以利用 <code>docker container start</code> 命令，直接将一个已经终止的容器启动运行。</p><p>容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 <code>ps</code> 或 <code>top</code> 来查看进程信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@e3571344ce1d /]<span class="comment"># ps</span></span><br><span class="line">   PID TTY          TIME CMD</span><br><span class="line">     1 pts/0    00:00:00 bash</span><br><span class="line">    19 pts/0    00:00:00 ps</span><br></pre></td></tr></table></figure><p>可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高，是货真价实的轻量级虚拟化。</p><h2 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h2><p>更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 <code>-d</code> 参数来实现。</p><p>下面举两个例子来说明一下。</p><p>如果不使用 <code>-d</code> 参数运行容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run ubuntu:18.04 /bin/sh -c <span class="string">"while true; do echo hello world; sleep 1; done"</span></span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>容器会把输出的结果 (STDOUT) 打印到宿主机上面</p><p>如果使用了 <code>-d</code> 参数运行容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d ubuntu:18.04 /bin/sh -c <span class="string">"while true; do echo hello world; sleep 1; done"</span></span><br><span class="line">77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a</span><br></pre></td></tr></table></figure><p>此时容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面(输出结果可以用 <code>docker logs</code> 查看)。</p><p><strong>注：</strong> 容器是否会长久运行，是和 <code>docker run</code> 指定的命令有关，和 <code>-d</code> 参数无关。</p><p>使用 <code>-d</code> 参数启动后会返回一个唯一的 id，也可以通过 <code>docker container ls</code> 命令来查看容器信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID  IMAGE         COMMAND               CREATED        STATUS       PORTS NAMES</span><br><span class="line">77b2dc01fe0f  ubuntu:18.04  /bin/sh -c &apos;while tr  2 minutes ago  Up 1 minute        agitated_wright</span><br></pre></td></tr></table></figure><p>要获取容器的输出信息，可以通过 <code>docker container logs</code> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker container logs [container ID or NAMES]</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">. . .</span><br></pre></td></tr></table></figure><h2 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h2><p>可以使用 <code>docker container stop</code> 来终止一个运行中的容器。</p><p>此外，当 Docker 容器中指定的应用终结时，容器也自动终止。</p><p>例如只启动了一个终端的容器，用户通过 <code>exit</code> 命令或 <code>Ctrl+d</code> 来退出终端时，所创建的容器立刻终止。</p><p>终止状态的容器可以用 <code>docker container ls -a</code> 命令看到。例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Null@skyline docker]$ docker container ls -a</span><br><span class="line">CONTAINER ID     IMAGE            COMMAND                  CREATED             STATUS                       PORTS    NAMES</span><br><span class="line">e3571344ce1d     centos:7         <span class="string">"/bin/bash"</span>              17 minutes ago      Exited (127) 9 minutes ago            suspicious_sutherland</span><br><span class="line">7c9ae0223286     centos:7         <span class="string">"echo 'hello world'"</span>     19 minutes ago      Exited (0) 19 minutes ago             distracted_mendel</span><br><span class="line">4032f5abf6fa     d3011c2bb38d     <span class="string">"curl -s https://pv.…"</span>   3 weeks ago         Exited (0) 3 weeks ago                angry_montalcini</span><br></pre></td></tr></table></figure><p>处于终止状态的容器，可以通过 <code>docker container start</code> 命令来重新启动。</p><p>此外，<code>docker container restart</code> 命令会将一个运行态的容器终止，然后再重新启动它。</p><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p>在使用 <code>-d</code> 参数时，容器启动后会进入后台。</p><p>某些时候需要进入容器进行操作，包括使用 <code>docker attach</code> 命令或 <code>docker exec</code> 命令，推荐大家使用 <code>docker exec</code> 命令，原因会在下面说明。</p><h3 id="attach-命令"><a href="#attach-命令" class="headerlink" title="attach 命令"></a><code>attach</code> 命令</h3><p>下面示例如何使用 <code>docker attach</code> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -dit ubuntu</span><br><span class="line">243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550</span><br><span class="line"></span><br><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">243c32535da7        ubuntu:latest       <span class="string">"/bin/bash"</span>         18 seconds ago      Up 17 seconds                           nostalgic_hypatia</span><br><span class="line"></span><br><span class="line">$ docker attach 243c</span><br><span class="line">root@243c32535da7:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><em>注意：</em> 如果从这个 stdin 中 exit，会导致容器的停止。</p><h3 id="exec-命令"><a href="#exec-命令" class="headerlink" title="exec 命令"></a><code>exec</code> 命令</h3><h4 id="i-t-参数"><a href="#i-t-参数" class="headerlink" title="-i -t 参数"></a>-i -t 参数</h4><p><code>docker exec</code> 后边可以跟多个参数，这里主要说明 <code>-i</code> <code>-t</code> 参数。</p><p>只用 <code>-i</code> 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。</p><p>当 <code>-i</code> <code>-t</code> 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -dit ubuntu</span><br><span class="line">69d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6</span><br><span class="line"></span><br><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">69d137adef7a        ubuntu:latest       <span class="string">"/bin/bash"</span>         18 seconds ago      Up 17 seconds                           zealous_swirles</span><br><span class="line"></span><br><span class="line">$ docker <span class="built_in">exec</span> -i 69d1 bash</span><br><span class="line">ls</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ docker <span class="built_in">exec</span> -it 69d1 bash</span><br><span class="line">root@69d137adef7a:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>如果从这个 stdin 中 exit，不会导致容器的停止。这就是为什么推荐大家使用 <code>docker exec</code> 的原因。</p><p>更多参数说明请使用 <code>docker exec --help</code> 查看。</p><h2 id="导出和导入容器"><a href="#导出和导入容器" class="headerlink" title="导出和导入容器"></a>导出和导入容器</h2><h3 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h3><p>如果要导出本地某个容器，可以使用 <code>docker export</code> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker container ls -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES</span><br><span class="line">7691a814370e        ubuntu:18.04        <span class="string">"/bin/bash"</span>         36 hours ago        Exited (0) 21 hours ago                       <span class="built_in">test</span></span><br><span class="line">$ docker <span class="built_in">export</span> 7691a814370e &gt; ubuntu.tar</span><br></pre></td></tr></table></figure><p>这样将导出容器快照到本地文件。</p><h3 id="导入容器快照"><a href="#导入容器快照" class="headerlink" title="导入容器快照"></a>导入容器快照</h3><p>可以使用 <code>docker import</code> 从容器快照文件中再导入为镜像，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat ubuntu.tar | docker import - <span class="built_in">test</span>/ubuntu:v1.0</span><br><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE</span><br><span class="line"><span class="built_in">test</span>/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB</span><br></pre></td></tr></table></figure><p>此外，也可以通过指定 URL 或者某个目录来导入，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker import http://example.com/exampleimage.tgz example/imagerepo</span><br></pre></td></tr></table></figure><p><em>注：用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</em></p><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><p>可以使用 <code>docker container rm</code> 来删除一个处于终止状态的容器。例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker container rm  trusting_newton</span><br><span class="line">trusting_newton</span><br></pre></td></tr></table></figure><p>如果要删除一个运行中的容器，可以添加 <code>-f</code> 参数。Docker 会发送 <code>SIGKILL</code> 信号给容器。</p><h2 id="清理所有处于终止状态的容器"><a href="#清理所有处于终止状态的容器" class="headerlink" title="清理所有处于终止状态的容器"></a>清理所有处于终止状态的容器</h2><p>用 <code>docker container ls -a</code> 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container prune</span><br></pre></td></tr></table></figure><h1 id="访问仓库"><a href="#访问仓库" class="headerlink" title="访问仓库"></a>访问仓库</h1><p>仓库（<code>Repository</code>）是集中存放镜像的地方。</p><p>一个容易混淆的概念是注册服务器（<code>Registry</code>）。实际上注册服务器是管理仓库的具体服务器，每个服务器上可以有多个仓库，而每个仓库下面有多个镜像。从这方面来说，仓库可以被认为是一个具体的项目或目录。例如对于仓库地址 <code>dl.dockerpool.com/ubuntu</code> 来说，<code>dl.dockerpool.com</code> 是注册服务器地址，<code>ubuntu</code> 是仓库名。</p><p>大部分时候，并不需要严格区分这两者的概念。</p><h2 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h2><p>目前 Docker 官方维护了一个公共仓库 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>，其中已经包括了数量超过 15,000 的镜像。大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。</p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>你可以在 <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com</a> 免费注册一个 Docker 账号。</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>可以通过执行 <code>docker login</code> 命令交互式的输入用户名及密码来完成在命令行界面登录 Docker Hub。</p><p>你可以通过 <code>docker logout</code> 退出登录。</p><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>你可以通过 <code>docker search</code> 命令来查找官方仓库中的镜像，并利用 <code>docker pull</code> 命令来将它下载到本地。</p><p>例如以 <code>centos</code> 为关键词进行搜索：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker search centos</span><br><span class="line">NAME                                            DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">centos                                          The official build of CentOS.                   465       [OK]</span><br><span class="line">tianon/centos                                   CentOS 5 and 6, created using rinse instea...   28</span><br><span class="line">blalor/centos                                   Bare-bones base CentOS 6.5 image                6                    [OK]</span><br><span class="line">saltstack/centos-6-minimal                                                                      6                    [OK]</span><br><span class="line">tutum/centos-6.4                                DEPRECATED. Use tutum/centos:6.4 instead. ...   5                    [OK]</span><br></pre></td></tr></table></figure><p>可以看到返回了很多包含关键字的镜像，其中包括镜像名字、描述、收藏数（表示该镜像的受关注程度）、是否官方创建（OFFICIAL）、是否自动构建 （AUTOMATED）。</p><p>根据是否是官方提供，可将镜像分为两类。</p><p>一种是类似 <code>centos</code> 这样的镜像，被称为基础镜像或根镜像。这些基础镜像由 Docker 公司创建、验证、支持、提供。这样的镜像往往使用单个单词作为名字。</p><p>还有一种类型，比如 <code>tianon/centos</code> 镜像，它是由 Docker Hub 的注册用户创建并维护的，往往带有用户名称前缀。可以通过前缀 <code>username/</code> 来指定使用某个用户提供的镜像，比如 tianon 用户。</p><p>另外，在查找的时候通过 <code>--filter=stars=N</code> 参数可以指定仅显示收藏数量为 <code>N</code> 以上的镜像。</p><p>下载官方 <code>centos</code> 镜像到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull centos</span><br><span class="line">Pulling repository centos</span><br><span class="line">0b443ba03958: Download complete</span><br><span class="line">539c0211cd76: Download complete</span><br><span class="line">511136ea3c5a: Download complete</span><br><span class="line">7064731afe90: Download complete</span><br></pre></td></tr></table></figure><h3 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h3><p>用户也可以在登录后通过 <code>docker push</code> 命令来将自己的镜像推送到 Docker Hub。</p><p>以下命令中的 <code>username</code> 请替换为你的 Docker 账号用户名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ docker tag ubuntu:18.04 username/ubuntu:18.04</span><br><span class="line"></span><br><span class="line">$ docker image ls</span><br><span class="line"></span><br><span class="line">REPOSITORY                                               TAG                    IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu                                                   18.04                  275d79972a86        6 days ago          94.6MB</span><br><span class="line">username/ubuntu                                          18.04                  275d79972a86        6 days ago          94.6MB</span><br><span class="line"></span><br><span class="line">$ docker push username/ubuntu:18.04</span><br><span class="line"></span><br><span class="line">$ docker search username</span><br><span class="line"></span><br><span class="line">NAME                      DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">username/ubuntu</span><br></pre></td></tr></table></figure><h3 id="自动构建"><a href="#自动构建" class="headerlink" title="自动构建"></a>自动构建</h3><p>自动构建（Automated Builds）功能对于需要经常升级镜像内程序来说，十分方便。</p><p>有时候，用户构建了镜像，安装了某个软件，当软件发布新版本则需要手动更新镜像。</p><p>而自动构建允许用户通过 Docker Hub 指定跟踪一个目标网站（支持 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 或 <a href="https://bitbucket.org/" target="_blank" rel="noopener">BitBucket</a>）上的项目，一旦项目发生新的提交 （commit）或者创建了新的标签（tag），Docker Hub 会自动构建镜像并推送到 Docker Hub 中。</p><p>要配置自动构建，包括如下的步骤：</p><ul><li>登录 Docker Hub；</li><li>在 Docker Hub 点击右上角头像，在账号设置（Account Settings）中关联（Linked Accounts）目标网站；</li><li>在 Docker Hub 中新建或选择已有的仓库，在 <code>Builds</code> 选项卡中选择 <code>Configure Automated Builds</code>；</li><li>选取一个目标网站中的项目（需要含 <code>Dockerfile</code>）和分支；</li><li>指定 <code>Dockerfile</code> 的位置，并保存。</li></ul><p>之后，可以在 Docker Hub 的仓库页面的 <code>Timeline</code> 选项卡中查看每次构建的状态。</p><h2 id="私有仓库"><a href="#私有仓库" class="headerlink" title="私有仓库"></a>私有仓库</h2><p>有时候使用 Docker Hub 这样的公共仓库可能不方便，用户可以创建一个本地仓库供私人使用。</p><p>本节介绍如何使用本地仓库。</p><p><code>docker-registry</code> 是官方提供的工具，可以用于构建私有的镜像仓库。本文内容基于 <code>docker-registry</code>v2.x 版本。</p><h3 id="安装运行-docker-registry"><a href="#安装运行-docker-registry" class="headerlink" title="安装运行 docker-registry"></a>安装运行 docker-registry</h3><h4 id="容器运行"><a href="#容器运行" class="headerlink" title="容器运行"></a>容器运行</h4><p>你可以通过获取官方 <code>registry</code> 镜像来运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 5000:5000 --restart=always --name registry registry</span><br></pre></td></tr></table></figure><p>这将使用官方的 <code>registry</code> 镜像来启动私有仓库。默认情况下，仓库会被创建在容器的 <code>/var/lib/registry</code> 目录下。你可以通过 <code>-v</code> 参数来将镜像文件存放在本地的指定路径。例如下面的例子将上传的镜像放到本地的 <code>/opt/data/registry</code> 目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -v /opt/data/registry:/var/lib/registry \</span><br><span class="line">    registry</span><br></pre></td></tr></table></figure><h3 id="在私有仓库上传、搜索、下载镜像"><a href="#在私有仓库上传、搜索、下载镜像" class="headerlink" title="在私有仓库上传、搜索、下载镜像"></a>在私有仓库上传、搜索、下载镜像</h3><p>创建好私有仓库之后，就可以使用 <code>docker tag</code> 来标记一个镜像，然后推送它到仓库。例如私有仓库地址为 <code>127.0.0.1:5000</code>。</p><p>先在本机查看已有的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">ubuntu                            latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br></pre></td></tr></table></figure><p>使用 <code>docker tag</code> 将 <code>ubuntu:latest</code> 这个镜像标记为 <code>127.0.0.1:5000/ubuntu:latest</code>。</p><p>格式为 <code>docker tag IMAGE[:TAG] [REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker tag ubuntu:latest 127.0.0.1:5000/ubuntu:latest</span><br><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">ubuntu                            latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br><span class="line">127.0.0.1:5000/ubuntu:latest      latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br></pre></td></tr></table></figure><p>使用 <code>docker push</code> 上传标记的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker push 127.0.0.1:5000/ubuntu:latest</span><br><span class="line">The push refers to repository [127.0.0.1:5000/ubuntu]</span><br><span class="line">373a30c24545: Pushed</span><br><span class="line">a9148f5200b0: Pushed</span><br><span class="line">cdd3de0940ab: Pushed</span><br><span class="line">fc56279bbb33: Pushed</span><br><span class="line">b38367233d37: Pushed</span><br><span class="line">2aebd096e0e2: Pushed</span><br><span class="line">latest: digest: sha256:fe4277621f10b5026266932ddf760f5a756d2facd505a94d2da12f4f52f71f5a size: 1568</span><br></pre></td></tr></table></figure><p>用 <code>curl</code> 查看仓库中的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl 127.0.0.1:5000/v2/_catalog</span><br><span class="line">&#123;<span class="string">"repositories"</span>:[<span class="string">"ubuntu"</span>]&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到 <code>{&quot;repositories&quot;:[&quot;ubuntu&quot;]}</code>，表明镜像已经被成功上传了。</p><p>先删除已有镜像，再尝试从私有仓库中下载这个镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm 127.0.0.1:5000/ubuntu:latest</span><br><span class="line"></span><br><span class="line">$ docker pull 127.0.0.1:5000/ubuntu:latest</span><br><span class="line">Pulling repository 127.0.0.1:5000/ubuntu:latest</span><br><span class="line">ba5877dc9bec: Download complete</span><br><span class="line">511136ea3c5a: Download complete</span><br><span class="line">9bad880da3d2: Download complete</span><br><span class="line">25f11f5fb0cb: Download complete</span><br><span class="line">ebc34468f71d: Download complete</span><br><span class="line">2318d26665ef: Download complete</span><br><span class="line"></span><br><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY                         TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">127.0.0.1:5000/ubuntu:latest       latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果你不想使用 <code>127.0.0.1:5000</code> 作为仓库地址，比如想让本网段的其他主机也能把镜像推送到私有仓库。你就得把例如 <code>192.168.199.100:5000</code> 这样的内网地址作为私有仓库地址，这时你会发现无法成功推送镜像。</p><p>这是因为 Docker 默认不允许非 <code>HTTPS</code> 方式推送镜像。我们可以通过 Docker 的配置选项来取消这个限制，或者查看下一节配置能够通过 <code>HTTPS</code> 访问的私有仓库。</p><h4 id="Centos-7"><a href="#Centos-7" class="headerlink" title="Centos 7"></a>Centos 7</h4><p>对于使用 <code>systemd</code> 的系统，请在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirror"</span>: [</span><br><span class="line">    <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"insecure-registries"</span>: [</span><br><span class="line">    <span class="string">"192.168.199.100:5000"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：该文件必须符合 <code>json</code> 规范，否则 Docker 将不能启动。</p></blockquote><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>对于 Docker for Windows 、 Docker for Mac 在设置中编辑 <code>daemon.json</code> 增加和上边一样的字符串即可。</p><h2 id="Nexus3-x-的私有仓库"><a href="#Nexus3-x-的私有仓库" class="headerlink" title="Nexus3.x 的私有仓库"></a>Nexus3.x 的私有仓库</h2><p>使用 Docker 官方的 Registry 创建的仓库面临一些维护问题。比如某些镜像删除以后空间默认是不会回收的，需要一些命令去回收空间然后重启 Registry 程序。在企业中把内部的一些工具包放入 Nexus 中是比较常见的做法，最新版本 <code>Nexus3.x</code> 全面支持 Docker 的私有镜像。所以使用 <code>Nexus3.x</code> 一个软件来管理 <code>Docker</code> , <code>Maven</code> , <code>Yum</code> , <code>PyPI</code> 等是一个明智的选择。</p><h3 id="启动-Nexus-容器"><a href="#启动-Nexus-容器" class="headerlink" title="启动 Nexus 容器"></a>启动 Nexus 容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name nexus3 --restart=always \</span><br><span class="line">    -p 8081:8081 \</span><br><span class="line">    --mount src=nexus-data,target=/nexus-data \</span><br><span class="line">    sonatype/nexus3</span><br></pre></td></tr></table></figure><p>等待 3-5 分钟，如果 <code>nexus3</code> 容器没有异常退出，那么你可以使用浏览器打开 <code>http://YourIP:8081</code> 访问 Nexus 了。</p><p>第一次启动 Nexus 的默认帐号是 <code>admin</code> 密码是 <code>admin123</code> 登录以后点击页面上方的齿轮按钮进行设置。</p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>创建一个私有仓库的方法： <code>Repository-&gt;Repositories</code> 点击右边菜单 <code>Create repository</code> 选择 <code>docker (hosted)</code></p><ul><li>Name: 仓库的名称</li><li>HTTP: 仓库单独的访问端口</li><li>Enable Docker V1 API: 如果需要同时支持 V1 版本请勾选此项（不建议勾选）。</li><li>Hosted -&gt; Deployment pollcy: 请选择 Allow redeploy 否则无法上传 Docker 镜像。</li></ul><p>其它的仓库创建方法请各位自己摸索，还可以创建一个 docker (proxy) 类型的仓库链接到 DockerHub 上。再创建一个 docker (group) 类型的仓库把刚才的 hosted 与 proxy 添加在一起。主机在访问的时候默认下载私有仓库中的镜像，如果没有将链接到 DockerHub 中下载并缓存到 Nexus 中。</p><h3 id="添加访问权限"><a href="#添加访问权限" class="headerlink" title="添加访问权限"></a>添加访问权限</h3><p>菜单 <code>Security-&gt;Realms</code> 把 Docker Bearer Token Realm 移到右边的框中保存。</p><p>添加用户规则：菜单 <code>Security-&gt;Roles</code>-&gt;<code>Create role</code> 在 <code>Privlleges</code> 选项搜索 docker 把相应的规则移动到右边的框中然后保存。</p><p>添加用户：菜单 <code>Security-&gt;Users</code>-&gt;<code>Create local user</code> 在 <code>Roles</code> 选项中选中刚才创建的规则移动到右边的窗口保存。</p><h3 id="Docker-主机访问镜像仓库"><a href="#Docker-主机访问镜像仓库" class="headerlink" title="Docker 主机访问镜像仓库"></a>Docker 主机访问镜像仓库</h3><p>如果不启用 SSL 加密可以通过前面章节的方法添加信任地址到 Docker 的配置文件中然后重启 Docker。</p><p>使用 <code>docker login YourDomainName OR HostIP</code> 进行测试，用户名密码填写上面 Nexus 中生成的。</p><h1 id="Docker-数据管理"><a href="#Docker-数据管理" class="headerlink" title="Docker 数据管理"></a>Docker 数据管理</h1><p>如何在 Docker 内部以及容器之间管理数据，在容器中管理数据主要有两种方式：</p><ul><li>数据卷（Volumes）</li><li>挂载主机目录 (Bind mounts)</li></ul><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p><ul><li><code>数据卷</code> 可以在容器之间共享和重用</li><li>对 <code>数据卷</code> 的修改会立马生效</li><li>对 <code>数据卷</code> 的更新，不会影响镜像</li><li><code>数据卷</code> 默认会一直存在，即使容器被删除</li></ul><blockquote><p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会隐藏掉，能显示看的是挂载的 <code>数据卷</code>。</p></blockquote><h3 id="创建一个数据卷"><a href="#创建一个数据卷" class="headerlink" title="创建一个数据卷"></a>创建一个数据卷</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume create my-vol</span><br></pre></td></tr></table></figure><p>查看所有的 <code>数据卷</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume ls</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span>               my-vol</span><br></pre></td></tr></table></figure><p>在主机里使用以下命令可以查看指定 <code>数据卷</code> 的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume inspect my-vol</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Labels"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"Mountpoint"</span>: <span class="string">"/var/lib/docker/volumes/my-vol/_data"</span>,</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"my-vol"</span>,</span><br><span class="line">        <span class="string">"Options"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="启动一个挂载数据卷的容器"><a href="#启动一个挂载数据卷的容器" class="headerlink" title="启动一个挂载数据卷的容器"></a>启动一个挂载数据卷的容器</h3><p>在用 <code>docker run</code> 命令的时候，使用 <code>--mount</code> 标记来将 <code>数据卷</code> 挂载到容器里。在一次 <code>docker run</code> 中可以挂载多个 <code>数据卷</code>。</p><p>下面创建一个名为 <code>web</code> 的容器，并加载一个 <code>数据卷</code> 到容器的 <code>/webapp</code> 目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -P \</span><br><span class="line">    --name web \</span><br><span class="line">    <span class="comment"># -v my-vol:/wepapp \</span></span><br><span class="line">    --mount <span class="built_in">source</span>=my-vol,target=/webapp \</span><br><span class="line">    training/webapp \</span><br><span class="line">    python app.py</span><br></pre></td></tr></table></figure><h3 id="查看数据卷的具体信息"><a href="#查看数据卷的具体信息" class="headerlink" title="查看数据卷的具体信息"></a>查看数据卷的具体信息</h3><p>在主机里使用以下命令可以查看 <code>web</code> 容器的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect web</span><br></pre></td></tr></table></figure><p><code>数据卷</code> 信息在 “Mounts” Key 下面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">"Mounts": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"Type"</span>: <span class="string">"volume"</span>,</span><br><span class="line">        <span class="attr">"Name"</span>: <span class="string">"my-vol"</span>,</span><br><span class="line">        <span class="attr">"Source"</span>: <span class="string">"/var/lib/docker/volumes/my-vol/_data"</span>,</span><br><span class="line">        <span class="attr">"Destination"</span>: <span class="string">"/app"</span>,</span><br><span class="line">        <span class="attr">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="attr">"Mode"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"Propagation"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume rm my-vol</span><br></pre></td></tr></table></figure><p><code>数据卷</code> 是被设计用来持久化数据的，它的生命周期独立于容器，Docker 不会在容器被删除后自动删除 <code>数据卷</code>，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的 <code>数据卷</code>。如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用 <code>docker rm -v</code> 这个命令。</p><p>无主的数据卷可能会占据很多空间，要清理请使用以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume prune</span><br></pre></td></tr></table></figure><h2 id="挂载主机目录"><a href="#挂载主机目录" class="headerlink" title="挂载主机目录"></a>挂载主机目录</h2><h3 id="挂载一个主机目录作为数据卷"><a href="#挂载一个主机目录作为数据卷" class="headerlink" title="挂载一个主机目录作为数据卷"></a>挂载一个主机目录作为数据卷</h3><p>使用 <code>--mount</code> 标记可以指定挂载一个本地主机的目录到容器中去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -P \</span><br><span class="line">    --name web \</span><br><span class="line">    <span class="comment"># -v /src/webapp:/opt/webapp \</span></span><br><span class="line">    --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=/src/webapp,target=/opt/webapp \</span><br><span class="line">    training/webapp \</span><br><span class="line">    python app.py</span><br></pre></td></tr></table></figure><p>上面的命令加载主机的 <code>/src/webapp</code> 目录到容器的 <code>/opt/webapp</code>目录。这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。本地目录的路径必须是绝对路径，以前使用 <code>-v</code> 参数时如果本地目录不存在 Docker 会自动为你创建一个文件夹，现在使用 <code>--mount</code> 参数时如果本地目录不存在，Docker 会报错。</p><p>Docker 挂载主机目录的默认权限是 <code>读写</code>，用户也可以通过增加 <code>readonly</code> 指定为 <code>只读</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -P \</span><br><span class="line">    --name web \</span><br><span class="line">    <span class="comment"># -v /src/webapp:/opt/webapp:ro \</span></span><br><span class="line">    --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=/src/webapp,target=/opt/webapp,<span class="built_in">readonly</span> \</span><br><span class="line">    training/webapp \</span><br><span class="line">    python app.py</span><br></pre></td></tr></table></figure><p>加了 <code>readonly</code> 之后，就挂载为 <code>只读</code> 了。如果你在容器内 <code>/opt/webapp</code> 目录新建文件，会显示如下错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/opt/webapp <span class="comment"># touch new.txt</span></span><br><span class="line">touch: new.txt: Read-only file system</span><br></pre></td></tr></table></figure><h3 id="查看数据卷的具体信息-1"><a href="#查看数据卷的具体信息-1" class="headerlink" title="查看数据卷的具体信息"></a>查看数据卷的具体信息</h3><p>在主机里使用以下命令可以查看 <code>web</code> 容器的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect web</span><br></pre></td></tr></table></figure><p><code>挂载主机目录</code> 的配置信息在 “Mounts” Key 下面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">"Mounts": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">        <span class="attr">"Source"</span>: <span class="string">"/src/webapp"</span>,</span><br><span class="line">        <span class="attr">"Destination"</span>: <span class="string">"/opt/webapp"</span>,</span><br><span class="line">        <span class="attr">"Mode"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"Propagation"</span>: <span class="string">"rprivate"</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="挂载一个本地主机文件作为数据卷"><a href="#挂载一个本地主机文件作为数据卷" class="headerlink" title="挂载一个本地主机文件作为数据卷"></a>挂载一个本地主机文件作为数据卷</h3><p><code>--mount</code> 标记也可以从主机挂载单个文件到容器中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -it \</span><br><span class="line">   <span class="comment"># -v $HOME/.bash_history:/root/.bash_history \</span></span><br><span class="line">   --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=<span class="variable">$HOME</span>/.bash_history,target=/root/.bash_history \</span><br><span class="line">   ubuntu:18.04 \</span><br><span class="line">   bash</span><br><span class="line"></span><br><span class="line">root@2affd44b4667:/<span class="comment"># history</span></span><br><span class="line">1  ls</span><br><span class="line">2  diskutil list</span><br></pre></td></tr></table></figure><p>这样就可以记录在容器输入过的命令了。</p><h1 id="Docker-中的网络功能介绍"><a href="#Docker-中的网络功能介绍" class="headerlink" title="Docker 中的网络功能介绍"></a>Docker 中的网络功能介绍</h1><p>Docker 允许通过外部访问容器或容器互联的方式来提供网络服务。</p><h2 id="外部访问容器"><a href="#外部访问容器" class="headerlink" title="外部访问容器"></a>外部访问容器</h2><p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 <code>-P</code> 或 <code>-p</code> 参数来指定端口映射。</p><p>当使用 <code>-P</code> 标记时，Docker 会随机映射一个 <code>49000~49900</code> 的端口到内部容器开放的网络端口。</p><p>使用 <code>docker container ls</code> 可以看到，本地主机的 49155 被映射到了容器的 5000 端口。此时访问本机的 49155 端口即可访问容器内 web 应用提供的界面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -P training/webapp python app.py</span><br><span class="line"></span><br><span class="line">$ docker container ls -l</span><br><span class="line">CONTAINER ID  IMAGE                   COMMAND       CREATED        STATUS        PORTS                    NAMES</span><br><span class="line">bc533791f3f5  training/webapp:latest  python app.py 5 seconds ago  Up 2 seconds  0.0.0.0:49155-&gt;5000/tcp  nostalgic_morse</span><br></pre></td></tr></table></figure><p>同样的，可以通过 <code>docker logs</code> 命令来查看应用的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker logs -f nostalgic_morse</span><br><span class="line">* Running on http://0.0.0.0:5000/</span><br><span class="line">10.0.2.2 - - [23/May/2014 20:16:31] <span class="string">"GET / HTTP/1.1"</span> 200 -</span><br><span class="line">10.0.2.2 - - [23/May/2014 20:16:31] <span class="string">"GET /favicon.ico HTTP/1.1"</span> 404 -</span><br></pre></td></tr></table></figure><p><code>-p</code> 则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。支持的格式有 <code>ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort</code>。</p><h3 id="映射所有接口地址"><a href="#映射所有接口地址" class="headerlink" title="映射所有接口地址"></a>映射所有接口地址</h3><p>使用 <code>hostPort:containerPort</code> 格式本地的 5000 端口映射到容器的 5000 端口，可以执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 5000:5000 training/webapp python app.py</span><br></pre></td></tr></table></figure><p>此时默认会绑定本地所有接口上的所有地址。</p><h3 id="映射到指定地址的指定端口"><a href="#映射到指定地址的指定端口" class="headerlink" title="映射到指定地址的指定端口"></a>映射到指定地址的指定端口</h3><p>可以使用 <code>ip:hostPort:containerPort</code> 格式指定映射使用一个特定地址，比如 localhost 地址 127.0.0.1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py</span><br></pre></td></tr></table></figure><h3 id="映射到指定地址的任意端口"><a href="#映射到指定地址的任意端口" class="headerlink" title="映射到指定地址的任意端口"></a>映射到指定地址的任意端口</h3><p>使用 <code>ip::containerPort</code> 绑定 localhost 的任意端口到容器的 5000 端口，本地主机会自动分配一个端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 127.0.0.1::5000 training/webapp python app.py</span><br></pre></td></tr></table></figure><p>还可以使用 <code>udp</code> 标记来指定 <code>udp</code> 端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py</span><br></pre></td></tr></table></figure><h3 id="查看映射端口配置"><a href="#查看映射端口配置" class="headerlink" title="查看映射端口配置"></a>查看映射端口配置</h3><p>使用 <code>docker port</code> 来查看当前映射的端口配置，也可以查看到绑定的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker port nostalgic_morse 5000</span><br><span class="line">127.0.0.1:49155.</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>容器有自己的内部网络和 ip 地址（使用 <code>docker inspect</code> 可以获取所有的变量，Docker 还可以有一个可变的网络配置。）</li><li><code>-p</code> 标记可以多次使用来绑定多个端口</li></ul><p>例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -p 3000:80 \</span><br><span class="line">    training/webapp \</span><br><span class="line">    python app.py</span><br></pre></td></tr></table></figure><h2 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h2><p>如果你之前有 <code>Docker</code> 使用经验，你可能已经习惯了使用 <code>--link</code> 参数来使容器互联。</p><p>随着 Docker 网络的完善，强烈建议大家将容器加入自定义的 Docker 网络来连接多个容器，而不是使用 <code>--link</code> 参数。</p><h3 id="新建网络"><a href="#新建网络" class="headerlink" title="新建网络"></a>新建网络</h3><p>下面先创建一个新的 Docker 网络。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network create -d bridge my-net</span><br></pre></td></tr></table></figure><p><code>-d</code> 参数指定 Docker 网络类型，有 <code>bridge</code> <code>overlay</code>。其中 <code>overlay</code> 网络类型用于 Swarm mode，在本小节中你可以忽略它。</p><h3 id="连接容器"><a href="#连接容器" class="headerlink" title="连接容器"></a>连接容器</h3><p>运行一个容器并连接到新建的 <code>my-net</code> 网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm --name busybox1 --network my-net busybox sh</span><br></pre></td></tr></table></figure><p>打开新的终端，再运行一个容器并加入到 <code>my-net</code> 网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm --name busybox2 --network my-net busybox sh</span><br></pre></td></tr></table></figure><p>再打开一个新的终端查看容器信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker container ls</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">b47060aca56b        busybox             <span class="string">"sh"</span>                11 minutes ago      Up 11 minutes                           busybox2</span><br><span class="line">8720575823ec        busybox             <span class="string">"sh"</span>                16 minutes ago      Up 16 minutes                           busybox1</span><br></pre></td></tr></table></figure><p>下面通过 <code>ping</code> 来证明 <code>busybox1</code> 容器和 <code>busybox2</code> 容器建立了互联关系。</p><p>在 <code>busybox1</code> 容器输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="comment"># ping busybox2</span></span><br><span class="line">PING busybox2 (172.19.0.3): 56 data bytes</span><br><span class="line">64 bytes from 172.19.0.3: seq=0 ttl=64 time=0.072 ms</span><br><span class="line">64 bytes from 172.19.0.3: seq=1 ttl=64 time=0.118 ms</span><br></pre></td></tr></table></figure><p>用 ping 来测试连接 <code>busybox2</code> 容器，它会解析成 <code>172.19.0.3</code>。</p><p>同理在 <code>busybox2</code> 容器执行 <code>ping busybox1</code>，也会成功连接到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="comment"># ping busybox1</span></span><br><span class="line">PING busybox1 (172.19.0.2): 56 data bytes</span><br><span class="line">64 bytes from 172.19.0.2: seq=0 ttl=64 time=0.064 ms</span><br><span class="line">64 bytes from 172.19.0.2: seq=1 ttl=64 time=0.143 ms</span><br></pre></td></tr></table></figure><p>这样，<code>busybox1</code> 容器和 <code>busybox2</code> 容器建立了互联关系。</p><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><p>如果你有多个容器之间需要互相连接，推荐使用 Docker Compose。</p><h2 id="配置-DNS"><a href="#配置-DNS" class="headerlink" title="配置 DNS"></a>配置 DNS</h2><p>如何自定义配置容器的主机名和 DNS 呢？秘诀就是 Docker 利用虚拟文件来挂载容器的 3 个相关配置文件。</p><p>在容器中使用 <code>mount</code> 命令可以看到挂载信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mount</span><br><span class="line">/dev/disk/by-uuid/1fec...ebdf on /etc/hostname <span class="built_in">type</span> ext4 ...</span><br><span class="line">/dev/disk/by-uuid/1fec...ebdf on /etc/hosts <span class="built_in">type</span> ext4 ...</span><br><span class="line">tmpfs on /etc/resolv.conf <span class="built_in">type</span> tmpfs ...</span><br></pre></td></tr></table></figure><p>这种机制可以让宿主主机 DNS 信息发生更新后，所有 Docker 容器的 DNS 配置通过 <code>/etc/resolv.conf</code> 文件立刻得到更新。</p><p>配置全部容器的 DNS ，也可以在 <code>/etc/docker/daemon.json</code> 文件中增加以下内容来设置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"dns"</span> : [</span><br><span class="line">    <span class="string">"114.114.114.114"</span>,</span><br><span class="line">    <span class="string">"8.8.8.8"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样每次启动的容器 DNS 自动配置为 <code>114.114.114.114</code> 和 <code>8.8.8.8</code>。使用以下命令来证明其已经生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm ubuntu:18.04  cat etc/resolv.conf</span><br><span class="line"></span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure><p>如果用户想要手动指定容器的配置，可以在使用 <code>docker run</code> 命令启动容器时加入如下参数：</p><p><code>-h HOSTNAME</code> 或者 <code>--hostname=HOSTNAME</code> 设定容器的主机名，它会被写到容器内的 <code>/etc/hostname</code> 和 <code>/etc/hosts</code>。但它在容器外部看不到，既不会在 <code>docker container ls</code> 中显示，也不会在其他的容器的 <code>/etc/hosts</code> 看到。</p><p><code>--dns=IP_ADDRESS</code> 添加 DNS 服务器到容器的 <code>/etc/resolv.conf</code> 中，让容器用这个服务器来解析所有不在 <code>/etc/hosts</code> 中的主机名。</p><p><code>--dns-search=DOMAIN</code> 设定容器的搜索域，当设定搜索域为 <code>.example.com</code> 时，在搜索一个名为 host 的主机时，DNS 不仅搜索 host，还会搜索 <code>host.example.com</code>。</p><blockquote><p>注意：如果在容器启动时没有指定最后两个参数，Docker 会默认用主机上的 <code>/etc/resolv.conf</code> 来配置容器。</p></blockquote><h1 id="Docker-对容器资源进行限制（未完）"><a href="#Docker-对容器资源进行限制（未完）" class="headerlink" title="Docker 对容器资源进行限制（未完）"></a>Docker 对容器资源进行限制（未完）</h1><p>限制容器能使用的 CPU 核数</p><p>上面讲述的 <code>-c --cpu-shares</code>参数只能限制容器使用 CPU 的比例，或者说优先级，无法确定地限制容器使用 CPU 的具体核数；从 1.13 版本之后，docker 提供了 <code>--cpus</code> 参数可以限定容器能使用的 CPU 核数。这个功能可以让我们更精确地设置容器 CPU 使用量，是一种更容易理解也因此更常用的手段。<br><code>--cpus</code> 后面跟着一个浮点数，代表容器最多使用的核数，可以精确到小数点二位，也就是说容器最小可以使用 <code>0.01</code> 核 CPU。比如，我们可以限制容器只能使用 <code>1.5</code> 核数 CPU。</p><p>在 docker 启动参数中，和内存限制有关的包括（参数的值一般是内存大小，也就是一个正数，后面跟着内存单位 b、k、m、g，分别对应 bytes、KB、MB、和 GB）：</p><p><code>-m --memory</code>：容器能使用的最大内存大小，最小值为 4m</p><p><code>--memory-swap</code>：容器能够使用的 swap 大小</p><p><code>--memory-swappiness</code>：默认情况下，主机可以把容器使用的匿名页（anonymous page）swap 出来，你可以设置一个 0-100 之间的值，代表允许 swap 出来的比例</p>]]></content>
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VeeValidate 表单校验</title>
      <link href="/2019/04/24/VeeValidate-%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C/"/>
      <content type="html"><![CDATA[<p>项目遇到要表单验证了。VeeValidate是Vue.js的验证库，它有很多验证规则，并支持自定义规则。它基于模板，因此它与HTML5验证API相似并且很熟悉。您可以验证HTML5输入以及自定义Vue组件，不用自己造轮子。本篇文章就记录这个插件的基本使用方法。<br><a id="more"></a></p><h3 id="基本安装和简单使用"><a href="#基本安装和简单使用" class="headerlink" title="基本安装和简单使用"></a>基本安装和简单使用</h3><ul><li><code>npm install vee-validate --save</code> 安装vee-validate插件。</li><li><code>npm install vue-i18n --save</code>安装vue国际化。<br>在src下新建文件夹并且创建文件validator.js,然后再引用到mian.js中<code>import &#39;./validator/validator.js&#39;</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//validator.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> VeeValidate <span class="keyword">from</span> <span class="string">"vee-validate"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> VueI18n <span class="keyword">from</span> <span class="string">"vue-i18n"</span>;</span><br><span class="line"><span class="keyword">import</span> zh_CN <span class="keyword">from</span> <span class="string">"vee-validate/dist/locale/zh_CN"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueI18n);</span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">  locale: <span class="string">"zh_CN"</span></span><br><span class="line">&#125;);</span><br><span class="line">Vue.use(VeeValidate, &#123;</span><br><span class="line">  i18n,</span><br><span class="line">  i18nRootKey: <span class="string">"validation"</span>,</span><br><span class="line">  dictionary: &#123;</span><br><span class="line">    zh_CN</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在from表单验证必填值的简单使用。</p><ul><li>v-validate:<br>   v-validate是vue的指令添加到您希望验证的输入中，并确保您的输入具有name用于生成错误消息的属性。 然后，传递给指令一个rules字符串，其中包含由管道’ |’ 分隔的验证规则列表。比如使用<code>required</code>这个选项是必填项.</li><li>data-vv-as：<br>  当为这个输入生成任何错误消息时，它将使用该data-vv-as值而不是实际的字段名称，默认的错误提示都是英文，如果你设置了这个，错误提示字段名称它会提示data-vv-as值.</li><li>v-show=”errors.has(‘remark’)”<br>默认错误提示的标签不加载出来.</li><li>errors.first(‘remark’)<br>获取关于当前remark的第一个错误信息.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"fromdata"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"fromItem"</span>&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        name=<span class="string">"name"</span></span><br><span class="line">        type=<span class="string">"text"</span></span><br><span class="line">        v-model=<span class="string">"name"</span></span><br><span class="line">        placeholder=<span class="string">" 请输入姓名"</span></span><br><span class="line">        v-validate=<span class="string">"'required'"</span></span><br><span class="line">        data-vv-<span class="keyword">as</span>=<span class="string">"姓名"</span></span><br><span class="line">      &gt;</span><br><span class="line">      &lt;span v-show=<span class="string">"errors.has('name')"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"help"</span>&gt;&#123;&#123; errors.first(<span class="string">'name'</span>) &#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"fromItem"</span>&gt;</span><br><span class="line">      &lt;input name=<span class="string">"age"</span> type=<span class="string">"text"</span> v-model=<span class="string">"age"</span> placeholder=<span class="string">"年龄"</span> v-validate=<span class="string">"'required'"</span>&gt;</span><br><span class="line">      &lt;span v-show=<span class="string">"errors.has('age')"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"help"</span>&gt;&#123;&#123; errors.first(<span class="string">'age'</span>) &#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"commitData"</span>&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      name: "",</span></span><br><span class="line"><span class="regexp">      age: ""</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  methods: &#123;</span></span><br><span class="line"><span class="regexp">    commitData() &#123;</span></span><br><span class="line"><span class="regexp">      this.$validator.validateAll().then(result =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        if (result) &#123;</span></span><br><span class="line"><span class="regexp">          alert("验证通过");</span></span><br><span class="line"><span class="regexp">          return;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        alert("请检查表单");</span></span><br><span class="line"><span class="regexp">      &#125;);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="自定义验证规则"><a href="#自定义验证规则" class="headerlink" title="自定义验证规则"></a>自定义验证规则</h3><p>在validator.js文件中引入Validator 对象；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Validator &#125; <span class="keyword">from</span> <span class="string">"vee-validate"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*自定义验证规则*/</span></span><br><span class="line">Validator.extend(<span class="string">"mobile"</span>, &#123;</span><br><span class="line">    getMessage: <span class="function"><span class="params">field</span> =&gt;</span> <span class="string">"电话号码格式不正确"</span>,</span><br><span class="line">    validate: <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">        value.length === <span class="number">11</span> &amp;&amp; <span class="regexp">/^((13|14|15|17|18)[0-9]&#123;1&#125;\d&#123;8&#125;)$/</span>.test(value)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Validator.extend(<span class="string">"chinese"</span>, &#123;</span><br><span class="line">    getMessage: <span class="function"><span class="params">field</span> =&gt;</span> <span class="string">"只能填写中文"</span>,</span><br><span class="line">    validate: <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">        /[^\u0000-\u00FF]/.test(value)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*自定义错误消息*/</span></span><br><span class="line"><span class="keyword">const</span> Dictionary = &#123;</span><br><span class="line">    zh_CN: &#123;</span><br><span class="line">        messages: &#123;</span><br><span class="line">            required: <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">"必填项。"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        attributes: &#123;</span><br><span class="line">            email: <span class="string">"邮箱"</span>,</span><br><span class="line">            mobile: <span class="string">'电话号码'</span>,</span><br><span class="line">            idCard: <span class="string">"身份证号码"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 自定义validate error 信息</span></span><br><span class="line">Validator.localize(Dictionary);</span><br></pre></td></tr></table></figure><p>在上面的那个<code>v-validate</code>指令使用后面添加你自定义的规则。<br><strong>温馨提示</strong></p><ol><li>自定义方法要放在自定义错误消息上面，要不错误信息会有问题。</li><li>一个组件下保证验证的<code>name</code>属性唯一，除非你需要特定联动效果。<br>具体如何使用在本人的github上有😊一个小demo。<a href="https://github.com/OuYangResume/Vue-Gis/blob/master/src/views/test/VeeValidate.vue" target="_blank" rel="noopener">地址</a></li></ol><h3 id="校验范围的设定"><a href="#校验范围的设定" class="headerlink" title="校验范围的设定"></a>校验范围的设定</h3><p>当一个Vue组件中多个form表单,每个表单当然都有自己的请求。所以在这种情况下就需要给每个验证设置一个领域。<br>给每个验证设置一个<code>data-vv-scope</code>属性。为这个领域取一个name<br>在提交表单之前validateAll（）方法修改成validate(“name.*”)来进行过滤。<br>这种验证的方式在上面👆给个地址也有用到。</p><h3 id="需要更多就移步至VeeValidate官网"><a href="#需要更多就移步至VeeValidate官网" class="headerlink" title="需要更多就移步至VeeValidate官网"></a>需要更多就移步至<a href="https://baianat.github.io/vee-validate/" target="_blank" rel="noopener">VeeValidate官网</a></h3>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>所爱隔山海</title>
      <link href="/2019/04/07/%E6%89%80%E7%88%B1%E9%9A%94%E5%B1%B1%E6%B5%B7/"/>
      <content type="html"><![CDATA[<div align="center"><img src="/2019/04/07/所爱隔山海/IMG_20190607_100907.jpg" width="500" height="350" alt="图片名称"><p>二〇一九年六月七日</p><br></div><a id="more"></a><div align="center" style="display:flex;flex-wrap: wrap;"><img src="/2019/04/07/所爱隔山海/IMG_20190611_142508.jpg" style="height:460px !important;width: 350px; " alt="图片名称" align="center"><br><img src="/2019/04/07/所爱隔山海/IMG_20190611_143130.jpg" style="height:460px !important;width: 350px; " alt="图片名称" align="center"><br></div><div align="center" style="display:flex;flex-wrap: wrap;"><img src="/2019/04/07/所爱隔山海/IMG_20190611_143514.jpg" style="height:460px !important;width: 350px; " alt="图片名称" align="center"><br><img src="/2019/04/07/所爱隔山海/IMG_20190611_153651.jpg" style="height:460px !important;width: 350px; " alt="图片名称" align="center"><br></div>]]></content>
      
      <categories>
          
          <category> 随笔生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于axios封装的请求</title>
      <link href="/2019/03/25/%E5%9F%BA%E4%BA%8Eaxios%E5%B0%81%E8%A3%85%E7%9A%84%E8%AF%B7%E6%B1%82/"/>
      <content type="html"><![CDATA[<p>axios非常方便，但是如果在每个组件中走一遍axios流程，最终又会写出“意大利面条”式的代码。况且很多时候在前端需要设置header，统一添加token，对异常进行处理等，所以最好对其进行封装。结合axios，能够很好的进行封装。<br><a id="more"></a><br>最近项目中，前端遇到获取数据时来自各种不同的项目组，其中有一个提供空间数据的小组为了保证数据的安全性。需要在请求数据前先用规定用户名和密码请求一个token。然后将这个token当必传参数去请求空间数据。为方便同事的使用即封装了一个公共的请求方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cudeAxios.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;<span class="comment">//引入axios请求</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;&#125;);<span class="comment">//定义vm 等于 vue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @description: 获取token</span></span><br><span class="line"><span class="comment">     * @param &#123;type&#125; </span></span><br><span class="line"><span class="comment">     * @return: </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getToken</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    method: <span class="string">"get"</span>,</span><br><span class="line">    url: vm.usedUrl() + <span class="string">"getCubeDataAccessToken"</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      reject(error);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description: 获取块数据请求之前的token</span></span><br><span class="line"><span class="comment"> * @param &#123;type&#125;</span></span><br><span class="line"><span class="comment"> * @return:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCubeToken</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timestamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">  <span class="keyword">let</span> user = &#123;</span><br><span class="line">    userName: <span class="string">"user"</span>,</span><br><span class="line">    passWord: <span class="string">"123456"</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> params = &#123;</span><br><span class="line">    time: timestamp,</span><br><span class="line">    user: user.userName,</span><br><span class="line">    secret: vm.md5(timestamp + user.passWord)</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    method: <span class="string">"get"</span>,</span><br><span class="line">    url: <span class="string">"http://192.168.1.192:9000/ksj_api/getToken"</span>,</span><br><span class="line">    params: params</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      reject(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchPost</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//判断是否传请求类型</span></span><br><span class="line">  <span class="keyword">if</span> (!params.request_type) &#123;<span class="comment">//否</span></span><br><span class="line">    params.request_type = <span class="string">'post'</span><span class="comment">//默认为post</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//判断请求类型为post或put</span></span><br><span class="line">  <span class="keyword">if</span> (params.request_type == <span class="string">'post'</span> || params.request_type == <span class="string">'put'</span>) &#123;<span class="comment">//是</span></span><br><span class="line">    <span class="keyword">var</span> type = <span class="string">'data'</span>;<span class="comment">//以data形式传参</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;<span class="comment">//否</span></span><br><span class="line">    <span class="keyword">var</span> type = <span class="string">'params'</span><span class="comment">//以params形式传参</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//设置请求参数及类型等</span></span><br><span class="line">  <span class="keyword">let</span> httpDefaultOpts = &#123;</span><br><span class="line">    method: params.request_type,<span class="comment">//请求类型</span></span><br><span class="line">    url: url,<span class="comment">//请求链接</span></span><br><span class="line">    <span class="comment">// timeout: 20 * 1000,//请求超时时间</span></span><br><span class="line">    [type]: <span class="string">''</span>,<span class="comment">//参数</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//删除请求类型对象</span></span><br><span class="line">  <span class="keyword">delete</span> params.request_type;</span><br><span class="line">  <span class="comment">//判断参数是否data形式</span></span><br><span class="line">  <span class="keyword">if</span> (type == <span class="string">"data"</span>) &#123;<span class="comment">//是</span></span><br><span class="line">    <span class="comment">//转换为formData</span></span><br><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> params)&#123;</span><br><span class="line">      formData.append(i,params[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> token = <span class="keyword">await</span> getToken();</span><br><span class="line">    <span class="comment">//添加token</span></span><br><span class="line">    formData.append(<span class="string">"token"</span>, token.data.data.data.token);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> formData =params;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//设置请求参数值</span></span><br><span class="line">  httpDefaultOpts[type] = formData;</span><br><span class="line">  <span class="comment">//返回请求数据到promise</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//请求方法</span></span><br><span class="line">    axios(httpDefaultOpts).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(response)</span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//提示请求发生错误，请检查网络</span></span><br><span class="line">      vm.open4(<span class="string">'请求发生错误,请检查网络'</span>);</span><br><span class="line">      reject(error);<span class="comment">//请求失败数据返回</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回axios请求，名为Ajax</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  Ajax(url, params) &#123;</span><br><span class="line">    <span class="keyword">return</span> fetchPost(url, params);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面既然用到的export default导出对象。就顺便记录一下<br>JavaScript中AMD和ES6模块的导入导出对比。import，export，export default属于ES6规范。import命令具有提升效果，会提升到整个模块的头部，首先执行。import是解构过程（是在编译阶段执行的）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//output.js</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">'valueA1'</span></span><br><span class="line"><span class="keyword">export</span> &#123;a&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./output.js'</span><span class="comment">//此处的import &#123;a&#125;和export &#123;a&#125;，两个a是一一对应关系</span></span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//=&gt;valueA1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//output.js</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">'valueA1'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;a&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">'./output.js'</span><span class="comment">//此处的a和export default&#123;a&#125;，不是一个a，</span></span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//=&gt;&#123; a: 'valueA1' &#125;</span></span><br></pre></td></tr></table></figure><p>require，exports，module.exports属于AMD规范。<br>require是运行时调用.require是赋值过程.<br>在最后写一个调用这个公共axios的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cubeAxios <span class="keyword">from</span> <span class="string">"@/assets/axios/cudeAxios"</span>;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @description: 根据经纬度获取八级地址信息</span></span><br><span class="line"><span class="comment">     * @param &#123;type&#125; 参数lonlat是一个[lan,lon]</span></span><br><span class="line"><span class="comment">     * @return:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> getDivisionsByLatLon(lonlat) &#123;</span><br><span class="line">      <span class="keyword">let</span> vm = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">var</span> params=&#123;</span><br><span class="line">        request_type:cubeApi.getDivisionsByLatLon.request_type,</span><br><span class="line">        paramCodeList:<span class="string">"KJ5008"</span>,</span><br><span class="line">        coordinates:<span class="built_in">JSON</span>.stringify(lonlat)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> url = vm.cubeCommonUrl()+cubeApi.getDivisionsByLatLon.url;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        cubeAxios</span><br><span class="line">          .Ajax(url, params)</span><br><span class="line">          .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">            resolve(res);</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>往事尤存，未来可期—ZWG</title>
      <link href="/2019/03/17/%E5%BE%80%E4%BA%8B%E5%B0%A4%E5%AD%98%EF%BC%8C%E6%9C%AA%E6%9D%A5%E5%8F%AF%E6%9C%9F%E2%80%94ZWG/"/>
      <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请在下方输入您的密钥，再继续查看。" />    <label for="pass">请在下方输入您的密钥，再继续查看。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+Z4eU1MhN8C+MFXElx9klere1EDR0/qbHeFyE/6VtaERX3VSP2AK3ojK1BodVI0RnDJIYuxdilG6B01TwmkP8uThP5hQYcQRGkJ9dKwWLyvCddjysR7qXJRQVIl9uNDHiTMEMVTXgcuJ019KJl2QJLXQM2MJ0skJrgTop+Qa2ou8OFsnjxxMEzs0TZm2muQswx14NfinVZA4rtqdgOLgoCURsl93kdKaEWcFdsq3+BzO0OXathq7l8rVcobR4a8T1GD2uhaMp6zhOh8lDe43py3BFqz07DUw6EwPrr0QOtJD/J8LIhvzLEXgDV+OFBXssM0eE/4vtPUw2N71hT8jfEWhFzC9EbIMidPYBDn5xV9oEUhFdg+puBhA4w3pDExwtmt5UE+AI7GvDEjb/eG2tnkGQWutue4oWXkYpLiP3oA4awieQSdvKwAvBnPQGNi2X6dupMuMi9UcQmFmQ/KbftOAkIgLyDyGO0w9tliCNITyizXMh4ELoWM2iY2ij7lbfQCGhLouf+gCVc6xA0UYs5bR0P01qGTuYoZw1QWr4u//VfUydANiflO4tPiFu+pXZla5M7Yq9c7EupxU0ZWk1PKnQnq32tfnh8BEpsXqP7WIcT/HeB+IneQ+4KkNcw4Tu+ARM1h906HITdsh0QlxLwNYdsrgO9S5ZpTY5ctFGDbyxdyeiJD4/pt9eD3gYkykP2FIGm9qPIL3O7iGnWdaxBt+L+ZD+DuKHbCfiZu99ahf1H02IlK1DxQbch7dcp6Yqb6T4mwhdhXcb2kP7pCvSqr9HotJyZ70sy1O0xf/EZQggRaug2bkVXO+I+LkkbfzkJwVX/G5jJVBRohq5Q5ehqFJAcNlIzBUqsWDiUzBIU50SenAyOwW06MSYT7tiji3gW34qo0KqsNhWo5G/WCX7LnjIUoD6b+SJoloKrzmvLQNItgZs+ippKToVIKsgTLL4iuP5XBmGR7GnLzDEWYB0f/fRQVTBztMnMpXZ+f7ifTeuRiJMQJo2meH2XQ6tmvhmr7TZVUWICBpvhT3UV+LPPjpUwQ5pw5vUATgc1bTnyMw9jIFxoURTW2YxbuNpzRycZdqFWMt+pR8uGxQn0iKHUtZual7MC3FqLJwnmgzy6quJYS4P1DDatT4C/uwQd0l/7gdRNx5NFXOzWhKecflnATALxj/lsYr39+VTSvgMPbFmV/lcqXk8SIEdE+sLlJerTDUcxXaTTXleRGn+1VvML6PCEYF19vq419mbyoLpcDSJRw8T1a1z05ymfiZKVTI1swZV58mjG0yHZOKFfhzTbbZVMLzFosGXUBxxe8jvZZ7a4g+QnpWlMlP5cA99nMo0XuSKpLVnK69KVm3CupgT4ernB94uVh2dFC73Ice4OGVOFaSJ8xsVt3if0DxNNSvYOuAzdqVlDoe/wigglk2vSwUQe8YmXikyaOEjAB/Xdc9qkgYmuJLL2YIyPnXZz6M36Ouqr+A4mWpsOl5EQUDZI1N4REJz8tpQ2GfX7O2xwCYtzV75pOZ6oHjnpswCXZ3DbnrU80Nkz2A+APxdp+nCSQFmKE3RIE4xYYBTGUVX1EqtLBfVE/RJgeVdEpSkHOky15iW1rdQBv35WdaOs8Fmk1DvYxxxm/R8lZD6ZemeF9TVOsYDBA3FaWOgUCKrqW4dE679bsgGphAeXhwVN74pffKWqXFKYt1kYcw91lDdl+z+kN/rieSVaOlt4pVpMOSFbu0j71saJ85SXTTdMf1RgUvBjNLw5oNpkh+1ypqnHrXdOYOkVQGuuXdVpCqyruvHeWTV8/9b6ZqSPTMEy9gPwOoSqERhJmcWitnmGSxJ6T609YsvNfqa3Hff2/DtVYJX4Bpj6sXSFtRKTrttzI16mTr+SjC5zpX6Q0fAs891q4VRKYSWZ80YzZBTRF24fPNupR1FM5HqDZTWsDj8FZqexnrgxgWvxLF1ArYYm/UeOT3E1deY0+Nb0pazn8JKFyBAToVBV7CJVO4YhCWP6Uf1UnmKQvYLh4+hKuSIojiJS/Xf1RT2jg45L/YiJCUPNKGVQbjQP610KvQ+vFNff7raYWu6SPVPDgOJU2omQrnAbSX/xXjBXhDukz9b79ZVzRHU+IWQNkbQmukT8yZqn39Ha6qGWDLunFb3c6VOFobsZ2BI8r69m7khzL0KxZO0rj0Jy+TzG2tumpNXKpHidHgkZoJnt9cmwC4e/ajoci5oJTTvTdYlbiFqmIBTKOVG8FmpdIQiC1F4XoqrNCOgP8fBKD1J+Su6rG7aBm9XAZC7LaBkLCs8RMnnIRGhP3SBNOKujd4VRuIMc2VjU5flcTgtz8A4Jd+bw1TxSOHqANhv/3oRheiEuvWCrwtamFmKrUt+DVGLrpajPrBtSJfIyzjvqgP7BkyZL3gsDgFQOcoWRa8XKJD5QEVHGj2utDflzzsOwbO6tfTpV7wR40N2nSyD0FmkngwOsSSBzA0MXvzUv4gRqdnlXFuz9+v5ZFfsquLgJ3GMPVy55V5Dpg+DZuTqxatALDYuJ53mInA1c+lZgHboZXqozd6pd45icgqNH2gFYp7Z64irX8cGXZ+rnc+xaW2m8d1/5IiiszLhWib8O+MocScow32wU9ngrlPxSI1+kdOB1nIDdOwTA5XJVbXZon4NbXHJVWqq4vsQtVYWU8Ox7PdCrAkrqIfnKWzOdW9Q6V4MZdQjltT5LXFQW+yIjjxxGiHvnr9yxL0WV7aCFmuDyvFJbnNQlOGHOUYOrsk9Cnvd9wwY+L8am+A/+ecKoy56huSSIWOfypLSifWEmwVbNOQ/Ttdu/y1w7X+pNRtOYq8EDKmO7S8LIA+ID8dti+p3daNkAIMsytKedQ0a22AIzxi89rNVNThUaO4kXjdGLvdcjdDc1uXEtaSkBzSxL61B3TFDIyybClwEuifczUlaioKopi/NwSj09WulP40DvFOXZNiFeuUhhvH6Qn1LT9fLN+V2ZkWpVO7whXDqeFkf4adk+SwJbd0AxGt6i2KivtMSDjmrY5Xo1v3+E4D7vHEy894MH4u6FIkorwu4ZAhYhoA6ZmEDf1jJQhKSwQ0FmRaMQHPeDIFskS4a1KbqMb+o1P4/71sMJHLszsq3QwXQGFFPOEhd2sshCqGtQxW0nvEKxByyuMwCx1v5rvPSMvBSjoge4H1PqPD8S75xkFmxoV3S1mvw1LeDOj6L7poDT4JbSL42gHyVzh2Pys3naOKOTxhYV3M2YNndET1J6G38oKaquSCrF7528yunw7UNbRj+5oOw/IFY4W3aOaWgDn0FbEaByBnlTVB0SQQCDB5yg0lpssGgF1UzYwVL0Vrue08k7GK2TeZKVs9femIrOoPX4FY3w7DyhVopt9rNJDkMo5Qx7VNKOdl+TbeD1CNTmjspn8ft1FztyAnN2h0OyeqSf45X4884h6ZN7plXSRhvLmo5bTT+YP6H7b7myhvOYm91hBd5JkLaE8uQzUUMSNnR+diXMVrGH06lcJlEoVBhaQygV1x252ElzpH6VQKeZroLtR4ghDFMtirlFqakRbvNxuU6es5/aXMcAMyxnyMo/ASHYPBLi6mKM86aSX1ib1VBCfAnXSNrDvy+KSHfk2BK3HZqmt4tdiKgMVn7dgRwfVsCWWHvB25b0EajdUVBgqOTqfNxaZzIfRODaEdj7dZsLhAtb5TpQF4kWCCh7Csc+J4ZHxk0e+6LNVWJ6qS3+ApfYEksCuQgl1I48K8fpdGUWaR4r5eKvFfLMHvCCyf9Da5PlBOw6gMRpZMFuro8NTKD9BmTXdmw1vB50PJ4vmO+ZTHikYHJ9KifCwQRHFN/id/uxUvDMql1uK6uS8ABNi17chtiq01rVPByEfXW56pS9Co4GK61x/RyGZj/jxWQlRnuaoCJF9vG1pOJr3KLvB2Yr1B5hWuWAwA2UVlfB8giWwgOF13LEf7VFvUzevL1TCTARuGBO/aljk75KAs1b6YhtXQGX6fWpAQNwjDG4t6J5we+XpB3hRJljdXMdd2gfxIWU2jHBipGMMBm8pleoe7pjvsu2Y+ZS9Gmr1m0pB0JVWe/y/sgsyhqxBLezhHB8adxT+k9vi1L2E6DxNCa++Ey/PpQKNSqPRwgTAsFajX41lORP2SHIrrtUsei53EiP2pC/lcm5jxIAYEeRlm6dI/ksaDE4EDcATtFFPRHpV9V3wteM903OUuZQ57YU7jEVOskmLBwOI+ensUgaQmhwxiJyBEL6H3NSyu0qN/zhjxZC3VDZRE+THhGdoS1o92c25meE2SXRjfsjqSA5STF1vQv98YwCTAkeUXwyqcXiWi1WJq9UqK/tpBt/3bNSmUMCVzkMtBEnExr0L1m0E4/a/qvnESmttGTXvIoxMRzG1CjGH5wP1sFjMpPNRMGJcDht7pWSlx9YSaj1p9QofJ/vlXGhRDAHYuazX8NEPUgu3zjxRTuyZ/Vzt8LwYD65FCO6oBUmpl16/T2/bBTYkvlQSrgJ9YET2xKmhao+V4kh9S1p+DGs85Xm1qplh3f/j6OCQiUL8lSQHQ6HRLBJJaUnfQqxqVvzCM4fDqHdN6KdvYgqZfl45QHIdqQyruoMNY8g3ltlGKduUZW+6a1NCwJbU4JVBLSwrxD9zQr4h04d1nYOctnxsKOavN3lWvtPTEkR9c6KsUja0HOgoydec2eEqGLw3uDb7VMW5eJaj4+whMwjjeJ+aO4TnpF7gmAKSrvFBtgDVqGFjvy0cyS8HyblvqW8No3uXD34JNMiUafYgxoNd1jSen9YL9Uz5z5B3UANc6goSAgeyCeeWfHDdSdbrKvVNCnjPUc2LEoQm8ZAl5qurNyExsow3wiasyAov/S+DjKK5UXRpRj6KwNE6JSdYJTL4bnIoid+uaK8NmYLDiVrs8EYRTUQ1O4WZoPs1m0Tdyxv7afHl1UHnLYoYNmfx+5kwXuoInROtQHMJlXqtWq0BNVW8Qawc7fVLyCUnp2w9p340JtZB4llgHKt/kTPuuIbnKH0rA60Tr2OCS4Gs607SSkgy+4QJHAaqx5hncM9nXQwwn0L0cfl8hi7b4GmfY9mvcdPN/n7/uD1vbos3m7+lWQ3dnBIiPHLEJq1E1c1wHyocqHE2sW3e5kuFSFvLGZGx9ca+0+9jtOsimw5AIv0odygZ0tEucbrdmTJu5Zi6K2pJmhwD4PVFlUwtfMM+smUCuuczwBfMSGmNrHbuq2WAWzB5YJ6/rbLCmPQbz05hcqpiJg1QOzC47Qd9HumAAQDpXr3ySgzjBRgNqJBX+ZUmRT508O4XShrIjpXyaiJPN/e7ocyYhgk0Sx/MDG+WITASbCmedCg0nAB6balU3x33lm6HWBHu53zvjPRxeRio/yltxkByy/9xBNXUjuyrLbsKX6CVRtRfwD1RlsTl0ODyKkWR9WWw4rFpyeYvC5gkTWRO0Lsf6Yt4tK9YlFODWkh30k74YdrE7oh5oblRVge4Kr2wuy/SeKS4RCFq7bfFonxRf+LTKWViK9v/pB0aLhP3TidKX0CZWb+f8vBbVEK692nIIOqkSUmwyzXisaS6Kgn6u08cOV0IRbJSKgiF/jnq4rFvuRQko8y5/QGIXoR3Lqa/UWt+UYGGLCnHVIIj2s7qDeIy8VZc5VlhA795Y1RClFuvA/qbWIuAaj9pnSmzcHUh/KdNk7Yl/7dfFxdWMmOOMtHE6qHPtTonXSypTaltbP77UIGGYZsRCJ7/8vXPr9j+eEbdc+iDFBMgQCpd2vmvBfLLInUJjcfKzpHB6Fq4ukdDtIHmxESgru2F9nsvrZp/WuOtQVBdbImzFzK5AOX2i5CX4tMUd4KZ3k/qoA8gQY5apKEKmGuK/Z0PwNXdypXwpi9APHbQny8WzsRc/1PWDecvqyt85hiQFZTmqcht3l5GtdeKXbGU19Jjvo7+GvwI4LXABmsmsXHl4vA9ibbejrcUkHCX+Rk+5pWCX9xCzLf+9n6E7+LStAf2N+VXeCmLlgI9ye6gwXZsKsxjPuxSFwM</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> 随笔生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浏览器indexDB的使用</title>
      <link href="/2019/03/11/%E6%B5%8F%E8%A7%88%E5%99%A8indexDB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <content type="html"><![CDATA[<p>本地存储介绍一下HTML5时代带来的本地化存储技术， localStorage 、sessionStorage、WebSQL、indexedDB等.</p><ul><li>localStorage 用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</li><li>sessionStorage 用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。</li><li>cookie数据始终在同源的http请求中携带(即使不需要)，即cookie在浏览器和服务器间来回传递。<a id="more"></a></li><li>IndexedDB 允许储存大量数据，提供查找接口，还能建立索引。这些都是 LocalStorage 所不具备的。就数据库类型而言，IndexedDB 不属于关系型数据库（不支持 SQL 查询语句），更接近mongodb数据库。</li></ul><p>我目前编写Vue项目中用于存储数据字典等。下面就是创建,获取，更新，写入等基本操作。<br>编写公共方法，并注册到Vue的生命周期中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">install(Vue) &#123;</span><br><span class="line">        <span class="comment">//定义一个vue的全局变量，用于获取创建indexdb的生命周期</span></span><br><span class="line">        Vue.prototype.db=<span class="literal">null</span>;</span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * @description: 初始化浏览器的indexdb数据库</span></span><br><span class="line"><span class="comment">         * @param &#123;type&#125; </span></span><br><span class="line"><span class="comment">         * @return: </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Vue.prototype.initIndexDB = <span class="function">(<span class="params">callback</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * @description: //创建数据库，第一个是数据库名,第二个是数据库的版本号</span></span><br><span class="line"><span class="comment">             * @param &#123;type&#125; </span></span><br><span class="line"><span class="comment">             * @return: 同时返回一个IDBOpenDBRequest对象用于操作数据库</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">const</span> request = <span class="built_in">window</span>.indexedDB.open(<span class="string">'myDatabase'</span>, <span class="number">1</span>);</span><br><span class="line">            request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(event,<span class="string">'数据库打开报错'</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">//数据库升级触发的事件，创建数据库也会触发这个事件</span></span><br><span class="line">            request.onupgradeneeded = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(event,<span class="string">"onupgradeneeded"</span>)</span><br><span class="line">                Vue.prototype.db = event.target.result;</span><br><span class="line">                <span class="comment">//新建数据库以后，第一件事是新建对象仓库，先判断是否存在</span></span><br><span class="line">                <span class="keyword">if</span> (!Vue.prototype.db.objectStoreNames.contains(<span class="string">'person'</span>)) &#123;</span><br><span class="line">                  objectStore = Vue.prototype.db.createObjectStore(<span class="string">'person'</span>, &#123; <span class="attr">keyPath</span>: <span class="string">'id'</span> &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">                Vue.prototype.db = request.result;</span><br><span class="line">                <span class="built_in">console</span>.log(Vue.prototype.db,<span class="string">'数据库创建成功'</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">typeof</span> callback === <span class="string">'function'</span>)&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'执行回调成功'</span>);</span><br><span class="line">                    callback();</span><br><span class="line">                  &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>在App.vue去调用这个公共方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"App"</span>,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="comment">//创建indexdb数据库</span></span><br><span class="line">    <span class="keyword">this</span>.initIndexDB(<span class="keyword">this</span>.initFun);</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @description: 初始化方法</span></span><br><span class="line"><span class="comment">     * @param &#123;type&#125;</span></span><br><span class="line"><span class="comment">     * @return:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    initFun() &#123;</span><br><span class="line">      <span class="keyword">let</span> vm = <span class="keyword">this</span>;</span><br><span class="line">      vm.getUploadData().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(vm.db);</span><br><span class="line">        <span class="comment">//向对象仓库写入数据记录。通过事务完成。</span></span><br><span class="line">        <span class="keyword">let</span> objStore = vm.db</span><br><span class="line">          .transaction([<span class="string">"person"</span>], <span class="string">"readwrite"</span>)</span><br><span class="line">          .objectStore(<span class="string">"person"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">        <span class="keyword">let</span> data = &#123; <span class="attr">name</span>: <span class="string">"oouyang"</span>, <span class="attr">age</span>: <span class="number">17</span>, <span class="attr">id</span>: <span class="string">"3"</span> &#125;;</span><br><span class="line">        <span class="comment">//查询数据</span></span><br><span class="line">        <span class="keyword">let</span> getRequest = objStore.get(<span class="number">4</span>);</span><br><span class="line">        getRequest.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (getRequest.result) &#123;</span><br><span class="line">            <span class="comment">//如果存在g更新数据</span></span><br><span class="line">            <span class="keyword">let</span> updateRequest = objStore.put(&#123; <span class="attr">id</span>: <span class="number">4</span>, ...res.data &#125;);</span><br><span class="line">            updateRequest.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">"数据更新成功"</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            updateRequest.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">"数据更新失败"</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果不存在，写入数据</span></span><br><span class="line">            <span class="keyword">let</span> insertRequest = objStore.add(&#123; <span class="attr">id</span>: <span class="number">4</span>, ...res.data &#125;);</span><br><span class="line">            insertRequest.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">"数据写入成功"</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            insertRequest.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">"数据写入失败"</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        getRequest.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"获取数据事务失败"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @description: 获取数据</span></span><br><span class="line"><span class="comment">     * @param &#123;type&#125;</span></span><br><span class="line"><span class="comment">     * @return:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    getUploadData() &#123;</span><br><span class="line">      <span class="keyword">let</span> vm = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        axios(&#123;</span><br><span class="line">          method: <span class="string">"get"</span>,</span><br><span class="line">          url: <span class="string">"http://39.108.100.163:8082/upload/getUploadByLimit"</span></span><br><span class="line">        &#125;)</span><br><span class="line">          .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(res);</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.db) &#123;</span><br><span class="line">      <span class="keyword">this</span>.db.close();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"断开连接缓存数据库！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>二月三天法定假日的瞎想</title>
      <link href="/2019/03/03/%E4%BA%8C%E6%9C%88%E4%B8%89%E5%A4%A9%E6%B3%95%E5%AE%9A%E5%81%87%E6%97%A5%E7%9A%84%E7%9E%8E%E6%83%B3/"/>
      <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>————趁着2月29.30.31连着3天假期。博主非要我写点东西。</p><p>当前时间：二月二十八日晚。<br>    最后一次看见小波是在去年十月，当小波从网吧的门口走进来的时候，我还在操作着狐狸大杀特杀，手机貌似还在和小波通话，一边说你是傻*吗，我在网吧里面点，快过来，一边手上动作不停，用狐狸放着REQ。“这游戏真心带不动，认真点好吗！”。当时身边还有地信最丑，ZMN，和Energy。<br> <a id="more"></a><br>   小波刚走过来，我们打出了GG，这局游戏自然是输了。好在，我们已经习惯了这种输输输的节奏。<br>   这时我才抬头大量小波，眼镜换成了圆框的，金色边，戴了个鸭舌帽，瘦瘦的，脖子上挂了个耳机，背个书包，一副年轻上班族的样子。一年多不见，当真也是变得人模狗样，没有了那种给人下句话就是：“老雍，我感觉我真的有点屌！”的感觉。<br>     这时我很想起立给小波一个熊抱，毕竟上一次的分离就是拥抱。但是一看小波嬉皮笑脸的样子，算了，着实浪费感情。好像然后一起开了游戏。打吧打吧，吃了饭。后来怎么样，我已记不清楚。<br>     正如记不清楚后来的事情，其实当时见面的情况。<br>     我亦是记不住的，上面只是我的模拟，以及和小波平日里相处杜撰出来的。换了眼镜也是今晚开视频我才注意到，鸭舌帽是在大学就经常带，耳机是后面借给我用我才记得，身体瘦是一直都这样。<br>    印象中的小波是这样的，今天开视频看见也是这样，想来那次见面应该也是这样。<br>  和小波相处是件让人愉悦的事情，无他。<br>  因为人在与比自己笨的人相处的时候，自然会更容易愉悦一点。</p><p>   我和小波相识于大学。<br>        那是一个晴朗/下雨/阴云密布/刮风/打雷的早上/中午/晚上/夜晚。<br>        开玩笑的，我怎么可能记得什么时间怎么认识他的？？</p><p><strong>小波自然也早就忘得一干二净。</strong></p><h3 id="我们的认识。"><a href="#我们的认识。" class="headerlink" title="我们的认识。"></a>我们的认识。</h3><p>   就好像生活中很多事一样，自然而然就发生了。就如同吃饭睡觉学习上学毕业恋爱失恋求职辞职被辞旅游遇见分别升级掉段，一切是那么自然，又是那么的应该，貌似我们就应该认识，所以就认识了，该分离了，自然就分离了，至于小波为什么觉得我很好，我不知道，可能大部分原因是他觉得他比我帅吧，当然只是他觉得。就好比他觉得我大学四年一直喜欢同一个女同学。<br>    大学生活，小波具体怎么和我一起度过的我是真的记不清楚了。没有过多的火花，也没有过多的悲伤。他的存在如同水一般自然，一开始觉得挺蠢的，到最后，依然觉得还是挺蠢的。<br>        有一次：<br>        把银行电话留成地信最丑，说“以后银行打电话就不会找到自己。”<br>        有两次：<br>        用自以为最帅的转身，做了最丑的上篮动作。<br>        有三次：<br>        操作着豹女当救世主。说，我真的觉得自己挺帅的。<br>        有四次：<br>        自己谈恋爱，出去玩，就会瞎逼动，不干正事。当然用他的话说这是个好人才会做的事。<br>        有五次：<br>        我们一起吃饭喝酒，小波永远是一开始一直吃饭，不喝不喝，这几天胃真的难受，待到大家都你来我往差不多了，小波突然声音大了起来：别趴着，起来继续啊。来干。<br>        仅有的一次，临近毕业：<br>        我们俩在酒店外面，找了个台阶，坐了下来，小波抱着我哭。小波一边哭一边对我：“雍，我TM每次看见你XXXXXXXX，我就想不通，你把我们当什么？？”<br>        这里的XXX是我真的不知道他说了啥。<br>        惊了，怎么突然GAYGAY的。毕业酒会良好的氛围都被搞没了？？<br>        宫斗戏的既视感？？<br>        只是，当时已经来不及细想。<br>        我已是泪流满面，<br>        我俩抱头痛哭，几年来未流过的泪水像夏日的烈阳，辣、烫、灼。<br>        我一边哭一边忍着酒味把小波的一些东西记录在了手机备忘录。<br>        日后翻看，只记了一句。如下：<br>        “小波讲的一定要记下来。”日期是2017年5月13日。至于小波讲了的话，一句没记。这个备忘录至今还留在我的手机里。<br>        我不知道这算不算是男人之间的浪漫。<br>        可能当时小波也是一句没讲，和我一样只记得哭了。我以为他讲了很多，也只是我的杜撰罢了。<br>        至于酒会之后的事情，我已是记不清楚。</p><h3 id="分离真的是个狠人"><a href="#分离真的是个狠人" class="headerlink" title="分离真的是个狠人"></a>分离真的是个狠人</h3><p>  行笔至此，我已经很难再写下去了。<br>        于是乎，世界也很理解我，时间迅速的到达了三月一日的晚上。<br>        三天假期一晃而过，今夜的我又开始了写。<br>        时间又过，今天已经是3月2号的夜晚。<br>        和小波玩了几局游戏，很久没打了。但是自己的水平还是一如既往的稳定，让我很是欣慰。<br>        不知怎的，满脑子是送离小波的情形。</p><p>   那是2017年5月31日，下过雨的天，下过雨的地面，还在翻修的学校。<br>        和我一起去送的还有地信最丑，TY。<br>        一路无话，校门口。<br>        公交车来了。<br>        小波突然说：好像真的要说再见了。<br>        红了眼眶。<br>        拥抱。<br>        上了公交。</p><p>   迄今记得那晚，我们都喝多了，互相说了许多肝胆相照的话，也都哭了。<br>        偶有闲时，很怀念。</p><p>   以上都是这几夜的牢骚。</p><p>  <strong>雍，于2019年3月，一个晴朗的晚上。</strong></p>]]></content>
      
      <categories>
          
          <category> 随笔生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018年终总结</title>
      <link href="/2019/01/01/2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请在下方输入您的密钥，再继续查看。" />    <label for="pass">请在下方输入您的密钥，再继续查看。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX18u9mbArDL7yX2k7YFc6mMEg/+0Wadg+/xprI8A1c1k4hgqcEsp/38UcDpIJSX/tVT0Dd61D9BTPizfwRMCjBhFkncE+yBjRUpygZs1O7cchttmREkF0/VcpkCRdFJsBCjWXmChJgwoqfnHVaMAh1VMdCCVDPfT/5niEHp+kh0BSycwKjL2KMkrjvFxfaMvARxA49QAozbpJvmTtCkNT5YiMHgH7tAIrxev25Tsgey+KJvFOQ7hoBtmWj5FgZ/YYH3/THCyMDbEsr610xVPSSNLseKMFxaNh9JiFhVoyihpotJDCIZeRlT5lCD+nibxs8W5KiohIgArg8R7ZtvglRrOgsl9hRVCnM4nQrROgQr/UuYQabWDwteY8aL0bS9fDVhUjaD3UliQ9giSa45fAY2NoOhicwxUqtekUhdhgd9n97gLyXSsR4pltYBn7GLZsCuqEUmWz7BvDJH1TEL30Fb80YrW6Qkh2xr6GQBRRACT1tVqUlycorjPf+ioyt77hvrWpGr3NIaQgm+WG2ofK9zxESlSFMX/eQbDx2xrYM2C6yYTLLT8SPBKI4nwEi1KmSn0pybNQ3T1iUh57ZAEuGLmk0NbFXjSmLfAXzVIs41kCFJ+LfGSxNvM70DDbroPuZNXF0551YR6i/WMJsx0cGNVATljWslGC2xU5UOAemWcGYc9El+wC1Q8t56c3I5zct2gHDCkMwUy2EtLNZkX20H35MQdwFLEBf7fbJYNLbCfTyCmwi3JxvCh/9T1HcKRy5pzWVuyizCJPApNjNMmjaJr/HmCsHh/uL6g7vcccQ350LEXTcp07q6sMYPRBwjVRE5PfoGf3EKc02u9vdpNZSqIbID6jTH5mkc6lkiAe88unlL9WFMysiSPzaTAQMbCYFwXzURIrSqFyAOAAhRDl6zXvzo80xR6GzKHd8RzO9/T9COUsN5O3zcziBzTo8XTk+ko6fIb7qgj1+TX+Yf3ntodUV4UMMNM0h/lT07R12PUZhiStLtRv14rFS1K0Mb4V2a+5vjYuGa7nynXATqnBX7IccGHPO2+PCndao4pYmpVTSBI+r2F4NFEK+TEsujQ8A2qe8OxQgJGW/XPG0XqqgaES8ih+80pvKcPEDvfe1iFl4rH0eba9lgkSzxrFdZgdZaHGt3Zh5e3u/hmM5sEI5J6j3BMo6T/So8Rre9ocFi5/KZ0MUwkCdoSYR5dyW/4z8u/B1ZXhmpaI1K1HTkjR/PsuI+LRhHFadxO+6DeKO0lLAYeaOlNCK98bM5+CiZz8nohjm5JbAJoL0I7GtwHfEVxBg9RrvfFOGHLk3WltDiroMKp77XuTYylOtLSnApSCFs+UUOfFUmutZB/O2V9Skm/ewdGkp2dY/8rTM5p1S/7C3KR+GtqCpqQBepCAfUzoExdtUsQSNr+dSLwipndua/5IyU6NpqICj8FChNGbsuwnXy3XtSyeqCCJ2nd0Q7lfyZ9NUU8hS/xuz+0Cy8LFNG/ntWeFcy/Z7MyLFHoss6Wer6TnQsjj6qhQqcMxncLObPEAqZGbVjOmTrgfYL7/b4+T7lhGtyR8Vdyhy9p5UB9vkIAXowxAeSFeDxyfKzXJ0sVnH68udLYmK8goaCfEdKCwX6pU4HMGt7WhTCfdzBTzRdrAsuqOFnNVAKxxWyGf2VuWgj2eTpuXglrrS/af/rdJUBWlF24E6F/124Eo3I81GaXHRyyBU5kHFpR56LFz1Qj6rJLsSvDXVoDIq3YqlFbKhPhYo8Tjpi83j9oOtclzJjOywJ0jbc+HRBite4q705bwTO2jykn8xIuYMLn1hNID9skZSyrbjKrEUBXl8cjgMnzyUteieRX2/LDzuxcIxtxZlId1h88iXUDYC8BwNoXFIzn7xAuvutIWqDNRsYXwCGGayaVEvdx/kafvbNLjiVEk1OSd8UewPszFUCIjQkKDRoPNSQm5Bv9meFenYuZTD4bKW1/3c+Hs+UDaqIrLv2ws2QDxzFpr6pH//Tev24eWrk1Yp0p3z1COSo48K0WNZToTjK3USo1d1Wm8TrzMj6GmOx1hMd0c0BQNzljE2Aly4Xnxm9xi9cQBdVkeJZN5O9Dy/SkEx+ysS7te/ivV8EidOCPnL3/oZaTUNu7hH5BWHUn8kU9DnU/VKNqZ3o00gzpoH7APyApW/Y8U7l4od09b/LYQ5edcckq9wNLalUVk3E99BxMhBhd6FpZA++VvgQVuiysksMiwdy/oyg98ePD4tn/JS6qVQcUn/dgeJYKhoDvc/WvIw6gre9bCxHd5JibYh8PP8MYvW10qvksO8KCsq6WT2bGH0P7fvTC/yWZmtizEK3Q1Nve32GO5I6GZQSP0uMKNTip2+NNfSZBoXXVNNEjpaIwdjPZxc32duakGbkbRjolLYERUDZ3CkBJLLrCeJFLxEgsoaWObzJcWrvGpYv/P7P/O86tY6Pdt/mjBgEtWpyYwywk0GC4Io7gBG1zO1Tt+DS8+189EaOZfL8l+5lDqSVGJcj+j7XBtdgVJkJTWvTqRBqOIHHQwyo1Th2V0hsQzuG/pAJluuddtRQdYpcfmeW0ch7ZaZN8UkWzZ6jKDFMbTyZCyNQWKtTTEkg1X1LQnjACBd0gB11moTimUjizz4HTr67NnMUCcuaUr2TPruGLyVXphyWOjmv5IwsiUIIftRhGkiBkCMYuRAg1aTrm6hgvLlDvhle5A9cwkLkWgBAg69jorDsQSZDWJ2F85mlsuf1LoOuX91eFNMYEaW6exZARzhm2EHqspV7P782LPuiYzptfrbstgduWu/2kO8xGXn5fApdhaO0A99ZLc43JixkmmaubrXuHWDg4SYmxuyOW3lj6oryrTKkezbK1eLvOaNMzkFj8t/UHMQFOZs9QRGU7+eF8j7PKVAECYaI6G4ywUL348KKHstuVZC7sZ6j2VGP8W2EU8gQrYVqS7kYXBLinP8L4dsTumCGjQK5CsavG+tCssYmSPNGo84P8M01ROWPI</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> 随笔生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>造塑料轮子至npm</title>
      <link href="/2018/12/22/%E9%80%A0%E5%A1%91%E6%96%99%E8%BD%AE%E5%AD%90%E8%87%B3npm/"/>
      <content type="html"><![CDATA[<p>maptalks插件库里面也有一个<a href="https://github.com/maptalks/maptalks.routeplayer" target="_blank" rel="noopener">VectorLayer</a>.但是我们后台路径数据没有提供里面的time属性。所以自己写了一个实现类型功能的插件。为方便使用，发布到npm中。<br><a id="more"></a></p><h3 id="编写功能"><a href="#编写功能" class="headerlink" title="编写功能"></a>编写功能</h3><p><code>npm init</code> 一路到底。编写<code>index.js</code>也就是插件的功能代码，<br><a href="https://github.com/OuYangResume/routermove/blob/master/index.js" target="_blank" rel="noopener">详细代码</a>已上传到我的github中。<br>设置<code>git repository</code>仓库地址和<code>keywords</code>关键字作为这个包的索引。</p><h3 id="README文档"><a href="#README文档" class="headerlink" title="README文档"></a>README文档</h3><p><a href="https://github.com/OuYangResume/routermove" target="_blank" rel="noopener">文档</a><br>什么效果–怎么安装依赖–怎么使用–还有API。</p><h3 id="设置npm账号"><a href="#设置npm账号" class="headerlink" title="设置npm账号"></a>设置npm账号</h3><p>首先，要在npm发布包，首先得注册一个账号（记得邮箱认证），与github一样，npm对于公共包是免费的。<br>第二步，添加账号。输入命令<code>npm adduser</code>，然后键入你在npm上注册的账号和密码。另外，<code>npm config ls</code>可以查看你的npm配置。</p><p>接下来，使用<code>npm publish</code>就可以发布你的包了。发布与更新都是使用<code>npm publish</code>    命令，更新必须修改版本信息。</p><h3 id="packages"><a href="#packages" class="headerlink" title="packages"></a>packages</h3><p><a href="https://www.npmjs.com/settings/oouyang/packages" target="_blank" rel="noopener">我的npm</a><br>还有很多需要学习，es6转es5。babel配置不好导致github上demo失败。</p>]]></content>
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端常见设计模式</title>
      <link href="/2018/12/11/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p><code>设计模式</code>听起来像很是高端的样子，其实呢，确实很提莫难啊啊啊啊。言归正传，所谓的设计模式也就是一些比较优秀的编程思想。有了这些思想加于利用到实际开发中，可以减少工作量（便于维护）。废话不多说直接进入主题。<br><a id="more"></a></p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂模式，顾名思义，就是为了创造对象。也就是一些公共方法？？？<br>工厂模式最重要的优点是：可以在父类实现一些相同的方法，而具体要实现的业务逻辑可以放在子类中，通过子类重写父类的方法，去实现自己的业务逻辑,减少冗余代码。</p><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CarFactory</span> (<span class="params">brand, price</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> car = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">            car.brand = brand;</span><br><span class="line">            car.price = price;</span><br><span class="line">            car.getPrice = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.price;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> car;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> car1 = CarFactory(<span class="string">"牌子A"</span>, <span class="number">10000</span>);</span><br><span class="line">        <span class="keyword">var</span> car2 = CarFactory(<span class="string">"牌子B"</span>, <span class="number">20000</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(car1)); <span class="comment">// &#123;"brand":"牌子A","price":10000&#125;</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(car2)); <span class="comment">// &#123;"brand":"牌子B","price":20000&#125;</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> car1); <span class="comment">// object</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> car2); <span class="comment">// object</span></span><br><span class="line">        <span class="built_in">console</span>.log(car1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>函数CarFactory接受两个参数brand, price，最终返回一个对象。如果多次调用这个函数，每次将返回一个新的对象，这就跟工厂的生产线一样。</p><h4 id="复杂工厂模式"><a href="#复杂工厂模式" class="headerlink" title="复杂工厂模式"></a>复杂工厂模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ComplexCarFactory</span>(<span class="params">brand, price</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.brand = brand;</span><br><span class="line">            <span class="keyword">this</span>.price = price;</span><br><span class="line">        &#125;</span><br><span class="line">        ComplexCarFactory.prototype = &#123;</span><br><span class="line">            <span class="keyword">constructor</span>: ComplexCarFactory,</span><br><span class="line">            sellCar: function()&#123;</span><br><span class="line">                <span class="keyword">var</span> speed = <span class="keyword">this</span>.getSpeed(<span class="keyword">this</span>.brand);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.brand + <span class="string">'的车子售价：'</span> + <span class="keyword">this</span>.price + <span class="string">'元人民币，限速'</span> + speed + <span class="string">'公里每小时'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            getSpeed : <span class="function"><span class="keyword">function</span>(<span class="params">brand</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"父类是抽象类不能直接调用，需要子类重写该方法"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> CarChild = <span class="function"><span class="keyword">function</span>(<span class="params">brand, price</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.brand = brand;</span><br><span class="line">            <span class="keyword">this</span>.price = price;</span><br><span class="line">            <span class="comment">// 继承构造函数父类中的属性和方法</span></span><br><span class="line">            ComplexCarFactory.call(<span class="keyword">this</span>, brand, price);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 子类继承父类原型方法</span></span><br><span class="line">        CarChild.prototype = <span class="built_in">Object</span>.create(ComplexCarFactory.prototype);</span><br><span class="line">        <span class="comment">// CarChild 子类重写父类的方法</span></span><br><span class="line">        CarChild.prototype.getSpeed = <span class="function"><span class="keyword">function</span>(<span class="params">brand</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> speed = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(brand === <span class="string">'牌子C'</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">50</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> car3 = <span class="keyword">new</span> CarChild(<span class="string">"牌子C"</span>, <span class="number">3000</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(car3); <span class="comment">// CarChild &#123;brand: "牌子C", price: 3000&#125;</span></span><br><span class="line">        <span class="built_in">console</span>.log(car3.sellCar()); <span class="comment">// 牌子C的车子售价：3000元人民币，限速50公里每小时</span></span><br></pre></td></tr></table></figure><p>ComplexCarFactory为父类，CarChild为子类，CarChild继承自ComplexCarFactory。<br>ComplexCarFactory不在进行对象实例化，只对创建过程中的一般性问题进行处理，ComplexCarFactory就像是Java中的抽象类，必须被子类重写，否则调用ComplexCarFactory的getSpeed方法时就会抛出异常。<br>CarChild继承自ComplexCarFactory，同时重写了父类的方法，CarChild类实例后的对象之间是相互独立的，具体的业务逻辑会放在子类中进行编写。</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式思想在于保证一个特定类仅有一个实例，意味着当你第二次使用同一个类创建信对象时，应得到和第一次创建对象完全相同。<br>单例模式在我们平时的应用中用的比较多的，相当于把我们的代码封装在一个起来，只是暴露一个入口，从而避免全部变量的污染。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取实例对象</span></span><br><span class="line"><span class="keyword">var</span> getInstance = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 测试单例模式的实例</span></span><br><span class="line"><span class="keyword">var</span> a = getInstance(<span class="string">"aa"</span>);</span><br><span class="line"><span class="keyword">var</span> b = getInstance(<span class="string">"bb"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b.getName()); <span class="comment">// "aa"</span></span><br><span class="line"><span class="built_in">console</span>.log(a === b);     <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>实现一个单例模式，无非就是使用一个变量来标识该类是否被实例化，如果未被实例化的话，那么我们可以实例化一次，否则的话，直接返回已经被实例化的对象。</p><h3 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h3><p>模块模式是为单例模式添加私有变量和私有方法，并减少全局变量的使用；<br>使用场景，创建一个对象时，需要进行内部初始化，同时对内部属性跟方法有访问权限限制，就需要使用模块模式了。<br>如下就是一个模块模式的代码结构：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> singleMode = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 创建私有变量</span></span><br><span class="line">    <span class="keyword">var</span> privateNum = <span class="number">112</span>;</span><br><span class="line">    <span class="comment">// 创建私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateFunc</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    <span class="comment">// 创建公有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">publicMethod1</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">publicMethod2</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    <span class="comment">// 返回一个对象包含公有方法和属性</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        publicMethod1: publicMethod1,</span><br><span class="line">        publicMethod2: publicMethod2</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>模块模式使用了一个返回对象的匿名函数。在这个匿名函数内部，先定义了私有变量和函数，供内部函数使用，然后将一个对象字面量作为函数的值返回，返回的对象字面量中只包含可以公开的属性和方法。这样的话，可以提供外部使用该方法；由于该返回对象中的公有方法是在匿名函数内部定义的，因此它可以访问内部的私有变量和函数。</p><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>代理模式的优点在于：代理对象可以代替本体对象被实例化，此时本体对象未真正实例化，等到合适时机再实例化。代理模式可以延迟创建开销很大的本体对象，他会把本体的实例化推迟到有方法被调用时。</p><h4 id="图片加载"><a href="#图片加载" class="headerlink" title="图片加载"></a>图片加载</h4><p>使用图片是非常常见的场景，如果直接给img标签设置src属性，如果图片过大，或网速比较慢，图片在加载过程中会有一段时间的空白，用户体验不好。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(imgNode);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">            imgNode.src = src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 代理模式</span></span><br><span class="line"><span class="keyword">var</span> ProxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        myImage.setSrc(<span class="keyword">this</span>.src);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">        myImage.setSrc(<span class="string">"http://img.lanrentuku.com/img/allimg/1212/5-121204193R0.gif"</span>);</span><br><span class="line">        img.src = src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 调用方式</span></span><br><span class="line">ProxyImage.setSrc(<span class="string">"https://www.baidu.com/img/bd_logo1.png"</span>);</span><br></pre></td></tr></table></figure><p>myImage 函数只负责做一件事，创建img元素加入到页面中，其中的加载loading图片交给代理函数ProxyImage 去做，当图片加载成功后，代理函数ProxyImage 会通知及执行myImage 函数的方法，同时当以后不需要代理对象的话，我们直接可以调用本体对象的方法即可。</p><h4 id="缓存代理"><a href="#缓存代理" class="headerlink" title="缓存代理"></a>缓存代理</h4><p>对第一次运行的结果进行缓存，当再一次运行相同运算的时候，直接从缓存里面取，避免重复运算，如果运算非常复杂的话，对性能很耗费，那么使用缓存对象可以提高性能。以下是一个简单的例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,ilen = <span class="built_in">arguments</span>.length; i &lt; ilen; i+=<span class="number">1</span>) &#123;</span><br><span class="line">        a = a*<span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 计算加法</span></span><br><span class="line"><span class="keyword">var</span> plus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,ilen = <span class="built_in">arguments</span>.length; i &lt; ilen; i+=<span class="number">1</span>) &#123;</span><br><span class="line">        a += <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代理函数</span></span><br><span class="line"><span class="keyword">var</span> proxyFunc = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cache = &#123;&#125;;  <span class="comment">// 缓存对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>,<span class="string">','</span>);</span><br><span class="line">        <span class="keyword">if</span>(args <span class="keyword">in</span> cache) &#123;</span><br><span class="line">            <span class="keyword">return</span> cache[args];   <span class="comment">// 使用缓存代理</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cache[args] = fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> proxyMult = proxyFunc(mult);</span><br><span class="line"><span class="built_in">console</span>.log(proxyMult(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)); <span class="comment">// 24</span></span><br><span class="line"><span class="built_in">console</span>.log(proxyMult(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)); <span class="comment">// 缓存取 24</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyPlus = proxyFunc(plus);</span><br><span class="line"><span class="built_in">console</span>.log(proxyPlus(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>));  <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(proxyPlus(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>));  <span class="comment">// 缓存取 10</span></span><br></pre></td></tr></table></figure></p><h3 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h3><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p> 一、策略模式可以有效避免很多if条件语句 二、策略模式符合开放-封闭原则，使代码更容易理解和扩展 三、策略模式中的代码可以复用.<br>表单检验是非常常见的功能。因为涉及到大量的验证规则，使用策略模式会非常便利。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 策略对象</span></span><br><span class="line"><span class="keyword">var</span> strategys = &#123;</span><br><span class="line">    isNotEmpty: <span class="function"><span class="keyword">function</span>(<span class="params">value,errorMsg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(value === <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> errorMsg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 限制最小长度</span></span><br><span class="line">    minLength: <span class="function"><span class="keyword">function</span>(<span class="params">value,length,errorMsg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(value.length &lt; length) &#123;</span><br><span class="line">            <span class="keyword">return</span> errorMsg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 手机号码格式</span></span><br><span class="line">    mobileFormat: <span class="function"><span class="keyword">function</span>(<span class="params">value,errorMsg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test(value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> errorMsg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> Validator = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cache = [];  <span class="comment">// 保存效验规则</span></span><br><span class="line">&#125;;</span><br><span class="line">Validator.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">dom,rules</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, rule; rule = rules[i++]; )&#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">rule</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> strategyAry = rule.strategy.split(<span class="string">":"</span>);</span><br><span class="line">            <span class="keyword">var</span> errorMsg = rule.errorMsg;</span><br><span class="line">            self.cache.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> strategy = strategyAry.shift();</span><br><span class="line">                strategyAry.unshift(dom.value);</span><br><span class="line">                strategyAry.push(errorMsg);</span><br><span class="line">                <span class="keyword">return</span> strategys[strategy].apply(dom,strategyAry);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)(rule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Validator.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, validatorFunc; validatorFunc = <span class="keyword">this</span>.cache[i++]; ) &#123;</span><br><span class="line">    <span class="keyword">var</span> msg = validatorFunc(); <span class="comment">// 开始效验 并取得效验后的返回信息</span></span><br><span class="line">    <span class="keyword">if</span>(msg) &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 代码调用</span></span><br><span class="line"><span class="keyword">var</span> registerForm = <span class="built_in">document</span>.getElementById(<span class="string">"registerForm"</span>);</span><br><span class="line"><span class="keyword">var</span> validateFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> validator = <span class="keyword">new</span> Validator(); <span class="comment">// 创建一个Validator对象</span></span><br><span class="line">    <span class="comment">/* 添加一些效验规则 */</span></span><br><span class="line">    validator.add(registerForm.userName,[</span><br><span class="line">        &#123;<span class="attr">strategy</span>: <span class="string">'isNotEmpty'</span>,<span class="attr">errorMsg</span>:<span class="string">'用户名不能为空'</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">strategy</span>: <span class="string">'minLength:6'</span>,<span class="attr">errorMsg</span>:<span class="string">'用户名长度不能小于6位'</span>&#125;</span><br><span class="line">    ]);</span><br><span class="line">    validator.add(registerForm.password,[</span><br><span class="line">        &#123;<span class="attr">strategy</span>: <span class="string">'minLength:6'</span>,<span class="attr">errorMsg</span>:<span class="string">'密码长度不能小于6位'</span>&#125;,</span><br><span class="line">    ]);</span><br><span class="line">    validator.add(registerForm.phoneNumber,[</span><br><span class="line">        &#123;<span class="attr">strategy</span>: <span class="string">'mobileFormat'</span>,<span class="attr">errorMsg</span>:<span class="string">'手机号格式不正确'</span>&#125;,</span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">var</span> errorMsg = validator.start(); <span class="comment">// 获得效验结果</span></span><br><span class="line">    <span class="keyword">return</span> errorMsg; <span class="comment">// 返回效验结果</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 点击确定提交</span></span><br><span class="line">registerForm.onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> errorMsg = validateFunc();</span><br><span class="line">    <span class="keyword">if</span>(errorMsg)&#123;</span><br><span class="line">        alert(errorMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布-订阅模式"></a>发布-订阅模式</h3><p>发布—订阅模式又叫观察者模式，它定义了对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。<br>eg:假设小🐶看上了一双鞋子，但该鞋子已经断货了，卖家承诺她到货通知。与此同时，小🐷、小🐒也关注了这双鞋子。<br>在这个场景中，卖家就是发布者，小🐶，🐷，🐒等人都属于订阅者。当鞋子到货时，会依次通知到每个人。<br>实现：<br>1.首先要想好谁是发布者(比如上面的卖家)。<br>2.然后给发布者添加一个缓存列表，用于存放回调函数来通知订阅者(比如上面的买家收藏了卖家的店铺，卖家通过收藏了该店铺的一个列表名单)。<br>3.最后就是发布消息，发布者遍历这个缓存列表，依次触发里面存放的订阅者回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = &#123;&#125;,</span><br><span class="line">          listen,</span><br><span class="line">          trigger,</span><br><span class="line">          remove;</span><br><span class="line">          listen = <span class="function"><span class="keyword">function</span>(<span class="params">key,fn</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!list[key]) &#123;</span><br><span class="line"><span class="comment">// 如果还没有订阅过此类消息，给该类消息创建一个缓存列表</span></span><br><span class="line">                list[key] = [];</span><br><span class="line">            &#125;</span><br><span class="line">            list[key].push(fn); <span class="comment">// 订阅消息添加到缓存列表</span></span><br><span class="line">        &#125;;</span><br><span class="line">        trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>), <span class="comment">// 取出消息类型名称</span></span><br><span class="line">                 fns = list[key]; <span class="comment">// 取出该消息对应的回调函数的集合</span></span><br><span class="line"><span class="comment">// 如果没有订阅过该消息的话，则返回</span></span><br><span class="line">            <span class="keyword">if</span>(!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, fn; fn = fns[i++];) &#123;</span><br><span class="line">                fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>); <span class="comment">// arguments 是发布消息时附送的参数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        remove = <span class="function"><span class="keyword">function</span>(<span class="params">key,fn</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 如果key对应的消息没有订阅过的话，则返回</span></span><br><span class="line">            <span class="keyword">var</span> fns = list[key];</span><br><span class="line"><span class="comment">// 如果没有传入具体的回调函数，表示需要取消key对应消息的所有订阅</span></span><br><span class="line">            <span class="keyword">if</span>(!fns) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!fn) &#123;</span><br><span class="line">                fns &amp;&amp; (fns.length = <span class="number">0</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = fns.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">                    <span class="keyword">var</span> _fn = fns[i];</span><br><span class="line">                    <span class="keyword">if</span>(_fn === fn) &#123;</span><br><span class="line">                        fns.splice(i,<span class="number">1</span>);<span class="comment">// 删除订阅者的回调函数</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            listen: listen,</span><br><span class="line">            trigger: trigger,</span><br><span class="line">            remove: remove</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 测试代码如下：</span></span><br><span class="line">Event.listen(<span class="string">"color"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"尺码为:"</span>+size); <span class="comment">// 打印出尺码为42</span></span><br><span class="line">&#125;);</span><br><span class="line">Event.trigger(<span class="string">"color"</span>,<span class="number">42</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>express常用功能</title>
      <link href="/2018/11/21/express%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/"/>
      <content type="html"><![CDATA[<p>Express基于 Node.js 平台，快速、开放、极简的 Web开发框架.本篇文章实现连接mysql||mongodb数据库提供RESTful服务和文件上传。根据这两个功能和nginx搭建一个简易图片服务器。<br><a id="more"></a></p><h3 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a>helloworld</h3><p>安装<code>npm install express --save</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt;&#123;</span><br><span class="line">res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>) <span class="comment">//解决跨域问题</span></span><br><span class="line">    <span class="keyword">let</span> userData=[</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"oouyang"</span>,<span class="attr">age</span>:<span class="number">23</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"zhangsan"</span>,<span class="attr">age</span>:<span class="number">22</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    res.send(userData);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port =<span class="number">8082</span>;</span><br><span class="line"><span class="comment">//开启监听</span></span><br><span class="line">app.listen(port, () =&gt; <span class="built_in">console</span>.log(<span class="string">'Example app listening on port'</span>+port+<span class="string">' !'</span>))</span><br></pre></td></tr></table></figure><p>启动 node server.js 然后<code>http://localhost:8082</code>在浏览器中加载以查看输出。</p><h3 id="集成数据库"><a href="#集成数据库" class="headerlink" title="集成数据库"></a>集成数据库</h3><p>安装依赖并配置 <code>npm install mysql</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//数据库配置文件mysqlEngine</span><br><span class="line">const mysql = require(&apos;mysql&apos;)</span><br><span class="line">var connection = mysql.createConnection(&#123;</span><br><span class="line">    host: &apos;39.108.100.163&apos;,</span><br><span class="line">    user: &apos;root&apos;,</span><br><span class="line">    password: &apos;*******&apos;,</span><br><span class="line">    database: &apos;test&apos;</span><br><span class="line">&#125;);</span><br><span class="line">module.exports =connection;</span><br></pre></td></tr></table></figure></p><p>引用内置router中间件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//user.js文件</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="keyword">const</span> connection = <span class="built_in">require</span>(<span class="string">'../uilts/mysqlEngine'</span>) <span class="comment">//数据库配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个connection</span></span><br><span class="line">connection.connect(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'连接失败'</span> + err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'[connection connect]  succeed!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/getAllUser'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>) <span class="comment">//解决跨域问题</span></span><br><span class="line">    <span class="keyword">let</span> sql= <span class="string">'SELECT * from user'</span></span><br><span class="line"><span class="comment">//执行sql</span></span><br><span class="line">    connection.query(sql, <span class="function"><span class="keyword">function</span> (<span class="params">err, rows, fields</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">        <span class="comment">//console.log('The solution is: ', rows[0]);</span></span><br><span class="line">        res.send(rows);</span><br><span class="line">    &#125;)</span><br><span class="line">    connection.end() <span class="comment">//关闭连接</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports= router</span><br></pre></td></tr></table></figure></p><p>注册中间件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> userRouter = <span class="built_in">require</span>(<span class="string">'./routers/user.js'</span>)</span><br><span class="line"><span class="comment">//注册</span></span><br><span class="line">app.use(<span class="string">'/user'</span>, userRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port =<span class="number">8082</span>;</span><br><span class="line"><span class="comment">//开启监听</span></span><br><span class="line">app.listen(port, () =&gt; <span class="built_in">console</span>.log(<span class="string">'Example app listening on port'</span>+port+<span class="string">' !'</span>))</span><br></pre></td></tr></table></figure></p><p>启动 <code>http://localhost:8082/user/getAllUser</code></p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>安装依赖<code>npm install --save multer</code> <a href="https://www.npmjs.com/package/multer" target="_blank" rel="noopener">multer</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> multer  = <span class="built_in">require</span>(<span class="string">'multer'</span>) <span class="comment">//文件上传</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createFolder = <span class="function"><span class="keyword">function</span>(<span class="params">folder</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        fs.accessSync(folder)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        fs.mkdirSync(folder)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uploadFolder=<span class="string">"./upload/"</span>;</span><br><span class="line">createFolder(uploadFolder);</span><br><span class="line"><span class="comment">//设置文件上传目录和文件名</span></span><br><span class="line"><span class="keyword">var</span> storage = multer.diskStorage(&#123;</span><br><span class="line">    destination: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">      cb(<span class="literal">null</span>, uploadFolder)</span><br><span class="line">    &#125;,</span><br><span class="line">    filename: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//   cb(null, file.fieldname + '-' + Date.now())</span></span><br><span class="line">    cb(<span class="literal">null</span>, file.originalname)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">var</span> upload = multer(&#123; <span class="attr">storage</span>: storage &#125;) </span><br><span class="line"><span class="comment">//文件上传</span></span><br><span class="line">router.post(<span class="string">'/upload'</span>,upload.single(<span class="string">'avatar'</span>),(req,res)=&gt;&#123;</span><br><span class="line">    <span class="comment">//avatar 是文件的上传的name还需修改</span></span><br><span class="line">    res.send(<span class="string">"上传成功aaaa"</span>)</span><br><span class="line">    <span class="built_in">console</span>.dir(req.file)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports= router</span><br></pre></td></tr></table></figure></p><p>上传页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;文件上传：&lt;/h3&gt;</span><br><span class="line">        选择一个文件上传: &lt;br /&gt;</span><br><span class="line">        &lt;form action=&quot;http://localhost:8082/user/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;file&quot; name=&quot;avatar&quot; /&gt;</span><br><span class="line">            &lt;br /&gt;</span><br><span class="line">            &lt;input type=&quot;submit&quot; value=&quot;上传文件&quot; /&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><h3 id="图片服务"><a href="#图片服务" class="headerlink" title="图片服务"></a>图片服务</h3><p>目前还在开发中，说到就肯定做不到。</p>]]></content>
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>遇见未知的自己</title>
      <link href="/2018/10/21/%E9%81%87%E8%A7%81%E6%9C%AA%E7%9F%A5%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
      <content type="html"><![CDATA[<p><div align="center"><img src="/2018/10/21/遇见未知的自己/shixia.jpg" width="500" height="400" alt="" align="center"><br></div><br><a id="more"></a><br>来到深圳快两个月了，颓废也快两个月了。整天过的咸鱼般的生活，总是自嘲是码农，结果真成了只会command+c,command+v的农民。技术上可以说是完全没有提升，就连跟同事的关系都处的一塌糊涂。欧阳波，你真的过的越来越不像自己了。</p><p>甲方就一个需求，一个让领导满意的系统。多参加会议，了解领导的动向，慢慢的你就会发现领导的动向就是搞死我们。<br>有钱幸不幸福我不晓得，没钱肯定不幸福。<br>技术上的难题从来都不是真正的难题，最难的是人心。<br>日子就像吃了睾丸素的长跑运动员，奔跑的速度远远超过了他的真实水平。<br>他们一边痛骂官员们的贪污腐败，一边又鼓动年轻人一定要去当官，当官就能发大财。<br>新入职的一个姑娘，在经理疯狂地追逐下，试用期还没到，就选择了离职转行。<br>仪式感，说好听点是讲究生活品质，说难听点就是穷人瞎矫情。<br>读书无用论，谁家的儿子初中辍学办了个工厂发了大财，谁家的闺女读了硕士读成了傻子。</p><p><div align="center"><img src="/2018/10/21/遇见未知的自己/chegongmiao.jpg" width="500" height="600" alt="" align="center"><br></div><br><strong>（不遗憾的是）=&gt;{不过遗憾的是}</strong>。<br>要说大学四年里，我有什么后悔与遗憾。不是没有好好学习，进而获得保研资格；也不是没能积攒人脉，赚得人生第一桶金；而是没能找寻到志同道合，三观一致，能携手相伴的姑娘。<br>对于游戏，那真的是人菜瘾大。</p>]]></content>
      
      <categories>
          
          <category> 随笔生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue项目中常用模块</title>
      <link href="/2018/08/29/Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
      <content type="html"><![CDATA[<p>最近被项目组安排到写前端，用的框架是vue。下面就记录一些常用的npm模块和vue相关的知识。<br><a id="more"></a></p><h3 id="Mockjs模拟数据"><a href="#Mockjs模拟数据" class="headerlink" title="Mockjs模拟数据"></a>Mockjs模拟数据</h3><p>在后台接口未开发完成之前模拟数据，并返回，完成前台的交互；在后台数据完成之后，你所做的只是去掉mockjs：停止拦截真实的ajax，仅此而已。</p><h4 id="安装与引用"><a href="#安装与引用" class="headerlink" title="安装与引用"></a>安装与引用</h4><p><a href="http://mockjs.com/" target="_blank" rel="noopener">网站</a><br><code>npm install mockjs --save</code><br><code>import Mock from &#39;mockjs&#39;</code></p><h4 id="运用实例"><a href="#运用实例" class="headerlink" title="运用实例"></a>运用实例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line">    <span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                userData: &#123;</span><br><span class="line">                    total: <span class="literal">null</span>,</span><br><span class="line">                    list: []</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;     </span><br><span class="line">            <span class="keyword">this</span>.initGetData(); </span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            initGetData: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line">                    .then(<span class="keyword">this</span>.getUserData())</span><br><span class="line">                    .catch(</span><br><span class="line">                        reject(error)<span class="comment">//请求失败数据返回</span></span><br><span class="line">                    )</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//Mock生成数据</span></span><br><span class="line">            templateFunction: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> Random = Mock.Random;</span><br><span class="line">                <span class="keyword">var</span> id = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">var</span> len = <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">let</span> data = &#123;</span><br><span class="line">                    code: <span class="number">1000</span>,</span><br><span class="line">                    msg: <span class="string">'成功'</span>,</span><br><span class="line">                    total: len,</span><br><span class="line">                    data: <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">                    obj.id = id++;</span><br><span class="line">                    obj.age = Random.integer(<span class="number">18</span>, <span class="number">25</span>);<span class="comment">//生成1-5随机值</span></span><br><span class="line">                    obj.password = Random.natural();<span class="comment">//生成16位随机值</span></span><br><span class="line">                    obj.username = Random.ctitle();<span class="comment">//生成4位中文</span></span><br><span class="line">                    obj.time = Random.date(<span class="string">'yyyy-MM-dd'</span>);<span class="comment">//生成日期</span></span><br><span class="line">                    obj.describe = Random.cparagraph();<span class="comment">//生成一句话</span></span><br><span class="line">                    data.data.push(obj);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> data;</span><br><span class="line">            &#125;,</span><br><span class="line">            getUserData() &#123;</span><br><span class="line">                <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line"><span class="comment">//Mock.mock(rurl,template)</span></span><br><span class="line">                Mock.mock(<span class="string">"getAllUserData"</span>, vm.templateFunction);</span><br><span class="line">                axios.get(<span class="string">"getAllUserData"</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(res);</span><br><span class="line">                    vm.userData.total = res.data.total;</span><br><span class="line">                    vm.userData.list = res.data.data;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>Mock.mock(rurl,template)<br>重点就是写数据模板。当拦截到匹配 rurl 的 Ajax 请求时，将根据数据模板 template 生成模拟数据，并作为响应数据返回。<br>通过axios请求设置的那个rurl。userData可以获取到10条随机数据。</p><h3 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h3><h4 id="express和http-proxy-middleware创建代理服务器"><a href="#express和http-proxy-middleware创建代理服务器" class="headerlink" title="express和http-proxy-middleware创建代理服务器"></a>express和http-proxy-middleware创建代理服务器</h4><p>起因：发布wmts服务不管通过怎么样的方式去调用都出现跨域的问题。<br>跨域的原因都是浏览器的同源策略，域名、协议、端口相同。<br>解决方案：创建代理服务器，服务器不存在跨域问题，所以可以由服务器请求所要域的资源再返回给客户端。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// proxy middleware options</span></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line"><span class="comment">//此处地址是公司的wmts，需要vpn访问。</span></span><br><span class="line">    target: <span class="string">'http://172.17.0.179/ArcGIS/rest/services/FTKSJ/NANSHAN_CGCS2000/MapServer'</span>, <span class="comment">// target host</span></span><br><span class="line">    changeOrigin: <span class="literal">true</span>, <span class="comment">// needed for virtual hosted sites</span></span><br><span class="line">    ws: <span class="literal">true</span>, <span class="comment">// proxy websockets</span></span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">        <span class="comment">//   '^/api/old-path': '/api/new-path', // rewrite path</span></span><br><span class="line">        <span class="comment">//   '^/api/remove/path': '/path', // remove base path</span></span><br><span class="line">        <span class="string">"^/api"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// create the proxy (without context)</span></span><br><span class="line"><span class="keyword">var</span> exampleProxy = proxy(options)</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/api'</span>, exampleProxy);</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8081</span>;</span><br><span class="line"><span class="comment">//开启监听</span></span><br><span class="line">app.listen(port, () =&gt; <span class="built_in">console</span>.log(<span class="string">'Example app listening on port'</span> + port + <span class="string">' !'</span>))</span><br></pre></td></tr></table></figure><p>访问 <code>localhost:8081/api</code>就相当于访问了<code>target</code>指向的地址。<br>上面这个🌰也只是用到<code>http-proxy-middleware</code>的一些皮毛。更多高级功能去npm&amp;&amp;github中查看。</p><h4 id="vue项目设置代理"><a href="#vue项目设置代理" class="headerlink" title="vue项目设置代理"></a>vue项目设置代理</h4><p>用vue-cli搭建的项目内置集成了<code>http-proxy-middleware</code>,所以找到config📁下的index.js中的proxyTable属性添加。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 设置武汉地图服务的代理，避免跨域。--oouyang</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://172.17.0.179/ArcGIS/rest/services/FTKSJ/NANSHAN_CGCS2000/MapServer'</span>,</span><br><span class="line">        changeOrigin: <span class="literal">false</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">"^/api"</span>: <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>有的情况下，需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。比如鼠标的焦点事件。</p><h4 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h4><p>一个指令定义对象可以提供如下几个钩子函数 (均为可选)：</p><ul><li><code>bind</code>:只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li><li><code>inserted</code>:被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li><li><code>update</code>:所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</li><li><code>componentUpdated</code>:指令所在组件的 VNode 及其子 VNode 全部更新后调用.</li><li><code>unbind</code>:只调用一次，指令与元素解绑时调用。</li></ul><h4 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h4><ul><li><code>el</code>：指令所绑定的元素，可以用来直接操作 DOM 。</li><li><code>binding</code>：一个对象，包含以下属性：<ul><li><code>name</code>：指令名，不包括 v- 前缀。</li><li><code>value</code>：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。</li><li><code>oldValue</code>：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</li><li><code>expression</code>：字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。</li><li><code>arg</code>：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。</li><li><code>modifiers</code>：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。</li></ul></li><li><code>vnode</code>：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。</li><li><code>oldVnode</code>：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</li></ul><h4 id="自定义指令的应用"><a href="#自定义指令的应用" class="headerlink" title="自定义指令的应用"></a>自定义指令的应用</h4><p>需求：点击button，显示一个div，再点击div以外的空白处，隐藏这个div。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt; </span><br><span class="line"> &lt;div v-clickoutside=<span class="string">"handleClose"</span>&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"tree_input"</span> @click=<span class="string">"showTree"</span>&gt;</span><br><span class="line">        &lt;p&gt;请选择&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">      &lt;transition name=<span class="string">"fade"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"tree"</span> id=<span class="string">"tree"</span> v-<span class="keyword">if</span>=<span class="string">"treeShow"</span>&gt;</span><br><span class="line">          用于显示隐藏的div</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>transition&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      treeShow: <span class="literal">false</span>, <span class="comment">//控制div的显示隐藏</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  directives: &#123;</span><br><span class="line">    clickoutside: &#123;</span><br><span class="line">      <span class="comment">// 初始化指令</span></span><br><span class="line">      bind(el, binding, vnode) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">documentHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 这里判断点击的元素是否是本身，是本身，则返回</span></span><br><span class="line">          <span class="keyword">if</span> (el.contains(e.target)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 判断指令中是否绑定了函数</span></span><br><span class="line">          <span class="keyword">if</span> (binding.expression) &#123;</span><br><span class="line">            <span class="comment">// 如果绑定了函数 则调用那个函数，此处binding.value就是handleClose方法</span></span><br><span class="line">            binding.value(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 给当前元素绑定个私有变量，方便在unbind中可以解除事件监听</span></span><br><span class="line">        el.__vueClickOutside__ = documentHandler;</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">"click"</span>, documentHandler);</span><br><span class="line">      &#125;,</span><br><span class="line">      update() &#123;&#125;,</span><br><span class="line">      unbind(el, binding) &#123;</span><br><span class="line">        <span class="comment">// 解除事件监听</span></span><br><span class="line">        <span class="built_in">document</span>.removeEventListener(<span class="string">"click"</span>, el.__vueClickOutside__);</span><br><span class="line">        <span class="keyword">delete</span> el.__vueClickOutside__;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClose(event) &#123;</span><br><span class="line">      <span class="keyword">this</span>.treeShow = <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    showTree() &#123;</span><br><span class="line">      <span class="keyword">this</span>.treeShow = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="封装Vue的公共方法"><a href="#封装Vue的公共方法" class="headerlink" title="封装Vue的公共方法"></a>封装Vue的公共方法</h3>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>以后，广州见</title>
      <link href="/2018/08/07/%E4%BB%A5%E5%90%8E%EF%BC%8C%E5%B9%BF%E5%B7%9E%E8%A7%81/"/>
      <content type="html"><![CDATA[<p>是的，我离职了。按照套路来说，应该先感谢一波公司，领导。但是我最想谢的还是跟我一起相处时间最长的同事伙伴们。<br><a id="more"></a><br>最近一段时间都是处于焦虑状态，几乎每天凌晨三点都会醒来。不是因为工作上的压力，而是对面这世界时我内心的无助感。算了，不装逼了。<br>由于我是公司唯一的gis开发人员。所以我在整个办公室里面对所有人都有或多或少的接触。<br>俊哥，谢谢你对我的理解和帮助，让我在规定时间胜利入职新的一家公司。一个会做油焖大虾的大厨，以后部门的活动可以让俊哥给你们秀一波操作。<br>小胡，你来到公司的时间不长，却帮我省下来一大笔外卖费。一个女孩平时看起来大大咧咧的，在叫外卖时却”斤斤计较”。所以啊女人心，海底针。<br>悦姐，公司的UI，从需求到界面掌握着全办公室前端开发人员的生死大权。<br>早子，测试小姐姐，不管三七二十一只要领导说哪里有问题就找前端的责任（因为后台我也测不了~~可爱卖萌风格）。<br>黄主管，跟我一个宿舍最长时间，晚上几乎两点之后睡。周末从不出门除非大事。但工作认真负责（这个品质是我们全办公室人员的通病，除了狗杨，因为他先溜了，写的官网不符合悦姐的要求）。<br>晨哥，他懂的真的好多，感觉什么都知道，但我真的有丶不喜欢磨磨唧唧（指生活方面）。不要沉迷于学习，记得要多锻炼身体。<br>胡哥，下班就溜，或许这就是真大神的风格，最短的时间做最多的事。<br>刚子，来公司坐你旁边应该是最长时间了，人真的超好的，周末你回家我就骑你的小电驴出去玩嘻嘻。<br>华哥，平台进度控制者。<br>强云，刚来的时候叫你强哥，但是我发现你比我还小，叫你哥感觉gaygay的。工作上和你接触应该是最多的，毕竟一个页面长达4000+代码（本想着把代码重构一下，但我能力有限，怕被我玩崩了）。合作愉快。<br>还有好多好多人，好多好多故事。写也写不完，道也道不尽，之前如有得罪的地方，谢谢你们的宽容。午时已到。我要走了，以后广州的大保健里面的店里见。</p>]]></content>
      
      <categories>
          
          <category> 随笔生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git</title>
      <link href="/2018/07/24/ubuntu%E6%90%AD%E5%BB%BAgit%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <content type="html"><![CDATA[<h3 id="ubuntu搭建git服务器"><a href="#ubuntu搭建git服务器" class="headerlink" title="ubuntu搭建git服务器"></a>ubuntu搭建git服务器</h3><h4 id="git服务器"><a href="#git服务器" class="headerlink" title="git服务器"></a>git服务器</h4><p>github上传和拉取代码速度是比较慢的，在Github上创建一个私有仓库是收费的。GitBucket是一个开源的代码管理仓库，就像GitHub一样。<br><a id="more"></a></p><h4 id="下载并上传"><a href="#下载并上传" class="headerlink" title="下载并上传"></a>下载并上传</h4><p>选择版本，下载gitbucket.war<a href="https://gitbucket.github.io" target="_blank" rel="noopener">下载链接</a><br>使用Xftp将war上传到ubuntu服务器上。</p><h4 id="安装gitbucket"><a href="#安装gitbucket" class="headerlink" title="安装gitbucket"></a>安装gitbucket</h4><p>首先查看是否安装java环境。<a href="https://ouyangresume.github.io/2018/06/15/ubuntu%E5%AE%89%E8%A3%85geoserver/#more" target="_blank" rel="noopener">安装java环境</a><br>找到你上传过来的war。执行<code>nohup java -jar gitbucket.war</code></p><h4 id="验尸"><a href="#验尸" class="headerlink" title="验尸"></a>验尸</h4><p><a href="http://39.108.100.163:8080" target="_blank" rel="noopener">http://39.108.100.163:8080</a><br>我已经创建一个游客账号，可以查看一些公共项目。<br>username：test<br>password：qwer</p><h4 id="开启pages服务"><a href="#开启pages服务" class="headerlink" title="开启pages服务"></a>开启pages服务</h4><p>1.下载gitbucket-pages-plugin插件<a href="https://github.com/gitbucket/gitbucket-pages-plugin" target="_blank" rel="noopener">jar地址</a><br>2.将jar文件复制到&lt;GITBUCKET_HOME&gt;/plugins/（GITBUCKET_HOME默认为~/.gitbucket）<br>查找plugins文件夹在ubuntu上的哪个位置<code>find / -name &#39;plugins&#39; -type d</code><br>用xftp拖到plugins目录下。<br>3.重新启动gitbucket<code>nohup java -jar gitbucket.war --port 8088</code><br>这里设置的端口号似乎没有用。还是会启动为8080端口。<br>4.用游客账号创建一个公开的oouyang仓库。创建一个gh-pages孤儿分支，并设置为默认分支。</p><p><div align="center"><img src="/2018/07/24/ubuntu搭建git服务器/oouyang.png" width="500" height="300" alt="gitbucket" align="center"><br></div><br>从图片可以看到多了一个pages的功能。（也可以选择master分支为page功能。就不需要创建孤儿分支了。）<br>5.colne 这个分支并上传一些页面。<br>访问：打开浏览器并指向 <your repo="" url="">/pages</your></p><h3 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h3><p><div align="center"><img src="/2018/07/24/ubuntu搭建git服务器/gitwork.png" width="500" height="300" alt="gitbucket" align="center"></div></p><p>图中几个名词：</p><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"># 推送到远程分支</span><br><span class="line">$ git push origin [branch-name]</span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常见的sql语句</title>
      <link href="/2018/07/13/%E5%B8%B8%E8%A7%81%E7%9A%84sql%E8%AF%AD%E5%8F%A5/"/>
      <content type="html"><![CDATA[<h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>从数据显示方式来讲有：内连接,外连接和交叉连接。<br>内连接：只返回满足连接条件的数据。<br>外连接：除了返回满足连接条的行以外，还返回左（右）表中，不满足条件的行，称为左（右）连接。<br><a id="more"></a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#内连接</span><br><span class="line"><span class="comment">-- 等值连接</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">as</span> a, lnglat <span class="keyword">as</span> b <span class="keyword">WHERE</span> a.id= b.userid;</span><br><span class="line"><span class="comment">-- 自然连接</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">as</span> a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> lnglat <span class="keyword">as</span> b <span class="keyword">on</span> a.id=b.userid ;</span><br><span class="line"></span><br><span class="line">#外连接</span><br><span class="line"><span class="comment">-- 左连接</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">as</span> a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> lnglat <span class="keyword">as</span> b <span class="keyword">on</span> a.id=b.userid <span class="keyword">AND</span> b.type=<span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 右连接</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">as</span> a <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> lnglat <span class="keyword">as</span> b <span class="keyword">on</span> a.id=b.userid;</span><br><span class="line"><span class="comment">-- 全连接</span></span><br><span class="line"><span class="comment">-- mysql不支持,所以用union联合查询</span></span><br><span class="line"><span class="keyword">SELECT</span> *  <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">as</span> a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> lnglat <span class="keyword">as</span> b <span class="keyword">on</span> a.id=b.userid </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">as</span> a <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> lnglat <span class="keyword">as</span> b <span class="keyword">on</span> a.id=b.userid ;</span><br><span class="line">#交叉连接(笛卡尔积)</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">as</span> a ,lnglat <span class="keyword">as</span> b;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`user`</span><span class="keyword">as</span> a <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> lnglat <span class="keyword">as</span> b;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu安装geoserver</title>
      <link href="/2018/06/15/ubuntu%E5%AE%89%E8%A3%85geoserver/"/>
      <content type="html"><![CDATA[<h3 id="安装geoserver"><a href="#安装geoserver" class="headerlink" title="安装geoserver"></a>安装geoserver</h3><h4 id="下载geoserver"><a href="#下载geoserver" class="headerlink" title="下载geoserver"></a>下载geoserver</h4><p>去<a href="http://geoserver.org/" target="_blank" rel="noopener">官网下载</a>你喜欢的版本。</p><h4 id="上传到ubuntu"><a href="#上传到ubuntu" class="headerlink" title="上传到ubuntu"></a>上传到ubuntu</h4><p>用Xshell登录到服务器，然后使用sftp将下载的文件上传到root目录下。<br><a id="more"></a></p><p><div align="center"><img src="/2018/06/15/ubuntu安装geoserver/sftp.png" width="500" height="400" alt="sftp" align="center"><br></div><br>将你要上传的文件拉到这里面来就行了。</p><h4 id="解压geoserver"><a href="#解压geoserver" class="headerlink" title="解压geoserver"></a>解压geoserver</h4><p>安装unzip<br><code>apt-get install unzip</code><br>解压zip文件<br><code>unzip 压缩文件名.zip</code></p><p><div align="center"><img src="/2018/06/15/ubuntu安装geoserver/unzip.png" width="500" height="400" alt="unzip" align="center"><br></div><br>这里可以看到上传过来的zip和解压之后的geoserver-2.11.1</p><h4 id="安装java环境"><a href="#安装java环境" class="headerlink" title="安装java环境"></a>安装java环境</h4><p>1.添加仓库源<code>add-apt-repository ppa:webupd8team/java</code>之前可能需要安装依赖包。<br>2.更新软件包列表<code>apt-get update</code><br>3.安装JDK <code>apt-get install oracle-java8-installer</code><br>4.查看java版本，看看是否安装成功<code>java-version</code></p><h4 id="设置GEOSERVER-HOME环境变量"><a href="#设置GEOSERVER-HOME环境变量" class="headerlink" title="设置GEOSERVER_HOME环境变量"></a>设置GEOSERVER_HOME环境变量</h4><p><code>vi /etc/profile</code> 添加路径   </p><p><div align="center"><img src="/2018/06/15/ubuntu安装geoserver/home.png" width="500" height="400" alt="sftp" align="center"><br></div><br>保存修改重新生效<code>source /etc/profile</code></p><h4 id="启动geoserver"><a href="#启动geoserver" class="headerlink" title="启动geoserver"></a>启动geoserver</h4><p>启动：<code>nohup ./startup.sh &amp;</code><br>关闭：<code>./shutdown.sh</code><br><a href="http://39.108.100.163:8080/geoserver/web/" target="_blank" rel="noopener">访问试试</a></p><h3 id="部署SpringBoot项目"><a href="#部署SpringBoot项目" class="headerlink" title="部署SpringBoot项目"></a>部署SpringBoot项目</h3><h4 id="idea打包成jar包"><a href="#idea打包成jar包" class="headerlink" title="idea打包成jar包"></a>idea打包成jar包</h4><p>maven工具先clean再package。<br>maven命令打包，排除测试代码后进行打包<br><code>mvn clean package  -Dmaven.test.skip=true</code></p><h4 id="上传到ubuntu-1"><a href="#上传到ubuntu-1" class="headerlink" title="上传到ubuntu"></a>上传到ubuntu</h4><p>上传之前先在本机上测试一下打包的jar是否能正常运行<br><code>java -jar Name.jar</code><br>上传方式与上面相同。</p><h4 id="运行jar"><a href="#运行jar" class="headerlink" title="运行jar"></a>运行jar</h4><p>启动之前查看安装了Java环境，<code>nohup java -jar Name.jar</code><br><a href="http://39.108.100.163:8888" target="_blank" rel="noopener">springboot</a></p><h4 id="查看进程并kill"><a href="#查看进程并kill" class="headerlink" title="查看进程并kill"></a>查看进程并kill</h4><p>查看java的进程<code>ps -ef|grep java</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@iZi2m69ympwtuqZ:~# ps aux| grep java</span><br><span class="line">root     12194  0.1 39.6 2610948 812304 ?      Sl   Jun15  54:44 /usr/lib/jvm/java-8-oracle/bin/java -DGEOSERVER_DATA_DIR=/root/geoserver-2.11.1/data_dir -Djava.awt.headless=true -DSTOP.PORT=8079 -DSTOP.KEY=geoserver -jar start.jar</span><br><span class="line">root     24255 16.2 10.1 2478560 208748 ?      Sl   15:52   0:17 java -jar spring-boot-jpa-thymeleaf-curd-2.0.2.RELEASE.jar</span><br><span class="line">root     24334  0.0  0.1  11764  2084 pts/2    S+   15:54   0:00 grep --color=auto java</span><br></pre></td></tr></table></figure></p><p>杀死pid为24255的进程<code>kill -s 9 24255</code></p>]]></content>
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue项目部署到nginx服务器</title>
      <link href="/2018/06/13/vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <content type="html"><![CDATA[<p>去年就买了一个阿里云服务器，自从安装了mySQL数据库也就没有去发挥它的作用了。一直也想将vue开发的一个小项目部署到服务器上，有助于以后写文章时有个链接能直接看到效果，而不是图片了。下面就记录一下nginx部署一个项目的流程。<br><a href="http://39.108.100.163:8081" target="_blank" rel="noopener">直入主题</a><br><a id="more"></a></p><h3 id="ubuntu安装nginx服务器"><a href="#ubuntu安装nginx服务器" class="headerlink" title="ubuntu安装nginx服务器"></a>ubuntu安装nginx服务器</h3><p><code>sudo apt-get install nginx</code><br>安装好的文件位置：</p><p>/usr/sbin/nginx：主程序</p><p>/etc/nginx：存放配置文件</p><p>/usr/share/nginx：存放静态文件</p><p>/var/log/nginx：存放日志</p><p>其实从上面的根目录文件夹可以知道，Linux系统的配置文件一般放在/etc，日志一般放在/var/log，运行的程序一般放在/usr/sbin或者/usr/bin。</p><p>当然，如果要更清楚Nginx的配置项放在什么地方，可以打开/etc/nginx/nginx.conf。</p><p>Nginx指定默认加载/etc/nginx/nginx.conf的配置文件。如果要查看加载的是哪个配置文件，可以用这个命令sudo nginx -t或者ps -ef | grep nginx。</p><p>然后通过这种方式安装的，会自动创建服务，会自动在/etc/init.d/nginx新建服务脚本，然后就可以使用sudo service nginx {start|stop|restart|reload|force-reload|status|configtest|rotate|upgrade}的命令启动。<br>下面是被我修改过的页面。</p><p><div align="center"><img src="/2018/06/13/vue项目部署到nginx服务器/nginx.png" width="500" height="400" alt="nginx" align="center"><br></div></p><h3 id="vue-cli打包成静态文件"><a href="#vue-cli打包成静态文件" class="headerlink" title="vue-cli打包成静态文件"></a>vue-cli打包成静态文件</h3><p>打包之前需要注意两个问题：<br>1.记得改一下config下面的index.js中bulid模块导出的路径。因为index.html里边的内容都是通过script标签引入的，而你的路径不对，打开肯定是空白的。先看一下默认的路径。assetsPublicPath默认的是  <code>/</code>  也就是根目录。而我们的index.html和static在同一级目录下面。所以要改为  <code>./</code>。<br>2.src里边router/index.js路由配置里边默认模式是hash，如果你改成了history模式的话，打开也会是一片空白。所以改为hash或者直接把模式配置删除，让它默认的就行 。<br><code>npm run build</code>生成的dist文件先在本地看一下是否有效果然后上传到github上。</p><h3 id="修改nginx的配置文件"><a href="#修改nginx的配置文件" class="headerlink" title="修改nginx的配置文件"></a>修改nginx的配置文件</h3><p>查看nginx.conf<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">worker_processes 4;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">worker_connections 768;</span><br><span class="line"># multi_accept on;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># Basic Settings</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">sendfile on;</span><br><span class="line">tcp_nopush on;</span><br><span class="line">tcp_nodelay on;</span><br><span class="line">keepalive_timeout 65;</span><br><span class="line">types_hash_max_size 2048;</span><br><span class="line"># server_tokens off;</span><br><span class="line"></span><br><span class="line"># server_names_hash_bucket_size 64;</span><br><span class="line"># server_name_in_redirect off;</span><br><span class="line"></span><br><span class="line">include /etc/nginx/mime.types;</span><br><span class="line">default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># Logging Settings</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">access_log /var/log/nginx/access.log;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># Gzip Settings</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">gzip on;</span><br><span class="line">gzip_disable "msie6";</span><br><span class="line"></span><br><span class="line"># gzip_vary on;</span><br><span class="line"># gzip_proxied any;</span><br><span class="line"># gzip_comp_level 6;</span><br><span class="line"># gzip_buffers 16 8k;</span><br><span class="line"># gzip_http_version 1.1;</span><br><span class="line"># gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># nginx-naxsi config</span><br><span class="line">##</span><br><span class="line"># Uncomment it if you installed nginx-naxsi</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">#include /etc/nginx/naxsi_core.rules;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># nginx-passenger config</span><br><span class="line">##</span><br><span class="line"># Uncomment it if you installed nginx-passenger</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">#passenger_root /usr;</span><br><span class="line">#passenger_ruby /usr/bin/ruby;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># Virtual Host Configs</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">include /etc/nginx/conf.d/*.conf;</span><br><span class="line">include /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#mail &#123;</span><br><span class="line">## See sample authentication script at:</span><br><span class="line">## http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript</span><br><span class="line"># </span><br><span class="line">## auth_http localhost/auth.php;</span><br><span class="line">## pop3_capabilities "TOP" "USER";</span><br><span class="line">## imap_capabilities "IMAP4rev1" "UIDPLUS";</span><br><span class="line"># </span><br><span class="line">#server &#123;</span><br><span class="line">#listen     localhost:110;</span><br><span class="line">#protocol   pop3;</span><br><span class="line">#proxy      on;</span><br><span class="line">#&#125;</span><br><span class="line"># </span><br><span class="line">#server &#123;</span><br><span class="line">#listen     localhost:143;</span><br><span class="line">#protocol   imap;</span><br><span class="line">#proxy      on;</span><br><span class="line">#&#125;</span><br><span class="line">#&#125;</span><br></pre></td></tr></table></figure></p><p>上面的文件重点就在这两句<br><code>include /etc/nginx/conf.d/*.conf;</code><br><code>include /etc/nginx/sites-enabled/*;</code><br>第二句里面放着默认配置default<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server ipv6only=on;</span><br><span class="line"></span><br><span class="line">        root /usr/share/nginx/html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line"></span><br><span class="line">        # Make site accessible from http://localhost/</span><br><span class="line">        server_name localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                # First attempt to serve request as file, then</span><br><span class="line">                # as directory, then fall back to displaying a 404.</span><br><span class="line">                try_files $uri $uri/ =404;</span><br><span class="line">                # Uncomment to enable naxsi on this location</span><br><span class="line">                # include /etc/nginx/naxsi.rules</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第一句文件的位置就是放自己配置的server。<br>先将github上的打包的dist文件拉动服务器上来。<br>放到下面的位置<br>root@iZi2m69ympwtuqZ:/var/www/dist# pwd<br>/var/www/dist<br>root@iZi2m69ympwtuqZ:/var/www/dist# ls<br>index.html  README.md  static<br>然后在/etc/nginx/conf.d 新建一个以。conf结尾文件<br>root@iZi2m69ympwtuqZ:/etc/nginx/conf.d# vi vueapp.conf<br>具体内容<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">upstream arcgis_server &#123;                                                         </span><br><span class="line">        server demo-dx.geostar.com.cn:6234;                                              </span><br><span class="line">    &#125;</span><br><span class="line">server&#123;</span><br><span class="line">        listen 8081; #监听端口</span><br><span class="line">        server_name 39.109.100.163;#监听地址</span><br><span class="line">        location /&#123;</span><br><span class="line">                index index.html; #默认页面</span><br><span class="line">                root /var/www/dist;#根目录，也就是github拉下来文件的位置</span><br><span class="line">        &#125;</span><br><span class="line">        # 配置一个代理</span><br><span class="line">        location /arcgis/ &#123;</span><br><span class="line">            proxy_pass http://arcgis_server;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我也就是配置最最简单的。更详细配置<a href="http://nginx.org/en/" target="_blank" rel="noopener">查看官网</a></p><h3 id="重启-nginx服务"><a href="#重启-nginx服务" class="headerlink" title="重启 nginx服务"></a>重启 nginx服务</h3><p><code>nginx -s reload</code><br>然后<a href="http://39.108.100.163:8081" target="_blank" rel="noopener">访问测试去吧</a></p><h3 id="nuxt项目部署流程"><a href="#nuxt项目部署流程" class="headerlink" title="nuxt项目部署流程"></a>nuxt项目部署流程</h3><h4 id="搭建nginx-node-npm-pm2环境"><a href="#搭建nginx-node-npm-pm2环境" class="headerlink" title="搭建nginx+node+npm+pm2环境"></a>搭建nginx+node+npm+pm2环境</h4><p>先在ubuntu上安装node环境。<br><code>curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -</code><br><code>sudo apt-get install -y nodejs</code><br>查看node和npm版本<br><code>nodejs -v</code><br><code>npm -version</code></p><h4 id="nuxt项目打包上传"><a href="#nuxt项目打包上传" class="headerlink" title="nuxt项目打包上传"></a>nuxt项目打包上传</h4><p>查看packpage.json<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "dev": "nuxt",</span><br><span class="line">    "build": "nuxt build",</span><br><span class="line">    "start": "nuxt start",</span><br><span class="line">    "generate": "nuxt generate",</span><br><span class="line">    "lint": "eslint --ext .js,.vue --ignore-path .gitignore .",</span><br><span class="line">    "precommit": "npm run lint"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>执行<code>npm run build</code> 生成.nuxt渲染文件。<code>npm start</code>本地是否正常运行。<br>将项目中的.nuxt、static、nuxt.config.js、package.json四个文件上传到仓库。</p><h4 id="pm2运行项目"><a href="#pm2运行项目" class="headerlink" title="pm2运行项目"></a>pm2运行项目</h4><p>安装pm2：<code>npm install pm2 -g</code>。<br>pm2常用命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">启动：</span><br><span class="line">pm2 start app.js</span><br><span class="line">pm2 start app.js --name my-api       #my-api为PM2进程名称</span><br><span class="line">pm2 start app.js -i 0                #根据CPU核数启动进程个数</span><br><span class="line">pm2 start app.js --watch             #实时监控app.js的方式启动，当app.js文件有变动时，pm2会自动reload</span><br><span class="line">查看进程:</span><br><span class="line">pm2 list</span><br><span class="line">pm2 show 0 或者 # pm2 info 0         #查看进程详细信息，0为PM2进程id </span><br><span class="line">停止进程：</span><br><span class="line">pm2 stop all                         #停止PM2列表中所有的进程</span><br><span class="line">pm2 stop 0                           #停止PM2列表中进程为0的进程</span><br><span class="line">重启：</span><br><span class="line">pm2 restart all                      #重启PM2列表中所有的进程</span><br><span class="line">pm2 restart 0                        #重启PM2列表中进程为0的进程</span><br><span class="line">删除PM2进程：</span><br><span class="line">pm2 delete 0                         #删除PM2列表中进程为0的进程</span><br><span class="line">pm2 delete all                       #删除PM2列表中所有的进程</span><br></pre></td></tr></table></figure></p><p>在ubuntu上把仓库中文件clone下来。<br>安装依赖:<code>npm install</code>。启动：<code>npm start</code></p><p><div align="center"><img src="/2018/06/13/vue项目部署到nginx服务器/nuxt.png" width="500" height="400" alt="nginx" align="center"><br></div><br>pm2启动:<code>pm2 start npm --name &quot;my-nuxt&quot; -- run start</code></p><h4 id="ningx将pm2中运行的项目转发出去。"><a href="#ningx将pm2中运行的项目转发出去。" class="headerlink" title="ningx将pm2中运行的项目转发出去。"></a>ningx将pm2中运行的项目转发出去。</h4><p>在nginx的配置目录下新建一个nuxt.conf文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">upstream nodenuxt &#123;</span><br><span class="line">    server 127.0.0.1:8089; #nuxt项目 监听端口</span><br><span class="line">    keepalive 64;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8090; #你需要访问的端口</span><br><span class="line">    server_name 39.108.100.163;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;  </span><br><span class="line">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Nginx-Proxy true;</span><br><span class="line">        proxy_cache_bypass $http_upgrade;</span><br><span class="line">        proxy_pass http://nodenuxt; #反向代理</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重启nginx：<code>nginx -s reload</code><br><a href="http://39.108.100.163:8090" target="_blank" rel="noopener">http://39.108.100.163:8090</a><br>这个项目目前还在开发中。后期会可能会正式上线。</p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot与Vue实现分页</title>
      <link href="/2018/06/07/SpringBoot%E4%B8%8EVue%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5/"/>
      <content type="html"><![CDATA[<h3 id="主要技术路线"><a href="#主要技术路线" class="headerlink" title="主要技术路线"></a>主要技术路线</h3><p>elementUI+axios+springboot<br>提供分页测试数据<a href="https://github.com/OuYangResume/springbootdemo" target="_blank" rel="noopener">接口地址</a>。页面<a href="https://github.com/OuYangResume/Vue-Gis/blob/master/src/views/element/table/paginationtable.vue" target="_blank" rel="noopener">组件地址</a></p><div align="center"><img src="/2018/06/07/SpringBoot与Vue实现分页/page.png" width="500" height="400" alt="page" align="center"><br></div><a id="more"></a><h3 id="element表格与对话框"><a href="#element表格与对话框" class="headerlink" title="element表格与对话框"></a>element表格与对话框</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">    :data=<span class="string">"tableData"</span> </span><br><span class="line">    style=<span class="string">"width: 100%"</span>&gt;</span><br><span class="line">    &lt;el-table-column</span><br><span class="line">      label=<span class="string">"日期"</span></span><br><span class="line">      width=<span class="string">"180"</span>&gt;</span><br><span class="line">      &lt;template slot-scope=<span class="string">"scope1"</span>&gt;</span><br><span class="line">        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-icon-time"</span>&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span style=<span class="string">"margin-left: 10px"</span>&gt;&#123;&#123; scope1.row.date &#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>template&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-table-column</span></span><br><span class="line"><span class="regexp">      label="姓名"</span></span><br><span class="line"><span class="regexp">      width="180"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;template slot-scope="scope"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-popover trigger="hover" placement="top"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;p&gt;姓名: &#123;&#123; scope.row.name &#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">          &lt;p&gt;住址: &#123;&#123; scope.row.address &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">          &lt;div slot="reference" class="name-wrapper"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;el-tag size="medium"&gt;&#123;&#123; scope.row.name &#125;&#125;&lt;/</span>el-tag&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>el-popover&gt;</span><br><span class="line">      &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-table-column&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-table-column</span><br><span class="line">        label=<span class="string">"地址"</span></span><br><span class="line">        width=<span class="string">"300"</span>&gt;</span><br><span class="line">        &lt;template slot-scope=<span class="string">"scope"</span>&gt;</span><br><span class="line">            &lt;span style=<span class="string">"margin-left: 10px"</span>&gt;&#123;&#123; scope.row.address &#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>template&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;el-table-column label="操作"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;template slot-scope="scope"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-button</span></span><br><span class="line"><span class="regexp">          size="mini"</span></span><br><span class="line"><span class="regexp">          @click="handleEdit(scope.$index, scope.row)"&gt;编辑&lt;/</span>el-button&gt;</span><br><span class="line">        &lt;el-button</span><br><span class="line">          size=<span class="string">"mini"</span></span><br><span class="line">          type=<span class="string">"danger"</span></span><br><span class="line">          @click=<span class="string">"handleDelete(scope.$index, scope.row)"</span>&gt;删除&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>template&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>el-table&gt;</span><br><span class="line"></span><br><span class="line">&lt;el-dialog</span><br><span class="line">  title=<span class="string">"提示"</span></span><br><span class="line">  :visible.sync=<span class="string">"centerDialogVisible"</span></span><br><span class="line">  width=<span class="string">"30%"</span></span><br><span class="line">  center&gt;</span><br><span class="line">    &lt;el-form  :model=<span class="string">"temp"</span> label-position=<span class="string">"left"</span> label-width=<span class="string">"70px"</span> style=<span class="string">'width: 400px; margin-left:50px;'</span>&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;el-form-item label=<span class="string">"日期"</span> prop=<span class="string">"date"</span> &gt;</span><br><span class="line">          &lt;el-date-picker v-model=<span class="string">"temp.date"</span> type=<span class="string">"datetime"</span> placeholder=<span class="string">"请选择时间"</span>&gt;</span><br><span class="line">          &lt;<span class="regexp">/el-date-picker&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=<span class="string">"名称"</span> &gt;</span><br><span class="line">          &lt;el-input v-model=<span class="string">"temp.name"</span>&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label="地址" &gt;</span><br><span class="line">          &lt;el-input v-model="temp.address"&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line"></span><br><span class="line">  &lt;span slot="footer" class="dialog-footer"&gt;</span><br><span class="line">    &lt;el-button @click="centerDialogVisible = false"&gt;取 消&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type="primary" @click="centerDialogVisible = false"&gt;确 定&lt;/el-button&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">&lt;/el-dialog&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      centerDialogVisible: false,</span><br><span class="line">      tableData: [</span><br><span class="line">        &#123;</span><br><span class="line">          date: "2016-05-02",</span><br><span class="line">          name: "王小虎",</span><br><span class="line">          address: "上海市普陀区金沙江路 1518 弄"</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          date: "2016-05-04",</span><br><span class="line">          name: "王小虎",</span><br><span class="line">          address: "上海市普陀区金沙江路 1517 弄"</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          date: "2016-05-01",</span><br><span class="line">          name: "王小虎",</span><br><span class="line">          address: "上海市普陀区金沙江路 1519 弄"</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          date: "2016-05-03",</span><br><span class="line">          name: "王小虎",</span><br><span class="line">          address: "上海市普陀区金沙江路 1516 弄"</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      temp: &#123;</span><br><span class="line">        date: new Date(),</span><br><span class="line">        name: "",</span><br><span class="line">        address: ""</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleEdit(index, row) &#123;</span><br><span class="line">      // console.log(index, row);</span><br><span class="line">      this.temp = Object.assign(&#123;&#125;, row); // copy obj</span><br><span class="line">      this.temp.date = new Date(this.temp.date);</span><br><span class="line">      this.centerDialogVisible = true;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleDelete(index, row) &#123;</span><br><span class="line">      console.log(index, row);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div align="center"><img src="/2018/06/07/SpringBoot与Vue实现分页/table.png" width="500" height="400" alt="table" align="center"><br></div><h3 id="axios获取数据"><a href="#axios获取数据" class="headerlink" title="axios获取数据"></a>axios获取数据</h3><p>npm install axios –save<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name: <span class="string">"表格"</span>, </span><br><span class="line">   listQuery: &#123;</span><br><span class="line">        page: <span class="number">1</span>,</span><br><span class="line">        limit: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      newusers: [],</span><br><span class="line">      total: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="keyword">this</span>.getUsers()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getUsers() &#123;</span><br><span class="line">      axios</span><br><span class="line">      .get(<span class="string">"http://localhost:8888/getList"</span>,&#123;</span><br><span class="line">          params:&#123;</span><br><span class="line">              pageNum:<span class="keyword">this</span>.listQuery.page,</span><br><span class="line">              pageSize:<span class="keyword">this</span>.listQuery.limit</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(response);</span><br><span class="line">         <span class="keyword">this</span>.newusers = response.data.list</span><br><span class="line">         <span class="keyword">this</span>.total=response.data.total</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"axios=="</span> + error);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="springboot-集成PageHelper分页"><a href="#springboot-集成PageHelper分页" class="headerlink" title="springboot 集成PageHelper分页"></a>springboot 集成PageHelper分页</h3><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--pagehelper --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@CrossOrigin</span>是解决跨域问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RestController</span>注解相当于<span class="doctag">@ResponseBody</span> ＋ <span class="doctag">@Controller</span>合</span></span><br><span class="line"><span class="comment">     * 在一起的作用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageNum 当前页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 当前页面展示数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getList"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getlist</span><span class="params">(<span class="keyword">int</span> pageNum,<span class="keyword">int</span> pageSize)</span></span>&#123;</span><br><span class="line">        Object users=userService.getUser(pageNum,pageSize);</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="UserServiceImpl实现类"><a href="#UserServiceImpl实现类" class="headerlink" title="UserServiceImpl实现类"></a>UserServiceImpl实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>: getUser</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: findByPage方法从数据库中获取所有user列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageNum 当前页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 当前页面展示数目</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageInfo&lt;User&gt; <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用分页插件,核心代码就这一行</span></span><br><span class="line">        PageHelper.startPage(pageNum, pageSize);</span><br><span class="line">        List&lt;User&gt; userList=userMapper.findByPage();</span><br><span class="line">        PageInfo result =<span class="keyword">new</span> PageInfo(userList);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div align="center"><img src="/2018/06/07/SpringBoot与Vue实现分页/post.png" width="500" height="400" alt="table" align="center"><br></div><br>结合以上三个技术就可以实现分页功能了。</p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot 定时发送邮件</title>
      <link href="/2018/06/06/SpringBoot-%E5%AE%9A%E6%97%B6%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
      <content type="html"><![CDATA[<h3 id="pom包配置"><a href="#pom包配置" class="headerlink" title="pom包配置"></a>pom包配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="在application-properties中添加邮箱配置"><a href="#在application-properties中添加邮箱配置" class="headerlink" title="在application.properties中添加邮箱配置"></a>在application.properties中添加邮箱配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#邮箱服务器地址</span><br><span class="line">spring.mail.host=smtp.163.com</span><br><span class="line">#用户名</span><br><span class="line">spring.mail.username=xxx@oo.com</span><br><span class="line">#密码</span><br><span class="line">spring.mail.password=xxyyooo </span><br><span class="line">spring.mail.default-encoding=UTF-8</span><br><span class="line">#以谁来发送邮件</span><br><span class="line">mail.fromMail.addr=xxx@oo.com</span><br></pre></td></tr></table></figure><h3 id="MailService"><a href="#MailService" class="headerlink" title="MailService"></a>MailService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MailService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendSimpleMail</span><span class="params">(String to, String subject, String content)</span></span>;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">sendHtmlMail</span><span class="params">(String to, String subject, String content)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendAttachmentsMail</span><span class="params">(String to, String subject, String content, String filePath)</span></span>;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">sendInlineResourceMail</span><span class="params">(String to, String subject, String content, String rscPath, String rscId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MailServiceImpl"><a href="#MailServiceImpl" class="headerlink" title="MailServiceImpl"></a>MailServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailServiceImpl</span> <span class="keyword">implements</span> <span class="title">MailService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender mailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mail.fromMail.addr&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String from;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送文本邮件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSimpleMail</span><span class="params">(String to, String subject, String content)</span> </span>&#123;</span><br><span class="line">        SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        message.setFrom(from);</span><br><span class="line">        message.setTo(to);</span><br><span class="line">        message.setSubject(subject);</span><br><span class="line">        message.setText(content);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mailSender.send(message);</span><br><span class="line">            logger.info(<span class="string">"简单邮件已经发送。"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"发送简单邮件时发生异常！"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送html邮件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendHtmlMail</span><span class="params">(String to, String subject, String content)</span> </span>&#123;</span><br><span class="line">        MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//true表示需要创建一个multipart message</span></span><br><span class="line">            MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</span><br><span class="line">            helper.setFrom(from);</span><br><span class="line">            helper.setTo(to);</span><br><span class="line">            helper.setSubject(subject);</span><br><span class="line">            helper.setText(content, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            mailSender.send(message);</span><br><span class="line">            logger.info(<span class="string">"html邮件发送成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"发送html邮件时发生异常！"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送带附件的邮件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAttachmentsMail</span><span class="params">(String to, String subject, String content, String filePath)</span> </span>&#123;</span><br><span class="line">        MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</span><br><span class="line">            helper.setFrom(from);</span><br><span class="line">            helper.setTo(to);</span><br><span class="line">            helper.setSubject(subject);</span><br><span class="line">            helper.setText(content, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            FileSystemResource file = <span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(filePath));</span><br><span class="line">            String fileName = filePath.substring(filePath.lastIndexOf(File.separator));</span><br><span class="line">            helper.addAttachment(fileName, file);</span><br><span class="line">            <span class="comment">//helper.addAttachment("test"+fileName, file);</span></span><br><span class="line"></span><br><span class="line">            mailSender.send(message);</span><br><span class="line">            logger.info(<span class="string">"带附件的邮件已经发送。"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"发送带附件的邮件时发生异常！"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送正文中有静态资源（图片）的邮件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rscPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rscId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendInlineResourceMail</span><span class="params">(String to, String subject, String content, String rscPath, String rscId)</span> </span>&#123;</span><br><span class="line">        MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</span><br><span class="line">            helper.setFrom(from);</span><br><span class="line">            helper.setTo(to);</span><br><span class="line">            helper.setSubject(subject);</span><br><span class="line">            helper.setText(content, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            FileSystemResource res = <span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(rscPath));</span><br><span class="line">            helper.addInline(rscId, res);</span><br><span class="line"></span><br><span class="line">            mailSender.send(message);</span><br><span class="line">            logger.info(<span class="string">"嵌入静态资源的邮件已经发送。"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"发送嵌入静态资源的邮件时发生异常！"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定时发送邮件"><a href="#定时发送邮件" class="headerlink" title="定时发送邮件"></a>定时发送邮件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">// 启用定时任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MailService mailService;</span><br><span class="line"><span class="comment">//    @Scheduled(cron = "0/5 * * * * ?") // 每20秒执行一次</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">6000</span>) <span class="comment">//每6秒</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSimpleMail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"现在时间："</span> + dateFormat.format(<span class="keyword">new</span> Date()));</span><br><span class="line">        mailService.sendSimpleMail(<span class="string">"15180191339@139.com"</span>,<span class="string">"test simple mail"</span>,<span class="string">" hello this is simple mail"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">60000</span>) <span class="comment">//每分钟</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendInlineResourceMail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String rscId = <span class="string">"neo006"</span>;</span><br><span class="line">        String content=<span class="string">"&lt;html&gt;&lt;body&gt;这是有图片的邮件：&lt;img src=\'cid:"</span> + rscId + <span class="string">"\' &gt;&lt;/body&gt;&lt;/html&gt;"</span>;</span><br><span class="line">        String imgPath = <span class="string">"F:\\OuYangResume.github.io\\source\\_posts\\Vue优雅使用echarts\\bar.png"</span>;</span><br><span class="line"></span><br><span class="line">        mailService.sendInlineResourceMail(<span class="string">"zhangwenguang123@qq.com"</span>, <span class="string">"主题：这是有图片的邮件"</span>, content, imgPath, rscId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="收到你的早安，晚安和gun。"><a href="#收到你的早安，晚安和gun。" class="headerlink" title="收到你的早安，晚安和gun。"></a>收到你的早安，晚安和gun。</h3><div align="center"><img src="/2018/06/06/SpringBoot-定时发送邮件/mail.png" width="500" height="400" alt="email" align="center"><br></div>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue优雅使用echarts</title>
      <link href="/2018/05/21/Vue%E4%BC%98%E9%9B%85%E4%BD%BF%E7%94%A8echarts/"/>
      <content type="html"><![CDATA[<h3 id="npm-安装-ECharts"><a href="#npm-安装-ECharts" class="headerlink" title="npm 安装 ECharts"></a>npm 安装 ECharts</h3><p>npm install echarts –save</p><h3 id="引入-ECharts"><a href="#引入-ECharts" class="headerlink" title="引入 ECharts"></a>引入 ECharts</h3><p>npm上安装的ECharts会放在node_modules目录下。<br>1.<code>var echarts = require(&#39;echarts&#39;)</code><br>2.<code>import echarts from &#39;echarts&#39;</code><br>通过以上两种方式得到 ECharts。<br><a id="more"></a></p><h3 id="初始化echarts实例"><a href="#初始化echarts实例" class="headerlink" title="初始化echarts实例"></a>初始化echarts实例</h3><p><code>let myChart = echarts.init(dom,&#39;theme&#39;);</code><br>dom是指一个具有高度的div,theme是指echarts主题。<br>使用主题之前必须先引用。比如引用ECharts4中新出的黑色主题<code>equire(&#39;echarts/theme/dark&#39;)</code> </p><h3 id="图表的配置项option和数据"><a href="#图表的配置项option和数据" class="headerlink" title="图表的配置项option和数据"></a>图表的配置项option和数据</h3><p>具体配置项就去官网查看<a href="http://echarts.baidu.com/option.html#title" target="_blank" rel="noopener">api</a></p><h3 id="生成图"><a href="#生成图" class="headerlink" title="生成图"></a>生成图</h3><p><code>myChart.setOption(option)</code></p><h3 id="提供一个vue的组件代码"><a href="#提供一个vue的组件代码" class="headerlink" title="提供一个vue的组件代码"></a>提供一个vue的组件代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div :class=&quot;className&quot; id=&quot;bar&quot; :style=&quot;&#123;height:height,width:width&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// import echarts from &quot;echarts&quot;;</span><br><span class="line">// require(&apos;echarts/theme/macarons&apos;) // echarts theme</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    className: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;chart&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    width: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;100%&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    height: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;300px&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      chart: null</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    initChart() &#123;</span><br><span class="line">        let echarts=require(&apos;echarts&apos;);</span><br><span class="line">      this.chart = echarts.init(document.getElementById(&quot;bar&quot;),&apos;macarons&apos;);</span><br><span class="line">      this.chart.setOption(&#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">        text: &apos;输出与承受占比图&apos;,</span><br><span class="line">        subtext: &apos;by ouyang&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">        trigger: &apos;axis&apos;,</span><br><span class="line">        axisPointer: &#123;</span><br><span class="line">            type: &apos;shadow&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">        data: [&apos;伤害&apos;, &apos;防御&apos;],</span><br><span class="line">        x : &apos;right&apos;,</span><br><span class="line">        y : &apos;top&apos;,</span><br><span class="line">    &#125;,</span><br><span class="line">    grid: &#123;</span><br><span class="line">        left: &apos;3%&apos;,</span><br><span class="line">        right: &apos;4%&apos;,</span><br><span class="line">        bottom: &apos;3%&apos;,</span><br><span class="line">        containLabel: true</span><br><span class="line">    &#125;,</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        type: &apos;value&apos;,</span><br><span class="line">        boundaryGap: [0, 0.01]</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;</span><br><span class="line">        type: &apos;category&apos;,</span><br><span class="line">        data: [&apos;德玛&apos;,&apos;瑞文&apos;,&apos;亚索&apos;,&apos;盲僧&apos;,&apos;卡萨&apos;]</span><br><span class="line">    &#125;,</span><br><span class="line">    series: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: &apos;伤害&apos;,</span><br><span class="line">            type: &apos;bar&apos;,</span><br><span class="line">            data: [10000, 12000, 18000, 4399, 22000]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: &apos;防御&apos;,</span><br><span class="line">            type: &apos;bar&apos;,</span><br><span class="line">            data: [19325, 9000, 8000, 16000, 6000]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">      this.initChart()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><div align="center"><img src="/2018/05/21/Vue优雅使用echarts/bar.png" width="500" height="400" alt="Bar图" align="center"><br></div></p><h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a><a href="https://github.com/OuYangResume/Vue-Gis" target="_blank" rel="noopener">源码地址</a></h3>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> echarts </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>科学上网</title>
      <link href="/2018/05/14/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
      <content type="html"><![CDATA[<p>肖申克里的人习惯被关在墙里，但他们至少知道有墙的存在。而你，被关在一个局域网，却自豪的说谁不会上网。其实你永远都没真正接触过真正的互联网。<br><a id="more"></a><br>推荐两种科学上网的方式</p><h3 id="Lantern"><a href="#Lantern" class="headerlink" title="Lantern"></a>Lantern</h3><p><code>Lantern</code>是一款开源并且跨平台的翻墙工具。“蓝灯”是它的中文名。<br>直接去<a href="https://github.com/getlantern/lantern" target="_blank" rel="noopener">github</a>下载。傻瓜式安装。启动。下面那个地方真的有很多资源（来不及解释了，赶紧上飞机）</p><div align="center"><img src="/2018/05/14/科学上网/google.png" width="500" height="400" alt="google" align="center"><br></div><h3 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h3><p>强力推荐这种方式。不限流量，而且还很稳定。<br>去我的<a href="https://pan.baidu.com/s/1h_0e_xyRBqs2VJk9ee8iAA" target="_blank" rel="noopener">网盘下载</a>就可以免费使用。密码：idnk<br>使用方式更简单。下载，解压。找到你对应电脑类型的文件夹。双击<code>飞机.exe</code>就可以科学上网了。看片子$$俄罗斯小姐姐去了。</p><div align="center"><img src="/2018/05/14/科学上网/youtube.png" width="500" height="400" alt="youtube" align="center"><br></div><br><div align="center"><img src="/2018/05/14/科学上网/yahoo.png" width="500" height="400" alt="yahoo" align="center"><br></div><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><p>送你也罢。<br><code>sudo ssh  root@39.108.100.163</code><br><code>password:OuYangBo950924</code></p>]]></content>
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>arcgis api实现一些常用的功能</title>
      <link href="/2018/05/14/arcgis-api%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
      <content type="html"><![CDATA[<h3 id="GeometryService实现测量功能"><a href="#GeometryService实现测量功能" class="headerlink" title="GeometryService实现测量功能"></a>GeometryService实现测量功能</h3><p>几何服务（GeometryService）可以用这个类实现测量直线的距离，形状的缓冲区分析，判断两个形状之间的关系（相交，相离等等），两个形状求交，对形状的裁剪的图形操作。<br><a id="more"></a></p><h4 id="测量功能的具体代码"><a href="#测量功能的具体代码" class="headerlink" title="测量功能的具体代码"></a>测量功能的具体代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"http://120.77.215.143:6012/arcgis_js_api/library/3.21/3.21/dijit/themes/tundra/tundra.css"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"http://120.77.215.143:6012/arcgis_js_api/library/3.21/3.21/esri/css/esri.css"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://120.77.215.143:6012/arcgis_js_api/library/3.21/3.21/init.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"height: 700px;width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"JSarea"</span>&gt;</span>测量面积<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"JSline"</span>&gt;</span>测量距离<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"JSclear"</span>&gt;</span>清除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">require</span>([ <span class="string">"esri/map"</span>,<span class="string">"extLayers/gaodeLayer"</span>,<span class="string">"esri/layers/GraphicsLayer"</span></span></span><br><span class="line"><span class="javascript">    ],<span class="function"><span class="keyword">function</span> (<span class="params">Map,gaodeLayer,GraphicsLayer</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>(<span class="string">"map"</span>,&#123;</span></span><br><span class="line"><span class="javascript">            logo:<span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">            center: [101.778112, 36.617042],</span></span><br><span class="line"><span class="undefined">            zoom:13</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> gaodelayer=<span class="keyword">new</span> gaodeLayer();</span></span><br><span class="line"><span class="undefined">        map.addLayer(gaodelayer);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> disFun =<span class="literal">false</span>;<span class="comment">//距离测量</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> areaFun = <span class="literal">false</span>;<span class="comment">//面积测量</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> inputPoints = [];<span class="comment">//存储生成点的集合</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> totleDistance = <span class="number">0.0</span>;<span class="comment">//总距离</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">require</span>([<span class="string">"esri/toolbars/draw"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"esri/symbols/SimpleLineSymbol"</span>,<span class="string">"esri/symbols/SimpleFillSymbol"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"esri/Color"</span>,<span class="string">"esri/layers/GraphicsLayer"</span>,<span class="string">"esri/graphic"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"esri/symbols/Font"</span>, <span class="string">"esri/symbols/TextSymbol"</span>, <span class="string">"esri/symbols/SimpleMarkerSymbol"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"esri/tasks/LengthsParameters"</span>, <span class="string">"esri/tasks/GeometryService"</span>,<span class="string">"esri/geometry/Polyline"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"esri/tasks/AreasAndLengthsParameters"</span>,<span class="string">"esri/geometry/Point"</span>],</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="keyword">function</span> (<span class="params">Draw,SimpleLineSymbol,SimpleFillSymbol,Color,GraphicsLayer,</span></span></span></span><br><span class="line"><span class="undefined">                              Graphic,Font,TextSymbol,SimpleMarkerSymbol,LengthsParameters,GeometryService,</span></span><br><span class="line"><span class="undefined">                              Polyline,AreasAndLengthsParameters,Point) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span>  measureLayer=<span class="keyword">new</span> GraphicsLayer();</span></span><br><span class="line"><span class="undefined">                        map.addLayer(measureLayer);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> toolbar = <span class="keyword">new</span> Draw(map);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> startFont = <span class="keyword">new</span> Font(<span class="string">'12px'</span>).setWeight(Font.WEIGHT_BOLD);<span class="comment">//定义文字样式</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//定义标记点样式</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> makerSymbol=<span class="keyword">new</span> SimpleMarkerSymbol(&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="string">"color"</span>: [<span class="number">27</span>,<span class="number">188</span>,<span class="number">155</span>,<span class="number">255</span>],</span></span><br><span class="line"><span class="javascript">                            <span class="string">"size"</span>: <span class="number">7</span>,</span></span><br><span class="line"><span class="javascript">                            <span class="string">"type"</span>: <span class="string">"esriSMS"</span>,</span></span><br><span class="line"><span class="javascript">                            <span class="string">"style"</span>: <span class="string">"esriSMSCircle"</span>,</span></span><br><span class="line"><span class="javascript">                            <span class="string">"outline"</span>: &#123;</span></span><br><span class="line"><span class="javascript">                                <span class="string">"color"</span>: [<span class="number">52</span>,<span class="number">73</span>,<span class="number">94</span>,<span class="number">255</span>],</span></span><br><span class="line"><span class="javascript">                                <span class="string">"width"</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">                                <span class="string">"type"</span>: <span class="string">"esriSLS"</span>,</span></span><br><span class="line"><span class="javascript">                                <span class="string">"style"</span>: <span class="string">"esriSLSSolid"</span></span></span><br><span class="line"><span class="undefined">                            &#125;</span></span><br><span class="line"><span class="undefined">                        &#125;);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> geometryService =<span class="keyword">new</span> GeometryService(<span class="string">"http://120.77.215.143:6080/arcgis/rest/services/Utilities/Geometry/GeometryServer"</span>);</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">"#JSarea"</span>).on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            areaFun=<span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                            disFun=<span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                            toolbar.activate(Draw.POLYGON);<span class="comment">//画面</span></span></span><br><span class="line"><span class="undefined">                        &#125;);</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">"#JSline"</span>).on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            disFun=<span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                            areaFun=<span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                            toolbar.activate(Draw.POLYLINE);<span class="comment">//绘制折线</span></span></span><br><span class="line"><span class="undefined">                        &#125;);</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">"#JSclear"</span>).on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                            clearAction();</span></span><br><span class="line"><span class="undefined">                        &#125;);</span></span><br><span class="line"><span class="javascript">                        map.on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                           <span class="comment">// console.log(evt);</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span>(disFun)&#123;</span></span><br><span class="line"><span class="undefined">                                inputPoints.push(evt.mapPoint);</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">var</span>  textSymbol;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">if</span>(inputPoints.length ===<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="javascript">                                    textSymbol = <span class="keyword">new</span> TextSymbol(<span class="string">"起点"</span>,startFont,<span class="keyword">new</span> Color([<span class="number">204</span>,<span class="number">102</span>,<span class="number">51</span>]));</span></span><br><span class="line"><span class="undefined">                                    textSymbol.setOffset(0,-20);</span></span><br><span class="line"><span class="javascript">                                    measureLayer.add(<span class="keyword">new</span> Graphic(evt.mapPoint,textSymbol));</span></span><br><span class="line"><span class="undefined">                                &#125;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">if</span>(inputPoints.length&gt;=<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="javascript">                                    <span class="comment">//    设置距离测量的参数</span></span></span><br><span class="line"><span class="javascript">                                    <span class="keyword">var</span>  lengthParams = <span class="keyword">new</span> LengthsParameters();</span></span><br><span class="line"><span class="javascript">                                    lengthParams.calculationType = <span class="string">'preserveShape'</span>;</span></span><br><span class="line"><span class="javascript">                                    lengthParams.lengthUnit = GeometryService.UNIT_METER;<span class="comment">//单位米</span></span></span><br><span class="line"><span class="javascript">                                    <span class="keyword">var</span> p1 = inputPoints[inputPoints.length<span class="number">-2</span>];</span></span><br><span class="line"><span class="javascript">                                    <span class="keyword">var</span> p2 = inputPoints[inputPoints.length<span class="number">-1</span>];</span></span><br><span class="line"><span class="javascript">                                    <span class="keyword">if</span>(p1.x ===p2.x &amp;&amp;p1.y===p2.y)&#123;</span></span><br><span class="line"><span class="javascript">                                        <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">                                    &#125;</span></span><br><span class="line"><span class="javascript">                                    <span class="keyword">var</span> polyline = <span class="keyword">new</span> Polyline(map.spatialReference);</span></span><br><span class="line"><span class="undefined">                                    polyline.addPath([p1,p2]);</span></span><br><span class="line"><span class="undefined">                                    lengthParams.polylines=[polyline];</span></span><br><span class="line"><span class="javascript">                                    <span class="comment">// 根据参数，动态的计算长度</span></span></span><br><span class="line"><span class="javascript">                                    geometryService.lengths(lengthParams,<span class="function"><span class="keyword">function</span> (<span class="params">dis</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                                        <span class="built_in">console</span>.log(dis);</span></span><br><span class="line"><span class="javascript">                                        <span class="keyword">var</span> _distance = dis.lengths[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">                                        totleDistance+=<span class="built_in">parseFloat</span>(_distance);<span class="comment">//计算总长度</span></span></span><br><span class="line"><span class="javascript">                                        <span class="keyword">var</span> beetwentDistances = totleDistance.toFixed(<span class="number">2</span>)+<span class="string">"米"</span>;</span></span><br><span class="line"><span class="javascript">                                        <span class="keyword">var</span> tdistance = <span class="keyword">new</span> TextSymbol(beetwentDistances,startFont,<span class="keyword">new</span> Color([<span class="number">204</span>,<span class="number">102</span>,<span class="number">51</span>]));</span></span><br><span class="line"><span class="undefined">                                        tdistance.setOffset(40,-3);</span></span><br><span class="line"><span class="javascript">                                        measureLayer.add(<span class="keyword">new</span> Graphic(p2,tdistance));</span></span><br><span class="line"><span class="undefined">                                    &#125;);</span></span><br><span class="line"><span class="undefined">                                &#125;</span></span><br><span class="line"><span class="javascript">                                measureLayer.add(<span class="keyword">new</span> Graphic(evt.mapPoint,makerSymbol));<span class="comment">//添加样式点</span></span></span><br><span class="line"><span class="javascript">                            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(areaFun)&#123;</span></span><br><span class="line"><span class="javascript">                                measureLayer.add(<span class="keyword">new</span> Graphic(evt.mapPoint,makerSymbol));</span></span><br><span class="line"><span class="undefined">                            &#125;</span></span><br><span class="line"><span class="undefined">                        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//触发完成的事件</span></span></span><br><span class="line"><span class="javascript">                        toolbar.on(<span class="string">"draw-end"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                           <span class="comment">// console.log(evt);</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span>(disFun||areaFun)&#123;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">var</span> geometry=evt.geometry;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">var</span> symbol = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">switch</span>(geometry.type)&#123;</span></span><br><span class="line"><span class="javascript">                                    <span class="keyword">case</span> <span class="string">"polyline"</span>:</span></span><br><span class="line"><span class="javascript">                                        symbol  = <span class="keyword">new</span> SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,</span></span><br><span class="line"><span class="javascript">                                                <span class="keyword">new</span> Color([<span class="number">27</span>,<span class="number">188</span>,<span class="number">155</span>,<span class="number">1</span>]),<span class="number">2</span>);</span></span><br><span class="line"><span class="javascript">                                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                                    <span class="keyword">case</span> <span class="string">"polygon"</span>:</span></span><br><span class="line"><span class="javascript">                                        symbol = <span class="keyword">new</span> SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID,</span></span><br><span class="line"><span class="javascript">                                                <span class="keyword">new</span> SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,<span class="keyword">new</span> Color([<span class="number">27</span>,<span class="number">188</span>,<span class="number">155</span>,<span class="number">1</span>]),<span class="number">2</span>),</span></span><br><span class="line"><span class="javascript">                                                <span class="keyword">new</span> Color([<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>,<span class="number">0.25</span>]));</span></span><br><span class="line"><span class="javascript">                                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">                                &#125;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">var</span> graphic=<span class="keyword">new</span> Graphic(geometry,symbol);</span></span><br><span class="line"><span class="undefined">                                measureLayer.add(graphic);</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">if</span>(disFun)&#123;</span></span><br><span class="line"><span class="javascript">                                    inputPoints.splice(<span class="number">0</span>,inputPoints.length);<span class="comment">//删除数组中的所有元素</span></span></span><br><span class="line"><span class="javascript">                                    totleDistance =<span class="number">0.0</span>;<span class="comment">//清空距离值</span></span></span><br><span class="line"><span class="javascript">                                    disFun = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(areaFun)&#123;</span></span><br><span class="line"><span class="javascript">                                    <span class="keyword">var</span> areasAndLengthParams = <span class="keyword">new</span> AreasAndLengthsParameters(); <span class="comment">//计算面积和周长的参数</span></span></span><br><span class="line"><span class="javascript">                                    areasAndLengthParams.lengthUnit = GeometryService.UNIT_METER;<span class="comment">//设置距离单位</span></span></span><br><span class="line"><span class="javascript">                                    areasAndLengthParams.areaUnit=geometryService.UNIT_SQUARE_METERS; <span class="comment">//平方米</span></span></span><br><span class="line"><span class="javascript">                                    areasAndLengthParams.calculationType=<span class="string">"preserveShape"</span>;</span></span><br><span class="line"><span class="javascript">                                    geometryService.simplify([geometry],<span class="function"><span class="keyword">function</span> (<span class="params">simplifiedGeometries</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                                        areasAndLengthParams.polygons=simplifiedGeometries;</span></span><br><span class="line"><span class="javascript">                                        geometryService.areasAndLengths(areasAndLengthParams,<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                                           <span class="comment">// console.log(result);</span></span></span><br><span class="line"><span class="javascript">                                            <span class="keyword">var</span> font =<span class="keyword">new</span> Font(<span class="string">"14px"</span>,Font.STYLE_NORMAL,Font.VARIANT_NORMAL,Font.WEIGHT_BOLDER);</span></span><br><span class="line"><span class="javascript">                                            <span class="keyword">var</span> areaResult = <span class="keyword">new</span> TextSymbol(<span class="built_in">parseFloat</span>(result.areas[<span class="number">0</span>]).toFixed(<span class="number">2</span>) + <span class="string">"平方米"</span>,font,<span class="keyword">new</span> Color([<span class="number">204</span>,<span class="number">102</span>,<span class="number">51</span>]));</span></span><br><span class="line"><span class="javascript">                                            <span class="keyword">var</span> spoint = <span class="keyword">new</span> Point(geometry.getExtent().getCenter().x,geometry.getExtent().getCenter().y,map.spatialReference);</span></span><br><span class="line"><span class="javascript">                                            measureLayer.add(<span class="keyword">new</span> Graphic(spoint,areaResult));<span class="comment">//在地图上显示测量的面积</span></span></span><br><span class="line"><span class="undefined">                                        &#125;)</span></span><br><span class="line"><span class="undefined">                                    &#125;);</span></span><br><span class="line"><span class="javascript">                                    areaFun=<span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">                                &#125;</span></span><br><span class="line"><span class="undefined">                            &#125;</span></span><br><span class="line"><span class="javascript">                            toolbar.deactivate();<span class="comment">//撤销地图绘制功能</span></span></span><br><span class="line"><span class="undefined">                        &#125;);</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//清除功能</span></span></span><br><span class="line"><span class="javascript">                        <span class="function"><span class="keyword">function</span> <span class="title">clearAction</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            disFun=<span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                            inputPoints.splice(<span class="number">0</span>,inputPoints.length);<span class="comment">//删除数组中的所有元素</span></span></span><br><span class="line"><span class="javascript">                            totleDistance =<span class="number">0.0</span>;<span class="comment">//清空距离值</span></span></span><br><span class="line"><span class="javascript">                            areaFun=<span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">                            toolbar.deactivate();</span></span><br><span class="line"><span class="javascript">                            map.setMapCursor(<span class="string">"default"</span>);</span></span><br><span class="line"><span class="undefined">                            measureLayer.clear();</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><div align="center"><img src="/2018/05/14/arcgis-api实现一些常用的功能/line.png" width="500" height="400" alt="测量距离" align="center"><br></div><div align="center"><img src="/2018/05/14/arcgis-api实现一些常用的功能/area.png" width="500" height="400" alt="测量面积" align="center"><br></div><h3 id="动态轨迹"><a href="#动态轨迹" class="headerlink" title="动态轨迹"></a>动态轨迹</h3><p>原理也就是写一个定时器。一个点动态的沿着线从起点到线的终点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;动态轨迹demo&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;link rel="stylesheet" type="text/</span>css<span class="string">" href="</span>http:<span class="comment">//120.77.215.143:6012/arcgis_js_api/library/3.21/3.21/dijit/themes/tundra/tundra.css"/&gt;</span></span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"http://120.77.215.143:6012/arcgis_js_api/library/3.21/3.21/esri/css/esri.css"</span>/&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://120.77.215.143:6012/arcgis_js_api/library/3.21/3.21/init.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    &lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="map" style="height: 700px;width: 100%;"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;input type=<span class="string">"button"</span> id=<span class="string">"openTool"</span>   value=<span class="string">"开启"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    require(["esri/map", "extLayers/gaodeLayer","extLayers/TDTLayer",</span></span><br><span class="line"><span class="regexp">        "esri/geometry/Polyline","esri/symbols/SimpleLineSymbol","esri/graphic","esri/layers/GraphicsLayer",</span></span><br><span class="line"><span class="regexp">        "esri/geometry/Point","esri/symbols/PictureMarkerSymbol","esri/SpatialReference"</span></span><br><span class="line"><span class="regexp">    ],function (Map,gaodeLayer,TDTLayer,Polyline,SimpleLineSymbol,Graphic,GraphicsLayer,Point,PictureMarkerSymbol,SpatialReference) &#123;</span></span><br><span class="line"><span class="regexp">        var map=new Map("map",&#123;</span></span><br><span class="line"><span class="regexp">            center:[112.6,30.5],</span></span><br><span class="line"><span class="regexp">            zoom:6,</span></span><br><span class="line"><span class="regexp">            slider:true,</span></span><br><span class="line"><span class="regexp">            nav:false,</span></span><br><span class="line"><span class="regexp">            logo:false</span></span><br><span class="line"><span class="regexp">        &#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        var gaodelayer=new gaodeLayer();</span></span><br><span class="line"><span class="regexp">        map.addLayer(gaodelayer);</span></span><br><span class="line"><span class="regexp">        var graphicsLayer1=new GraphicsLayer();/</span><span class="regexp">/线图层</span></span><br><span class="line"><span class="regexp">        map.addLayer(graphicsLayer1);</span></span><br><span class="line"><span class="regexp">        var graphicsLayer=new GraphicsLayer();/</span><span class="regexp">/动态点图层</span></span><br><span class="line"><span class="regexp">        map.addLayer(graphicsLayer);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        var path=&#123;"point":[[113.68,34.53], [115.58,34.55], [113.57,30.58],[115.53,30.6]]&#125;;</span></span><br><span class="line"><span class="regexp">        var polyline = new Polyline(new SpatialReference(&#123;wkid:4326&#125;));</span></span><br><span class="line"><span class="regexp">        polyline.addPath(path.point);</span></span><br><span class="line"><span class="regexp">        var sys=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH,new esri.Color([0,255,0]),3);</span></span><br><span class="line"><span class="regexp">        var g=new Graphic(polyline,sys);</span></span><br><span class="line"><span class="regexp">        graphicsLayer1.add(g);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        var point=new Point(path.point[0],new SpatialReference(&#123;wkid:4326&#125;));</span></span><br><span class="line"><span class="regexp">        var picBaseUrl = "https:/</span><span class="regexp">/static.arcgis.com/im</span>ages/Symbols/Shapes/<span class="string">";</span></span><br><span class="line"><span class="string">        var blue = new PictureMarkerSymbol(picBaseUrl + "</span>BluePin1LargeB.png<span class="string">", 30, 30).setOffset(0, 15);</span></span><br><span class="line"><span class="string">        var graphic=new Graphic(point,blue);</span></span><br><span class="line"><span class="string">        graphicsLayer.add(graphic);</span></span><br><span class="line"><span class="string">        //根据坐标点进行移动</span></span><br><span class="line"><span class="string">        var points,moving;</span></span><br><span class="line"><span class="string">        var startNum,endNum;</span></span><br><span class="line"><span class="string">        document.getElementById("</span>openTool<span class="string">").onclick=function()&#123;</span></span><br><span class="line"><span class="string">            if(typeof(moving)!="</span><span class="literal">undefined</span><span class="string">")&#123;</span></span><br><span class="line"><span class="string">                clearInterval(moving); //清除移动</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            points = path.point;</span></span><br><span class="line"><span class="string">            graphic.geometry.x = points[0][0];</span></span><br><span class="line"><span class="string">            graphic.geometry.y = points[0][1];</span></span><br><span class="line"><span class="string">            graphicsLayer.redraw();</span></span><br><span class="line"><span class="string">            move(0,1);</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">        function move(start,end) &#123;</span></span><br><span class="line"><span class="string">            var x1=points[start][0];</span></span><br><span class="line"><span class="string">            var y1=points[start][1];</span></span><br><span class="line"><span class="string">            var x2=points[end][0];</span></span><br><span class="line"><span class="string">            var y2=points[end][1];</span></span><br><span class="line"><span class="string">            var p=(y2-y1)/(x2-x1);//斜率</span></span><br><span class="line"><span class="string">            var v=0.01; //距离</span></span><br><span class="line"><span class="string">            moving=setInterval(function () &#123;</span></span><br><span class="line"><span class="string">                startNum=start;</span></span><br><span class="line"><span class="string">                endNum=end;</span></span><br><span class="line"><span class="string">                //分别计算 x,y轴方向速度</span></span><br><span class="line"><span class="string">                if(Math.abs(p)==Number.POSITIVE_INFINITY)&#123;//p为无穷大</span></span><br><span class="line"><span class="string">                    graphic.geometry.y+=v;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                else &#123;</span></span><br><span class="line"><span class="string">                    if (x2&lt;x1)&#123;</span></span><br><span class="line"><span class="string">                        graphic.geometry.x-=(1/Math.sqrt(1+p*p))*v;</span></span><br><span class="line"><span class="string">                        graphic.geometry.y-=(p/Math.sqrt(1+p*p))*v;</span></span><br><span class="line"><span class="string">                    &#125;else &#123;</span></span><br><span class="line"><span class="string">                        graphic.geometry.x+=(1/Math.sqrt(1+p*p))*v;</span></span><br><span class="line"><span class="string">                        graphic.geometry.y+=(p/Math.sqrt(1+p*p))*v;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                graphicsLayer.redraw();</span></span><br><span class="line"><span class="string">                if (Math.abs(graphic.geometry.x - x2) &lt;=0.01 &amp;&amp; Math.abs(graphic.geometry.y - y2) &lt;=0.01) &#123;</span></span><br><span class="line"><span class="string">                    clearInterval(moving);</span></span><br><span class="line"><span class="string">                    startNum=start++;</span></span><br><span class="line"><span class="string">                    endNum=end++;</span></span><br><span class="line"><span class="string">                    if (end &lt; points.length)</span></span><br><span class="line"><span class="string">                        move(start, end);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;,50);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="聚类功能"><a href="#聚类功能" class="headerlink" title="聚类功能"></a>聚类功能</h3><p>运用场景：从数据库中读取的点数据量很大或者小区域内点很密集影响展示的两种情况可以采取聚类的方式来得到解决。<br>从arcgis api官方提供的聚类方法源码中，还不符合我的需求。1.当地图缩放到一定等级之后就不需要聚类了。2.点击聚类点不需要弹窗只需要单机一个点时才弹窗。<br>所以修改了源码，并添加注释。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br></pre></td><td class="code"><pre><span class="line">define([</span><br><span class="line">  <span class="string">"dojo/_base/declare"</span>,</span><br><span class="line">  <span class="string">"dojo/_base/array"</span>,</span><br><span class="line">  <span class="string">"esri/Color"</span>,</span><br><span class="line">  <span class="string">"dojo/_base/connect"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">"esri/SpatialReference"</span>,</span><br><span class="line">  <span class="string">"esri/geometry/Point"</span>,</span><br><span class="line">  <span class="string">"esri/graphic"</span>,</span><br><span class="line">  <span class="string">"esri/symbols/SimpleMarkerSymbol"</span>,</span><br><span class="line">  <span class="string">"esri/symbols/TextSymbol"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">"esri/dijit/PopupTemplate"</span>,</span><br><span class="line">  <span class="string">"esri/layers/GraphicsLayer"</span></span><br><span class="line">], <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  declare, arrayUtils, Color, connect,</span></span></span><br><span class="line"><span class="function"><span class="params">  SpatialReference, Point, Graphic, SimpleMarkerSymbol, TextSymbol,</span></span></span><br><span class="line"><span class="function"><span class="params">  PopupTemplate, GraphicsLayer</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> declare([GraphicsLayer], &#123;</span><br><span class="line">      <span class="keyword">constructor</span>: function (options) &#123;</span><br><span class="line">        <span class="comment">// options:</span></span><br><span class="line">        <span class="comment">//   data:  Object[]</span></span><br><span class="line">        <span class="comment">//     Array of objects. Required. Object are required to have properties named x, y and attributes. The x and y coordinates have to be numbers that represent a points coordinates.</span></span><br><span class="line">        <span class="comment">//   distance:  Number?</span></span><br><span class="line">        <span class="comment">//     Optional. The max number of pixels between points to group points in the same cluster. Default value is 50.</span></span><br><span class="line">        <span class="comment">//   labelColor:  String?</span></span><br><span class="line">        <span class="comment">//     Optional. Hex string or array of rgba values used as the color for cluster labels. Default value is #fff (white).</span></span><br><span class="line">        <span class="comment">//   labelOffset:  String?</span></span><br><span class="line">        <span class="comment">//     Optional. Number of pixels to shift a cluster label vertically. Defaults to -5 to align labels with circle symbols. Does not work in IE.</span></span><br><span class="line">        <span class="comment">//   resolution:  Number</span></span><br><span class="line">        <span class="comment">//     Required. Width of a pixel in map coordinates. Example of how to calculate: </span></span><br><span class="line">        <span class="comment">//     map.extent.getWidth() / map.width</span></span><br><span class="line">        <span class="comment">//   showSingles:  Boolean?</span></span><br><span class="line">        <span class="comment">//     Optional. Whether or graphics should be displayed when a cluster graphic is clicked. Default is true.</span></span><br><span class="line">        <span class="comment">//   singleSymbol:  MarkerSymbol?</span></span><br><span class="line">        <span class="comment">//     Marker Symbol (picture or simple). Optional. Symbol to use for graphics that represent single points. Default is a small gray SimpleMarkerSymbol.</span></span><br><span class="line">        <span class="comment">//   singleTemplate:  PopupTemplate?</span></span><br><span class="line">        <span class="comment">//     PopupTemplate&lt;/a&gt;. Optional. Popup template used to format attributes for graphics that represent single points. Default shows all attributes as "attribute = value" (not recommended).</span></span><br><span class="line">        <span class="comment">//   maxSingles:  Number?</span></span><br><span class="line">        <span class="comment">//     Optional. Threshold for whether or not to show graphics for points in a cluster. Default is 1000.</span></span><br><span class="line">        <span class="comment">//   webmap:  Boolean?</span></span><br><span class="line">        <span class="comment">//     Optional. Whether or not the map is from an ArcGIS.com webmap. Default is false.</span></span><br><span class="line">        <span class="comment">//   spatialReference:  SpatialReference?</span></span><br><span class="line">        <span class="comment">//     Optional. Spatial reference for all graphics in the layer. This has to match the spatial reference of the map. Default is 102100. Omit this if the map uses basemaps in web mercator.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._clusterTolerance = options.distance || <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">this</span>._clusterData = options.data || [];</span><br><span class="line">        <span class="keyword">this</span>._clusters = [];</span><br><span class="line">        <span class="keyword">this</span>._clusterLabelColor = options.labelColor || <span class="string">"#000"</span>;</span><br><span class="line">        <span class="comment">// labelOffset can be zero so handle it differently</span></span><br><span class="line">        <span class="keyword">this</span>._clusterLabelOffset = (options.hasOwnProperty(<span class="string">"labelOffset"</span>)) ? options.labelOffset : <span class="number">-5</span>;</span><br><span class="line">        <span class="comment">// graphics that represent a single point</span></span><br><span class="line">        <span class="keyword">this</span>._singles = []; <span class="comment">// populated when a graphic is clicked</span></span><br><span class="line">        <span class="keyword">this</span>._showSingles = options.hasOwnProperty(<span class="string">"showSingles"</span>) ? options.showSingles : <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// symbol for single graphics</span></span><br><span class="line">        <span class="keyword">var</span> SMS = SimpleMarkerSymbol;</span><br><span class="line">        <span class="keyword">this</span>._singleSym = options.singleSymbol || <span class="keyword">new</span> SMS(<span class="string">"circle"</span>, <span class="number">6</span>, <span class="literal">null</span>, <span class="keyword">new</span> Color(<span class="string">"#888"</span>));</span><br><span class="line">        <span class="keyword">this</span>._singleTemplate = options.singleTemplate || <span class="keyword">new</span> PopupTemplate(&#123; <span class="string">"title"</span>: <span class="string">""</span>, <span class="string">"description"</span>: <span class="string">"&#123;*&#125;"</span> &#125;);</span><br><span class="line">        <span class="keyword">this</span>._maxSingles = options.maxSingles || <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._webmap = options.hasOwnProperty(<span class="string">"webmap"</span>) ? options.webmap : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._sr = options.spatialReference || <span class="keyword">new</span> SpatialReference(&#123; <span class="string">"wkid"</span>: <span class="number">102100</span> &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._zoomEnd = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//新增属性</span></span><br><span class="line">        <span class="keyword">this</span>._maxZoom = options.maxZoom || <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">this</span>._map = <span class="literal">null</span>;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// override esri/layers/GraphicsLayer methods 重写setMap方法</span></span><br><span class="line">      _setMap: <span class="function"><span class="keyword">function</span> (<span class="params">map, surface</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// calculate and set the initial resolution 计算和设置初始分辨率</span></span><br><span class="line">        <span class="keyword">this</span>._clusterResolution = map.extent.getWidth() / map.width; <span class="comment">// probably a bad default...</span></span><br><span class="line">        <span class="keyword">this</span>._map = map;<span class="comment">//将map设置为全局变量</span></span><br><span class="line">        <span class="keyword">this</span>._clusterGraphics();<span class="comment">//聚类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// connect to onZoomEnd so data is re-clustered when zoom level changes当缩放级别改变时数据会重新聚集。</span></span><br><span class="line">        <span class="keyword">this</span>._zoomEnd = connect.connect(map, <span class="string">"onZoomEnd"</span>, <span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// update resolution</span></span><br><span class="line">          <span class="keyword">this</span>._clusterResolution = <span class="keyword">this</span>._map.extent.getWidth() / <span class="keyword">this</span>._map.width;</span><br><span class="line">          <span class="keyword">this</span>.clear();<span class="comment">//清除</span></span><br><span class="line">          <span class="keyword">this</span>._clusterGraphics(); <span class="comment">//重新聚类</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// GraphicsLayer will add its own listener here</span></span><br><span class="line">        <span class="keyword">var</span> div = <span class="keyword">this</span>.inherited(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> div;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      _unsetMap: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.inherited(<span class="built_in">arguments</span>);</span><br><span class="line">        connect.disconnect(<span class="keyword">this</span>._zoomEnd);</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// public ClusterLayer methods</span></span><br><span class="line">      add: <span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Summary:  The argument is a data point to be added to an existing cluster. If the data point falls within an existing cluster, it is added to that cluster and the cluster's label is updated. If the new point does not fall within an existing cluster, a new cluster is created.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// if passed a graphic, use the GraphicsLayer's add method</span></span><br><span class="line">        <span class="keyword">if</span> (p.declaredClass) &#123;</span><br><span class="line">          <span class="keyword">this</span>.inherited(<span class="built_in">arguments</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// add the new data to _clusterData so that it's included in clusters</span></span><br><span class="line">        <span class="comment">// when the map level changes</span></span><br><span class="line">        <span class="keyword">this</span>._clusterData.push(p);</span><br><span class="line">        <span class="keyword">var</span> clustered = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// look for an existing cluster for the new point</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>._clusters.length; i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> c = <span class="keyword">this</span>._clusters[i];</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>._clusterTest(p, c)) &#123;</span><br><span class="line">            <span class="comment">// add the point to an existing cluster</span></span><br><span class="line">            <span class="keyword">this</span>._clusterAddPoint(p, c);</span><br><span class="line">            <span class="comment">// update the cluster's geometry</span></span><br><span class="line">            <span class="keyword">this</span>._updateClusterGeometry(c);</span><br><span class="line">            <span class="comment">// update the label</span></span><br><span class="line">            <span class="keyword">this</span>._updateLabel(c);</span><br><span class="line">            clustered = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!clustered) &#123;</span><br><span class="line">          <span class="keyword">this</span>._clusterCreate(p);</span><br><span class="line">          p.attributes.clusterCount = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">this</span>._showCluster(p);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      clear: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Summary:  Remove all clusters and data points.</span></span><br><span class="line">        <span class="keyword">this</span>.inherited(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">this</span>._clusters.length = <span class="number">0</span>;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      clearSingles: <span class="function"><span class="keyword">function</span> (<span class="params">singles</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Summary:  Remove graphics that represent individual data points.</span></span><br><span class="line">        <span class="keyword">var</span> s = singles || <span class="keyword">this</span>._singles;</span><br><span class="line">        arrayUtils.forEach(s, <span class="function"><span class="keyword">function</span> (<span class="params">g</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.remove(g);</span><br><span class="line">        &#125;, <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>._singles.length = <span class="number">0</span>;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      onClick: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// remove any previously showing single features</span></span><br><span class="line">        <span class="keyword">this</span>.clearSingles(<span class="keyword">this</span>._singles);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// find single graphics that make up the cluster that was clicked</span></span><br><span class="line">        <span class="comment">// would be nice to use filter but performance tanks with large arrays in IE</span></span><br><span class="line">        <span class="keyword">var</span> singles = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, il = <span class="keyword">this</span>._clusterData.length; i &lt; il; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (e.graphic.attributes.clusterId == <span class="keyword">this</span>._clusterData[i].attributes.clusterId) &#123;</span><br><span class="line">            singles.push(<span class="keyword">this</span>._clusterData[i]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果聚类点的个数大于0</span></span><br><span class="line">        <span class="keyword">if</span> (singles.length &gt; <span class="keyword">this</span>._maxSingles || singles.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">// alert("Sorry, that cluster contains more than " + this._maxSingles + " points. Zoom in for more detail.");</span></span><br><span class="line">          <span class="keyword">var</span> level = <span class="keyword">this</span>._map.getLevel() + <span class="number">2</span> &gt;= <span class="number">17</span> ? <span class="number">17</span> : <span class="keyword">this</span>._map.getLevel() + <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">this</span>._map.setZoom(level);</span><br><span class="line">          <span class="keyword">this</span>._map.centerAt(e.graphic.geometry);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// stop the click from bubbling to the map</span></span><br><span class="line">          e.stopPropagation(); <span class="comment">//阻止map的冒泡事件</span></span><br><span class="line">          <span class="keyword">this</span>._map.infoWindow.show(e.graphic.geometry);</span><br><span class="line">          <span class="keyword">this</span>._addSingles(singles);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// internal methods 内部方法</span></span><br><span class="line">      _clusterGraphics: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// first time through, loop through the points 遍历所有数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, jl = <span class="keyword">this</span>._clusterData.length; j &lt; jl; j++) &#123;</span><br><span class="line">          <span class="comment">// see if the current feature should be added to a cluster</span></span><br><span class="line">          <span class="keyword">var</span> point = <span class="keyword">this</span>._clusterData[j];</span><br><span class="line">          <span class="comment">//状态</span></span><br><span class="line">          <span class="keyword">var</span> clustered = <span class="literal">false</span>;</span><br><span class="line">          <span class="comment">//遍历聚类数据</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>._clusters.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> c = <span class="keyword">this</span>._clusters[i];</span><br><span class="line">            <span class="comment">//如果为true,就push到同一个数组中</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._clusterTest(point, c)) &#123;</span><br><span class="line">              <span class="keyword">this</span>._clusterAddPoint(point, c);</span><br><span class="line">              clustered = <span class="literal">true</span>;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (!clustered) &#123;</span><br><span class="line">            <span class="comment">//如果不为真，将点push到要聚类的数组中</span></span><br><span class="line">            <span class="keyword">this</span>._clusterCreate(point);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>._showAllClusters();</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//判断点是否需要聚类</span></span><br><span class="line">      _clusterTest: <span class="function"><span class="keyword">function</span> (<span class="params">p, cluster</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//计算距离</span></span><br><span class="line">        <span class="keyword">var</span> distance = (</span><br><span class="line">          <span class="built_in">Math</span>.sqrt(</span><br><span class="line">            <span class="built_in">Math</span>.pow((cluster.x - p.x), <span class="number">2</span>) + <span class="built_in">Math</span>.pow((cluster.y - p.y), <span class="number">2</span>)</span><br><span class="line">          ) / <span class="keyword">this</span>._clusterResolution</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">var</span> _flag = (distance &lt;= <span class="keyword">this</span>._clusterTolerance);</span><br><span class="line">        <span class="keyword">var</span> _level = <span class="keyword">this</span>._map.getZoom();</span><br><span class="line">        <span class="keyword">if</span> (_level &gt;= <span class="keyword">this</span>._maxZoom) _flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> _flag;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// points passed to clusterAddPoint should be included </span></span><br><span class="line">      <span class="comment">// in an existing cluster</span></span><br><span class="line">      <span class="comment">// also give the point an attribute called clusterId </span></span><br><span class="line">      <span class="comment">// that corresponds to its cluster</span></span><br><span class="line">      <span class="comment">//将point加到cluster数组中</span></span><br><span class="line">      _clusterAddPoint: <span class="function"><span class="keyword">function</span> (<span class="params">p, cluster</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// average in the new point to the cluster geometry</span></span><br><span class="line">        <span class="keyword">var</span> count, x, y;</span><br><span class="line">        count = cluster.attributes.clusterCount;</span><br><span class="line">        <span class="comment">//重新计算cluster对象的x,y,总数</span></span><br><span class="line">        x = (p.x + (cluster.x * count)) / (count + <span class="number">1</span>);</span><br><span class="line">        y = (p.y + (cluster.y * count)) / (count + <span class="number">1</span>);</span><br><span class="line">        cluster.x = x;</span><br><span class="line">        cluster.y = y;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// build an extent that includes all points in a cluster</span></span><br><span class="line">        <span class="comment">// extents are for debug/testing only...not used by the layer</span></span><br><span class="line">        <span class="comment">//修改cluster的四至</span></span><br><span class="line">        <span class="keyword">if</span> (p.x &lt; cluster.attributes.extent[<span class="number">0</span>]) &#123;</span><br><span class="line">          cluster.attributes.extent[<span class="number">0</span>] = p.x;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.x &gt; cluster.attributes.extent[<span class="number">2</span>]) &#123;</span><br><span class="line">          cluster.attributes.extent[<span class="number">2</span>] = p.x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p.y &lt; cluster.attributes.extent[<span class="number">1</span>]) &#123;</span><br><span class="line">          cluster.attributes.extent[<span class="number">1</span>] = p.y;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.y &gt; cluster.attributes.extent[<span class="number">3</span>]) &#123;</span><br><span class="line">          cluster.attributes.extent[<span class="number">3</span>] = p.y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// increment the count 增加++</span></span><br><span class="line">        cluster.attributes.clusterCount++;</span><br><span class="line">        <span class="comment">// 判断对象是否含有指定的属性的</span></span><br><span class="line">        <span class="keyword">if</span> (!p.hasOwnProperty(<span class="string">"attributes"</span>)) &#123;</span><br><span class="line">          p.attributes = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// give the graphic a cluster id 将p的clusterId设置为cluster的id</span></span><br><span class="line">        p.attributes.clusterId = cluster.attributes.clusterId;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// point passed to clusterCreate isn't within the </span></span><br><span class="line">      <span class="comment">// clustering distance specified for the layer so</span></span><br><span class="line">      <span class="comment">// create a new cluster for it</span></span><br><span class="line">      <span class="comment">//创建cluster对象</span></span><br><span class="line">      _clusterCreate: <span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> clusterId = <span class="keyword">this</span>._clusters.length + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// p.attributes might be undefined 如果没有定义attributes</span></span><br><span class="line">        <span class="keyword">if</span> (!p.attributes) &#123;</span><br><span class="line">          p.attributes = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        p.attributes.clusterId = clusterId;</span><br><span class="line">        <span class="comment">// 创建cluster对象</span></span><br><span class="line">        <span class="keyword">var</span> cluster = &#123;</span><br><span class="line">          <span class="string">"x"</span>: p.x,</span><br><span class="line">          <span class="string">"y"</span>: p.y,</span><br><span class="line">          <span class="string">"attributes"</span>: &#123;</span><br><span class="line">            <span class="string">"clusterCount"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"clusterId"</span>: clusterId,</span><br><span class="line">            <span class="string">"extent"</span>: [p.x, p.y, p.x, p.y]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>._clusters.push(cluster);<span class="comment">//push到聚类数组中</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//显示聚类数组</span></span><br><span class="line">      _showAllClusters: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, il = <span class="keyword">this</span>._clusters.length; i &lt; il; i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> c = <span class="keyword">this</span>._clusters[i];</span><br><span class="line">          <span class="keyword">this</span>._showCluster(c);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      _showCluster: <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> point = <span class="keyword">new</span> Point(c.x, c.y, <span class="keyword">this</span>._sr);</span><br><span class="line">        <span class="keyword">this</span>.add(</span><br><span class="line">          <span class="keyword">new</span> Graphic(</span><br><span class="line">            point,</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            c.attributes</span><br><span class="line">          )</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// code below is used to not label clusters with a single point</span></span><br><span class="line">        <span class="comment">//如果聚类数组中的cluster对象的clusterCount为1，就不需要加label</span></span><br><span class="line">        <span class="keyword">if</span> (c.attributes.clusterCount == <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// show number of points in the cluster</span></span><br><span class="line">        <span class="comment">//显示聚类点数</span></span><br><span class="line">        <span class="keyword">var</span> label = <span class="keyword">new</span> TextSymbol(c.attributes.clusterCount.toString())</span><br><span class="line">          .setColor(<span class="keyword">new</span> Color(<span class="keyword">this</span>._clusterLabelColor))</span><br><span class="line">          .setOffset(<span class="number">0</span>, <span class="keyword">this</span>._clusterLabelOffset);</span><br><span class="line">        <span class="keyword">this</span>.add(</span><br><span class="line">          <span class="keyword">new</span> Graphic(</span><br><span class="line">            point,</span><br><span class="line">            label,</span><br><span class="line">            c.attributes</span><br><span class="line">          )</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      _addSingles: <span class="function"><span class="keyword">function</span> (<span class="params">singles</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// add single graphics to the map</span></span><br><span class="line">        arrayUtils.forEach(singles, <span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> g = <span class="keyword">new</span> Graphic(</span><br><span class="line">            <span class="keyword">new</span> Point(p.x, p.y, <span class="keyword">this</span>._sr),</span><br><span class="line">            <span class="keyword">this</span>._singleSym,</span><br><span class="line">            p.attributes,</span><br><span class="line">            <span class="keyword">this</span>._singleTemplate</span><br><span class="line">          );</span><br><span class="line">          <span class="keyword">this</span>._singles.push(g);</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>._showSingles) &#123;</span><br><span class="line">            <span class="keyword">this</span>.add(g);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>._map.infoWindow.setFeatures(<span class="keyword">this</span>._singles);</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">//add方法中修改cluster的x,y</span></span><br><span class="line">      _updateClusterGeometry: <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// find the cluster graphic 根据clusterId在聚类数组中找到这个cluster</span></span><br><span class="line">        <span class="keyword">var</span> cg = arrayUtils.filter(<span class="keyword">this</span>.graphics, <span class="function"><span class="keyword">function</span> (<span class="params">g</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> !g.symbol &amp;&amp;</span><br><span class="line">            g.attributes.clusterId == c.attributes.clusterId;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//修改这个cluster的x,y</span></span><br><span class="line">        <span class="keyword">if</span> (cg.length == <span class="number">1</span>) &#123;</span><br><span class="line">          cg[<span class="number">0</span>].geometry.update(c.x, c.y);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"在聚类数组中没有找到这个对象: "</span>, cg);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//add方法中修改cluster的样式</span></span><br><span class="line">      _updateLabel: <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// find the existing label</span></span><br><span class="line">        <span class="keyword">var</span> label = arrayUtils.filter(<span class="keyword">this</span>.graphics, <span class="function"><span class="keyword">function</span> (<span class="params">g</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> g.symbol &amp;&amp;</span><br><span class="line">            g.symbol.declaredClass == <span class="string">"esri.symbol.TextSymbol"</span> &amp;&amp;</span><br><span class="line">            g.attributes.clusterId == c.attributes.clusterId;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (label.length == <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">// console.log("update label...found: ", label);</span></span><br><span class="line">          <span class="keyword">this</span>.remove(label[<span class="number">0</span>]);</span><br><span class="line">          <span class="keyword">var</span> newLabel = <span class="keyword">new</span> TextSymbol(c.attributes.clusterCount)</span><br><span class="line">            .setColor(<span class="keyword">new</span> Color(<span class="keyword">this</span>._clusterLabelColor))</span><br><span class="line">            .setOffset(<span class="number">0</span>, <span class="keyword">this</span>._clusterLabelOffset);</span><br><span class="line">          <span class="keyword">this</span>.add(</span><br><span class="line">            <span class="keyword">new</span> Graphic(</span><br><span class="line">              <span class="keyword">new</span> Point(c.x, c.y, <span class="keyword">this</span>._sr),</span><br><span class="line">              newLabel,</span><br><span class="line">              c.attributes</span><br><span class="line">            )</span><br><span class="line">          );</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"在聚类数组中没有找到这个对象: "</span>, label);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// debug only...never called by the layer</span></span><br><span class="line">      _clusterMeta: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// print total number of features</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Total:  "</span>, <span class="keyword">this</span>._clusterData.length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// add up counts and print it</span></span><br><span class="line">        <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">        arrayUtils.forEach(<span class="keyword">this</span>._clusters, <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">          count += c.attributes.clusterCount;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"In clusters:  "</span>, count);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>在<a href="https://github.com/OuYangResume/mapdemo" target="_blank" rel="noopener">github</a>上放有具体应用。</p>]]></content>
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用mybatis-generator自动生成代码</title>
      <link href="/2018/04/12/%E5%88%A9%E7%94%A8mybatis-generator%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/"/>
      <content type="html"><![CDATA[<h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2><p>常用的逆向工程方式是通过数据库的表生成代码（包括mapper.xml、dao.java、bean.java）。</p><h2 id="配置Maven的pom-xml文件"><a href="#配置Maven的pom-xml文件" class="headerlink" title="配置Maven的pom.xml文件"></a>配置Maven的pom.xml文件</h2><a id="more"></a><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- MyBatis代码生成 --&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;verbose&gt;true&lt;/verbose&gt;</span><br><span class="line">          &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">          &lt;configurationFile&gt;generatorConfig.xml&lt;/configurationFile&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">          &lt;!-- 数据库驱动 --&gt;</span><br><span class="line">          &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.30&lt;/version&gt;</span><br><span class="line">          &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h2 id="编写generatorConfig-xml文件"><a href="#编写generatorConfig-xml文件" class="headerlink" title="编写generatorConfig.xml文件"></a>编写generatorConfig.xml文件</h2><p> 可以看到pom.xml文件中配置了generatorConfig.xml的所在位置</p><div align="center"><img src="/2018/04/12/利用mybatis-generator自动生成代码/project.png" width="300" height="400" alt="图片名称" align="center"><br></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context id=<span class="string">"MySQLTables"</span> targetRuntime=<span class="string">"MyBatis3"</span>&gt;</span><br><span class="line">        &lt;!--关闭注释 --&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;property name=<span class="string">"suppressDate"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--数据库连接信息 --&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass=<span class="string">"com.mysql.jdbc.Driver"</span> connectionURL=<span class="string">"jdbc:mysql://&#123;&#123;ip&#125;&#125;:3306/database?useUnicode=true&amp;amp;characterEncoding=utf-8"</span> userId=<span class="string">"root"</span></span><br><span class="line">                        password=<span class="string">"&#123;&#123;密码&#125;&#125;"</span>&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--生成的model 包路径 --&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=<span class="string">"cn.edu.whu.bean"</span> targetProject=<span class="string">"F:\IdeaWork\SSM\src\main\java"</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">"enableSubPackages"</span> value=<span class="string">"ture"</span>/&gt;</span><br><span class="line">            &lt;property name=<span class="string">"trimStrings"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--生成xml mapper文件 路径 --&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=<span class="string">"mybatis"</span> targetProject=<span class="string">"F:\IdeaWork\SSM\src\main\resources"</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">"enableSubPackages"</span> value=<span class="string">"ture"</span>/&gt;</span><br><span class="line">        &lt;/sqlMapGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 生成的Dao接口 的包路径 --&gt;</span><br><span class="line">        &lt;javaClientGenerator type=<span class="string">"XMLMAPPER"</span> targetPackage=<span class="string">"cn.edu.whu.dao"</span> targetProject=<span class="string">"F:\IdeaWork\SSM\src\main\java"</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">"enableSubPackages"</span> value=<span class="string">"ture"</span>/&gt;</span><br><span class="line">        &lt;/javaClientGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--对应数据库表名 --&gt;</span><br><span class="line">        &lt;table tableName=<span class="string">"access"</span>&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><p>绝大部分出错都是<strong>路径问题</strong>，上面也可以同时生成多个表。</p><h2 id="执行generatorConfig-xml生成代码"><a href="#执行generatorConfig-xml生成代码" class="headerlink" title="执行generatorConfig.xml生成代码"></a>执行generatorConfig.xml生成代码</h2><p><div align="center"><br><img src="/2018/04/12/利用mybatis-generator自动生成代码/jg.png" width="200" height="350" alt="图片名称"><br></div><br>图中标红的代码即是生成的代码。自动生成的代码也只有简单的增删改查。业务逻辑代码还需要自己敲咯。</p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端知识图谱</title>
      <link href="/2018/04/11/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
      <content type="html"><![CDATA[<h4 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h4><p>浅复制 —-只是拷贝了基本类型的数据，而引用类型数据，复制后也是会发生引用，我们把这种拷贝叫做“（浅复制）浅拷贝”，换句话说，浅复制仅仅是指向被复制的内存地址，如果原地址中对象被改变了，那么浅复制出来的对象也会相应改变。</p><p>深复制 —-在计算机中开辟了一块新的内存地址用于存放复制的对象。<br>浅拷贝实例<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此递归方法不包含数组对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">arr</span>: [<span class="number">2</span>,<span class="number">3</span>] &#125;;</span><br><span class="line"><span class="keyword">var</span> shallowObj = shallowCopy(obj);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowCopy</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newobj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> src) &#123;</span><br><span class="line">    <span class="keyword">if</span> (src.hasOwnProperty(prop)) &#123;</span><br><span class="line">      newobj[prop] = src[prop];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newobj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>导致的结果就是：<br>shallowObj.arr[1] = 5;<br>console.log(obj.arr[1]);   //  5<br>深拷贝实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; </span><br><span class="line">    a:<span class="number">1</span>, </span><br><span class="line">    arr: [<span class="number">1</span>,<span class="number">2</span>]，</span><br><span class="line">    nation : <span class="string">'中国'</span>,</span><br><span class="line">    birthplaces:[<span class="string">'北京'</span>,<span class="string">'上海'</span>,<span class="string">'广州'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>:<span class="string">'杨'</span>&#125;;</span><br><span class="line">obj2 = deepCopy(obj,obj2);</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"><span class="comment">//深复制，要想达到深复制就需要用递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">o,c</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> c = c || &#123;&#125;；</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> o)&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">typeof</span> o[i] === <span class="string">'object'</span>)&#123;</span><br><span class="line">          <span class="comment">//要考虑深复制问题了</span></span><br><span class="line">          <span class="keyword">if</span>(o[i].constructor === <span class="built_in">Array</span>)&#123;</span><br><span class="line">            <span class="comment">//这是数组</span></span><br><span class="line">            c[i] =[]；</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//这是对象</span></span><br><span class="line">            c[i] = &#123;&#125;；</span><br><span class="line">          &#125;</span><br><span class="line">          deepCopy(o[i],c[i])；</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          c[i] = o[i]；</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> c</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h4 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h4><p><code>进程</code>：一个程序是静态的，通常是存放在外存中的。而当程序被调入内存中运行后，就成了进程。<br><code>线程</code>：一个进程内部可能包含了很多顺序执行流，每个顺序执行流就是一个线程。<code>多线程</code>就是有多条顺序执行流“同时”[并发]执行，且它们之间互不干扰。<br>两者的区别：一个程序至少有一个进程,一个进程至少有一个线程。多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。来实现进程的调度和管理以及资源分配。</p><h4 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h4><p>阻塞和非阻塞这两个概念与程序（线程）等待消息通知(无所谓同步或者异步)时的状态有关。也就是说阻塞与非阻塞主要是程序（线程）等待消息通知时的状态角度来说的。<br><code>阻塞</code>调用是指调用结果返回之前，当前线程会被挂起，一直处于等待消息通知，不能够执行其他业务。函数只有在得到结果之后才会返回。<br><code>非阻塞</code>指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。</p><h4 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h4><p><code>同步</code>:所谓同步就是一个任务的完成需要依赖另外一个任务时，只有等待被依赖的任务完成后，依赖的任务才能算完成，这是一种可靠的任务序列。要么成功都成功，失败都失败，两个任务的状态可以保持一致。<br><code>异步</code>: 异步是不需要等待被依赖的任务完成，只是通知被依赖的任务要完成什么工作，依赖的任务也立即执行，只要自己完成了整个任务就算完成了。至于被依赖的任务最终是否真正完成，依赖它的任务无法确定，所以它是不可靠的任务序列。<br><code>消息通知</code>: 异步的概念和同步相对。当一个同步调用发出后，调用者要一直等待返回消息（结果）通知后，才能进行后续的执行；当一个异步过程调用发出后，调用者不能立刻得到返回消息（结果）。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。</p><h4 id="http"><a href="#http" class="headerlink" title="http"></a>http</h4><h5 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h5><p>http请求包含有请求头，请求行，请求正文。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  method: <span class="string">'post'</span>,</span><br><span class="line">  url: <span class="string">'/user/12345'</span>,</span><br><span class="line">  headers:&#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>:<span class="string">'application/x-www-form-urlencoded'</span>  </span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span>,</span><br><span class="line">    lastName: <span class="string">'Flintstone'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>method和url就是这个请求的请求行（这里是请求行部分信息，其实请求行还包括http协议的版本等信息）。headers中的属性就是请求头，里面的属性，全部包含在请求的header里面，是服务端获取客户端版本，缓存等信息的一个途径。data对应的就是请求正文，也就是平常所说的参数。</p><h5 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h5><p>在请求发出去，并且响应已经回来的时候，就时候信息可分为响应行，响应头，响应正文。<br><code>响应行</code>:返回请求的http协议及版本，状态码，请求状态等描述信息。<br><code>响应头</code>:响应头和请求头格式一致，返回版本，缓存等信息。<br><code>响应正文</code>:也就是日常开发需要用到的数据。</p><h5 id="常见的HTTP相应状态码"><a href="#常见的HTTP相应状态码" class="headerlink" title="常见的HTTP相应状态码"></a>常见的HTTP相应状态码</h5><p>200：请求成功<br>400：参数错误<br>403：拒绝或者禁止访问（无权限访问）<br>404：地址不存在<br>405：客户端请求中的方法被禁止（一般是请求方式错误）<br>500：服务器报错<br>502：请求超时，无效网关<br>503：服务器超载或者维护，无法响应</p><h5 id="https"><a href="#https" class="headerlink" title="https"></a>https</h5><p>HTTPS=数据加密+网站认证+完整性验证+HTTP</p><h4 id="响应式和自适应"><a href="#响应式和自适应" class="headerlink" title="响应式和自适应"></a>响应式和自适应</h4><p>响应式：一个网页，根据屏幕的宽度的改变而展示不同的效果，代码基本是两套以上。在所有屏幕上都展示很好的效果，但是设计，开发成本高。</p><div align="center"><img src="/2018/04/11/前端知识图谱/响应式.png" width="500" height="400" alt="nginx" align="center"><br></div><br>自适应：一个网页，根据屏幕宽度的改变而改变。代码只有一套。在个别的屏幕上，排版这个比较丑，但是设计，开发成本低。<br><div align="center"><img src="/2018/04/11/前端知识图谱/自适应.png" width="500" height="400" alt="nginx" align="center"><br></div><h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h4><p>1.IE5盒子<br>width = 内容 + border + padding<br>盒子占据的宽度 = margin<em>2+width<br>2.W3C盒子<br>width = 内容<br>盒子占据的宽度 = margin</em>2+border<em>2+padding</em>2+width<br>3.设置浏览器去遵循w3c标准<br>只需要在网页的顶部加上DOCTYPE声明即可<br>另外注意 !important 的使用<br>  p{<br>   color:red !important;<br>   color:blue;<br>   }<br>当不加!important;的时候，后者覆盖前者，当加上之后说明第一个,样式优先级更高，采用前者，但是Ie6不支持!important; </p><h4 id="块级元素和内联元素"><a href="#块级元素和内联元素" class="headerlink" title="块级元素和内联元素"></a>块级元素和内联元素</h4><p>在标准文档流里面，块级元素具有以下特点：</p><p>①总是在新行上开始，占据一整行；<br>②高度，行高以及外边距和内边距都可控制；<br>③宽带始终是与浏览器宽度一样，与内容无关；<br>④它可以容纳内联元素和其他块元素。</p><p>行内元素的特点：</p><p>①和其他元素都在一行上；<br>②高，行高及外边距和内边距部分可改变；<br>③宽度只与内容有关；<br>④行内元素只能容纳文本或者其他行内元素。<br>不可以设置宽高，其宽度随着内容增加，高度随字体大小而改变，内联元素可以设置外边界，但是外边界不对上下起作用，只能对左右起作用，也可以设置内边界，但是内边界在ie6中不对上下起作用，只能对左右起作用<br>display:block  – 显示为块级元素<br>display:inline  – 显示为内联元素<br>dipslay:inline-block – 显示为内联块元素，表现为同行显示并可修改宽高内外边距等属性.</p><h4 id="模块化编程"><a href="#模块化编程" class="headerlink" title="模块化编程"></a>模块化编程</h4><p>①AMD（异步模块定义） requirejs<br>异步加载，浏览器不会失去响应<br>它指定的回调函数，只有前面的模块都加载完成后，才会运行，解决了依赖性问题<br>②CMD（通用模块定义） seajs<br>模块定义方式和模块加载时机处理不同<br>③区别：AMD依赖前置，在定义模块的时候就要声明其依赖的模块；CMD就近依赖，只有在用到哪个模块的时候再去require；</p><h4 id="一个页面从URL到加载显示完成，都发生了什么？"><a href="#一个页面从URL到加载显示完成，都发生了什么？" class="headerlink" title="一个页面从URL到加载显示完成，都发生了什么？"></a>一个页面从URL到加载显示完成，都发生了什么？</h4><p>1、首先，在浏览器地址栏中输入url<br>2、浏览器先查看浏览器缓存-系统缓存-路由器缓存，如果缓存中有，会直接在屏幕中显示页面内容。若没有，则跳到第三步操作。<br>3、在发送http请求前，需要域名解析(DNS解析)，解析获取相应的IP地址。<br>4、浏览器向服务器发起tcp连接，与浏览器建立tcp三次握手。<br>5、握手成功后，浏览器向服务器发送http请求，请求数据包。<br>6、服务器处理收到的请求，将数据返回至浏览器<br>7、浏览器收到HTTP响应<br>8、读取页面内容，浏览器渲染，解析html源码<br>9、生成Dom树、解析css样式、js交互<br>10、客户端和服务器交互<br>11、ajax查询</p><h4 id="前端安全"><a href="#前端安全" class="headerlink" title="前端安全"></a>前端安全</h4><p>XSS：跨站脚本攻击，注入攻击的一种。攻击者利用应用程序的动态展示功能，在HTML页面中嵌入恶意代码。当用户浏览该页时，这些嵌入在html的恶意代码就会被执行，用户浏览器被攻击者控制。<br>CSRF:是跨站请求伪造。XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。其实就是攻击者盗用了你的身份，以你的名义发送恶意请求。</p><h4 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h4><p>Web 前端一种非常流行的开发模式，利用 MVVM 可以使我们的代码更专注于处理业务逻辑而不是去关心 DOM 操作。</p><h4 id="Vue组件data为什么必须是函数"><a href="#Vue组件data为什么必须是函数" class="headerlink" title="Vue组件data为什么必须是函数"></a>Vue组件data为什么必须是函数</h4><p>如果不用function return 每个组件的data都是内存的同一个地址，那一个数据改变其他也改变了，这当然就不是我们想要的。<br>用function return 其实就相当于申明了新的变量，相互独立，自然就不会有这样的问题。</p><h4 id="javascript有哪几种数据类型"><a href="#javascript有哪几种数据类型" class="headerlink" title="javascript有哪几种数据类型"></a>javascript有哪几种数据类型</h4><p>六种基本数据类型<br>undefined<br>null<br>string<br>boolean<br>number<br>symbol(ES6)<br>一种引用类型<br>Object</p><h4 id="事件冒泡、事件捕捉、事件委托"><a href="#事件冒泡、事件捕捉、事件委托" class="headerlink" title="事件冒泡、事件捕捉、事件委托"></a>事件冒泡、事件捕捉、事件委托</h4><p><code>事件捕获</code>:从document到触发事件的那个节点，即自上而下的去触发事件。<br><code>事件冒泡</code>:刚好相反，是从触发事件的那个节点一直到document，是自下而上的去触发事件。<br>绑定事件方法（addEventListener）的第三个参数，就是控制事件触发顺序是否为事件捕获。true,事件捕获；false,事件冒泡。默认false,即事件冒泡,所以当你对一个dom节点触发事件时，若外层的节点也设置了相应的事件函数，就会使外层的节点也触发自己的事件函数。<br><code>事件委托</code>:当有多个类似的元素需要绑定事件时，一个一个去绑定即浪费时间，又不利于性能，这时候就可以用到事件委托，给他们的一个共同父级元素添加一个事件函数去处理他们所有的事件<br>阻止事件委托和冒泡：在事件函数中执行event.stopPropagation()</p><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p>构造函数创建一个对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">person.name = <span class="string">'Kevin'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure></p><p><code>prototype</code>:每个函数都有一个 prototype 属性。prototype显式原型属性（只有函数有prototype,对象是没有的。）<br><code>__proto__</code> :这是每一个JavaScript对象(除了 null )都具有的一个属性，叫<strong>proto</strong>隐式原型属性，这个属性会指向该对象的原型。<br><code>constructor</code>:每个原型都有一个 constructor 属性指向关联的构造函数。<br>Person 就是一个构造函数，我们使用 new 创建了一个实例对象 person。<br>这里new关键字起到了以下几个作用：<br> var obj  = {}; obj.<strong>proto</strong> = Person.prototype; Person.call(obj);<br> 1.创建了一个空对象obj。<br> 2.将这个空对象的隐式原型<strong>proto</strong>指向构造函数的显示原型prototype；如例，是将空对象的<strong>proto</strong>成员指向了Person函数对象prototype成员对象；从而形成了所谓的原型链：下图中的蓝色线。<br> 3.将构造函数的this指向实例（即空对象），并调用Person函数；</p><div align="center"><img src="/2018/04/11/前端知识图谱/prototype.png" width="500" height="400" alt="原型链" align="center"><br></div><h4 id="call、aplly、bind之间的区别"><a href="#call、aplly、bind之间的区别" class="headerlink" title="call、aplly、bind之间的区别"></a>call、aplly、bind之间的区别</h4><p>相同点：1.都是用来改变函数的this对象的指向的。<br>2.第一个参数都是this要指向的对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xw=&#123;</span><br><span class="line">    name: <span class="string">"小王"</span>,</span><br><span class="line">    gender: <span class="string">"男"</span>,</span><br><span class="line">    age: <span class="number">24</span>,</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name+<span class="string">" , "</span>+<span class="keyword">this</span>.gender+<span class="string">" ,今年"</span>+<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;,</span><br><span class="line">say1: <span class="function"><span class="keyword">function</span>(<span class="params">school,grade</span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name+<span class="string">" , "</span>+<span class="keyword">this</span>.gender+<span class="string">" ,今年"</span>+<span class="keyword">this</span>.age+<span class="string">" ,在"</span>+school+<span class="string">"上"</span>+grade);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> xh=&#123;</span><br><span class="line">    name: <span class="string">"小红"</span>,</span><br><span class="line">    gender: <span class="string">"女"</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">xw.say();</span><br></pre></td></tr></table></figure></p><p><code>xw.say1.call(xh,&quot;实验小学&quot;,&quot;六年级&quot;);</code><br><code>xw.say.apply(xh,[&quot;实验小学&quot;,&quot;六年级&quot;]);</code><br><code>xw.say.bind(xh,&quot;实验小学&quot;,&quot;六年级&quot;)();</code><br>三者的区别应该可以从上面三者调用方式可以看出来了。</p><h4 id="sessionStorage、localStorage和cookie"><a href="#sessionStorage、localStorage和cookie" class="headerlink" title="sessionStorage、localStorage和cookie"></a>sessionStorage、localStorage和cookie</h4><p>共同点：都是保存在浏览器端、且同源的。<br>不同点：cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，而sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。<br>存储大小限制也不同，cookie数据不能超过4K。<br>数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭之前有效；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭。<br>作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localstorage在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。</p><h4 id="html5离线储存怎么使用，工作原理能不能解释一下？"><a href="#html5离线储存怎么使用，工作原理能不能解释一下？" class="headerlink" title="html5离线储存怎么使用，工作原理能不能解释一下？"></a>html5离线储存怎么使用，工作原理能不能解释一下？</h4><p>HTML5的离线存储是基于一个新建的.appcache文件的，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。</p><h4 id="javascript中实现继承"><a href="#javascript中实现继承" class="headerlink" title="javascript中实现继承"></a>javascript中实现继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  父类 </span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Persion</span>(<span class="params">name,age</span>)</span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.name = name; </span><br><span class="line">        <span class="keyword">this</span>.age = age; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 父类的原型对象属性继承 </span></span><br><span class="line">        Persion.prototype.id = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 子类 </span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Boy</span>(<span class="params">name,age,sex</span>)</span>&#123; </span><br><span class="line">        <span class="comment">//call apply 借用构造函数的方式继承</span></span><br><span class="line">        Persion.call(<span class="keyword">this</span>,name,age);</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 原型继承实现  参数为空 代表 父类的实例和父类的原型对象的关系了</span></span><br><span class="line"> Boy.prototype = <span class="keyword">new</span> Persion();</span><br><span class="line">         <span class="keyword">var</span> b = <span class="keyword">new</span> Boy(<span class="string">'c5'</span>,<span class="number">27</span>,<span class="string">'男'</span>); </span><br><span class="line">         alert(b.name)<span class="comment">// c5 </span></span><br><span class="line">         alert(b.id)<span class="comment">//10</span></span><br></pre></td></tr></table></figure><h4 id="javascript的执行机制"><a href="#javascript的执行机制" class="headerlink" title="javascript的执行机制"></a>javascript的执行机制</h4><p>首先javascript是一门单线程语言。按照语句出现的顺序执行的.</p><p><div align="center"><img src="/2018/04/11/前端知识图谱/异步和同步.png" width="500" height="400" alt="异步和同步" align="center"><br></div><br>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数。当指定的事情完成时，Event Table会将这个函数移入Event Queue。主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。上述过程会不断重复，也就是常说的Event Loop(事件循环)。</p><p>js异步又细分为：<br>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval<br>micro-task(微任务)：Promise.then()，process.nextTick</p><p><div align="center"><img src="/2018/04/11/前端知识图谱/宏任务和微任务.png" width="500" height="400" alt="异步和同步" align="center"><br></div><br>事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。<br>就是遇到宏任务，先执行宏任务，将宏任务放入eventqueue，然后在执行微任务，将微任务放入eventqueue，这两个queue不是一个queue。当你往外拿的时候先从微任务里拿这个回调函数，然后再从宏任务的queue上拿宏任务的回调函数。</p><h4 id="for-in-和for-of的区别"><a href="#for-in-和for-of的区别" class="headerlink" title="for in 和for of的区别"></a>for in 和for of的区别</h4><p>for in更适合遍历对象。<br>for in遍历的是数组的索引（即键名），而for of遍历的是数组元素值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  arrs = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4.5</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">in</span> arrs)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x)  <span class="comment">// 输出结果的0,1,2,3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> arrs)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x); <span class="comment">//输出结果是1，2，3，4.5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for..of适用遍历数/数组对象/字符串/map/set等拥有迭代器对象的集合.但是不能遍历对象,因为没有迭代器对象.与forEach()不同的是，它可以正确响应break、continue和return语句。</p>]]></content>
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>程序员应该知道的一些东西</title>
      <link href="/2018/04/10/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%9C%E8%A5%BF/"/>
      <content type="html"><![CDATA[<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ol><li>什么是队列、栈、链表<br>数组、链表、堆栈和队列是最基本的数据结构，队列就是一种先进先出的逻辑结构，栈是一种先进后出的逻辑结构。<a id="more"></a></li><li>什么是树（平衡树,排序树,B树,B+树,R树,红黑树）、堆（大根堆、小根堆）、图（有向图、无向图、拓扑）</li><li>栈通常采用的两种存储结构<br>链接存储：链栈带有头指针或头结点的单循环链表。<br>顺序存储：数组实现。</li><li>两个栈实现队列，和两个队列实现栈<br><a href="https://blog.csdn.net/zw_1510/article/details/51927554" target="_blank" rel="noopener">链接答案</a></li></ol><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>冒泡排序是一种简单的排序方法，它的基本思想是：通过相邻两个元素之间比较和交换，使较大的元素逐渐从前面移向后面（升序），就像水底下的气泡一样逐渐向上冒泡，所以被称为“冒泡”排序。冒泡排序的最坏时间复杂度为O(n2)，平均时间复杂度为O(n2)。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 排序算法</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] list)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> temp;</span><br><span class="line">      <span class="comment">// 做多少轮排序（最多length-1轮）</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i &lt;list.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">          <span class="comment">// 每一轮比较多少个</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;list.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">              <span class="keyword">if</span> (list[j]&gt;list[j+<span class="number">1</span>])&#123;</span><br><span class="line">                  <span class="comment">//交换</span></span><br><span class="line">                  temp = list[j];</span><br><span class="line">                  list[j] = list[j+<span class="number">1</span>];</span><br><span class="line">                  list [j+<span class="number">1</span>]=temp;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>快速排序的基本思想是：通过一轮排序将待排序元素分割成独立的两部分， 其中一部分的所有元素均比另一部分的所有元素小，然后分别对这两部分的元素继续进行快速排序，以此达到整个序列变成有序序列。快速排序的最坏时间复杂度为O(n2)，平均时间复杂度为O(n*log2n)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 快速排序算法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">           <span class="comment">// 分割数组，找到分割点</span></span><br><span class="line">           <span class="keyword">int</span> point = partition(list, left, right);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 递归调用，对左子数组进行快速排序</span></span><br><span class="line">           quickSort(list, left, point - <span class="number">1</span>);</span><br><span class="line">           <span class="comment">// 递归调用，对右子数组进行快速排序</span></span><br><span class="line">           quickSort(list, point + <span class="number">1</span>, right);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 分割数组，找到分割点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 用数组的第一个元素作为基准数</span></span><br><span class="line">       <span class="keyword">int</span> first = list[left];</span><br><span class="line">       <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">           <span class="keyword">while</span> (left &lt; right &amp;&amp; list[right] &gt;= first) &#123;</span><br><span class="line">               right--;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 交换</span></span><br><span class="line">           swap(list, left, right);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">while</span> (left &lt; right &amp;&amp; list[left] &lt;= first) &#123;</span><br><span class="line">               left++;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 交换</span></span><br><span class="line">           swap(list, left, right);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 返回分割点所在的位置</span></span><br><span class="line">       <span class="keyword">return</span> left;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 交换数组中两个位置的元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> temp;</span><br><span class="line">       <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; list.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           temp = list[left];</span><br><span class="line">           list[left] = list[right];</span><br><span class="line">           list[right] = temp;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h4><p>直接选择排序(Straight Select Sort) 是一种简单的排序方法，它的基本思想是：通过length-1 趟元素之间的比较，从length-i+1个元素中选出最小的元素，并和第i个元素交换位置。直接选择排序的最坏时间复杂度为O(n2)，平均时间复杂度为O(n2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 直接选择排序算法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] list)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 要遍历的次数（length-1次）</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">           <span class="comment">// 将当前下标定义为最小值下标</span></span><br><span class="line">           <span class="keyword">int</span> min = i;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 遍历min后面的数据</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= list.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">               <span class="comment">// 如果有小于当前最小值的元素，将它的下标赋值给min</span></span><br><span class="line">               <span class="keyword">if</span> (list[j] &lt; list[min]) &#123;</span><br><span class="line">                   min = j;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 如果min不等于i，说明找到真正的最小值</span></span><br><span class="line">           <span class="keyword">if</span> (min != i) &#123;</span><br><span class="line">               swap(list, min, i);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 交换数组中两个位置的元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> min, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> temp = list[min];</span><br><span class="line">       list[min] = list[i];</span><br><span class="line">       list[i] = temp;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><p>堆排序(Heap Sort) 利用堆（一般为大根堆）进行排序的方法。它的基本思想是：将待排序的元素构造成一个大根堆。此时，整个序列的最大值就是堆顶的根节点。将它移走（其实就是将它与数组的末尾元素进行交换，此时末尾元素就是最大值），然后将剩余的length-1 个元素重新构造成一个大根堆，这样就会得到length个元素中的次大值。如此反复执行，便能得到一个有序的序列。</p><p>堆是具有下列性质的完全二叉树：每个节点的值都大于或等于其左右孩子节点的值，称为大根堆；每个节点的值都小于或等于其左右孩子节点的值，称为小根堆。</p><p>堆排序的最坏时间复杂度为O(n<em>log2n)，平均时间复杂度为O(n</em>log2n)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 堆排序算法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] list)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 将无序堆构造成一个大根堆，大根堆有length/2个父节点</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = list.length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">           headAdjust(list, i, list.length);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 逐步将每个最大值的根节点与末尾元素交换，并且再调整其为大根堆</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = list.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">           <span class="comment">// 将堆顶节点和当前未经排序的子序列的最后一个元素交换位置</span></span><br><span class="line">           swap(list, <span class="number">0</span>, i);</span><br><span class="line">           headAdjust(list, <span class="number">0</span>, i);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 构造大根堆</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">headAdjust</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> parent, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 保存当前父节点</span></span><br><span class="line">       <span class="keyword">int</span> temp = list[parent];</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 得到左孩子节点</span></span><br><span class="line">       <span class="keyword">int</span> leftChild = <span class="number">2</span> * parent + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (leftChild &lt; length) &#123;</span><br><span class="line">           <span class="comment">// 如果parent有右孩子，则要判断左孩子是否小于右孩子</span></span><br><span class="line">           <span class="keyword">if</span> (leftChild + <span class="number">1</span> &lt; length &amp;&amp; list[leftChild] &lt; list[leftChild + <span class="number">1</span>]) &#123;</span><br><span class="line">               leftChild++;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 父亲节点大于子节点，就不用做交换</span></span><br><span class="line">           <span class="keyword">if</span> (temp &gt;= list[leftChild]) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 将较大子节点的值赋给父亲节点</span></span><br><span class="line">           list[parent] = list[leftChild];</span><br><span class="line">           <span class="comment">// 然后将子节点做为父亲节点</span></span><br><span class="line">           parent = leftChild;</span><br><span class="line">           <span class="comment">// 找到该父亲节点较小的左孩子节点</span></span><br><span class="line">           leftChild = <span class="number">2</span> * parent + <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 最后将temp值赋给较大的子节点，以形成两值交换</span></span><br><span class="line">       list[parent] = temp;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 交换数组中两个位置的元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> top, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> temp = list[top];</span><br><span class="line">       list[top] = list[last];</span><br><span class="line">       list[last] = temp;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h4><p>直接插入排序的基本思想是：每次从无序序列中取出第一个元素插入到已经排好序的有序序列中，从而得到一个新的，数量加1的有序序列。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 直接插入排序算法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] list)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 从无序序列中取出第一个元素 (注意无序序列是从第二个元素开始的)</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">           <span class="keyword">int</span> temp = list[i];</span><br><span class="line">           <span class="keyword">int</span> j;</span><br><span class="line">           <span class="comment">// 遍历有序序列</span></span><br><span class="line">           <span class="comment">// 如果有序序列中的元素比临时元素大，则将有序序列中比临时元素大的元素依次后移</span></span><br><span class="line">           <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; list[j] &gt; temp; j--) &#123;</span><br><span class="line">               list[j + <span class="number">1</span>] = list[j];</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 将临时元素插入到腾出的位置中</span></span><br><span class="line">           list[j + <span class="number">1</span>] = temp;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue结合leaflet实现地图的常用功能</title>
      <link href="/2018/04/03/vue%E7%BB%93%E5%90%88leaflet%E5%AE%9E%E7%8E%B0%E5%9C%B0%E5%9B%BE%E7%9A%84%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/"/>
      <content type="html"><![CDATA[<h3 id="用vue-cli搭建项目并加载地图"><a href="#用vue-cli搭建项目并加载地图" class="headerlink" title="用vue-cli搭建项目并加载地图"></a>用vue-cli搭建项目并加载地图</h3><p>搭建项目参考<a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">Vue官网</a>就行。<br>本想着一步一步开始，由于天气热。今天有丶累，不想艹你。<strong>总之现在不想写</strong>。<br>先附上我的仓库<a href="https://github.com/OuYangResume/Vue-Gis" target="_blank" rel="noopener">源码地址</a>和效果图吧<br><a id="more"></a></p><h3 id="自定义Marker图标"><a href="#自定义Marker图标" class="headerlink" title="自定义Marker图标"></a>自定义Marker图标</h3><div align="center"><img src="/2018/04/03/vue结合leaflet实现地图的常用功能/marker.png" width="500" height="400" alt="自定义Marker图标" align="center"><br></div><h3 id="聚类效果"><a href="#聚类效果" class="headerlink" title="聚类效果"></a>聚类效果</h3><div align="center"><img src="/2018/04/03/vue结合leaflet实现地图的常用功能/julei.png" width="500" height="400" alt="聚类效果" align="center"><br></div><h3 id="热力图"><a href="#热力图" class="headerlink" title="热力图"></a>热力图</h3><div align="center"><img src="/2018/04/03/vue结合leaflet实现地图的常用功能/heatMap.png" width="500" height="400" alt="热力图" align="center"><br></div>]]></content>
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> GIS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>北纬30°，武汉的每天不一样</title>
      <link href="/2018/03/27/%E5%8C%97%E7%BA%AC30%C2%B0%EF%BC%8C%E6%AD%A6%E6%B1%89%E7%9A%84%E6%AF%8F%E5%A4%A9%E4%B8%8D%E4%B8%80%E6%A0%B7/"/>
      <content type="html"><![CDATA[<p>毕业之后独自来到武汉，从什么都不知道到到什么都不懂。人懒惰了，变得不那么喜欢运动了。或许就是身边没有学校那种一叫就走的朋友吧。<br><a id="more"></a><br>在此期间找了一个小女朋友。别人说找女朋友最厉害的一招是欲擒故纵。而我认为的是在<strong>她最需要照顾的时候，选择不离开。</strong>放一张为数不多的合影吧。</p><div align="center"><img src="/2018/03/27/北纬30°，武汉的每天不一样/heying.jpg" width="400" height="300" alt="图片名称" align="center"><p>二〇一八年三月十八日</p><br></div><p>来武汉这么久了，还没有好好逛过这个城市。最近樱花盛开约上好友去了有名武大樱花园。晚上吃了油焖‘小’虾（季节不对T﹏T），吃什么不重要，和谁一起才是重点。</p><p><div align="center"><img src="/2018/03/27/北纬30°，武汉的每天不一样/wdyh.jpg" width="350" height="400" alt="图片名称" align="center"><p>二〇一八年三月二十五日</p><br></div><br>突然写一个城市，还真有很多事情，又不知如何下笔。矫情</p>]]></content>
      
      <categories>
          
          <category> 随笔生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OGC标准</title>
      <link href="/2018/03/23/OGC%E6%A0%87%E5%87%86/"/>
      <content type="html"><![CDATA[<h2 id="一：OGC与OGC标准"><a href="#一：OGC与OGC标准" class="headerlink" title="一：OGC与OGC标准"></a>一：OGC与OGC标准</h2><p>制定与空间信息，基于位置服务相关的标准文档，按照这些文档开放服务的接口，空间数据存储的编码，空间操作的方法。<a href="http://www.opengeospatial.org/" target="_blank" rel="noopener">OGC官网</a></p><h2 id="二：SFS-简单的要素标准"><a href="#二：SFS-简单的要素标准" class="headerlink" title="二：SFS -简单的要素标准"></a>二：SFS -简单的要素标准</h2> <a id="more"></a><h3 id="几何对象模型"><a href="#几何对象模型" class="headerlink" title="几何对象模型"></a>几何对象模型</h3><p>几何对象（点，线，面和多点，多线，多面）和对象的一系列操作。</p><h3 id="WKT描述几何对象"><a href="#WKT描述几何对象" class="headerlink" title="WKT描述几何对象"></a>WKT描述几何对象</h3><p>WKT可以通过文本来描述几何对象。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Point(10 10) //点</span><br><span class="line">LineString(10 10,20 20,30 40) //3个节点的线</span><br><span class="line">Polygon((10 10,10 20,20 20,10 10))//只有一个环的多边形</span><br><span class="line">MultiPoint((10 10),(20 20))//多点 </span><br><span class="line">MultiLineString多线 多面也类似</span><br></pre></td></tr></table></figure></p><h3 id="WKB-描述几何对象"><a href="#WKB-描述几何对象" class="headerlink" title="WKB 描述几何对象"></a>WKB 描述几何对象</h3><p>wkb通过序列化的字节对象来描述几何对象</p><h3 id="WKT描述空间参考"><a href="#WKT描述空间参考" class="headerlink" title="WKT描述空间参考"></a>WKT描述空间参考</h3><p>wkt除了可以描述几何对象也可以描述空间对象。<br>对于<strong>地理坐标系</strong>，比如最常见的WGS84坐标系，wkt是描述如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GEOGCS</span><br><span class="line">[</span><br><span class="line"><span class="string">"GCS_WGS_1984"</span>,</span><br><span class="line">DATUM[<span class="string">"D_WGS_1984"</span>,SPHEROID[<span class="string">"WGS_1984"</span>,<span class="number">6378137.0</span>,<span class="number">298.257223563</span>]],</span><br><span class="line">PRIMEM[<span class="string">"Greenwich"</span>,<span class="number">0.0</span>],</span><br><span class="line">UNIT[<span class="string">"Degree"</span>,<span class="number">0.0174532925199433</span>]</span><br><span class="line">AUTHORITY[<span class="string">"EPSG"</span>,<span class="number">4326</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>“GEOGCS”表明”[]”中描述的是一个地理坐标系统。该坐标系统名称为”GCS_WGS_1984”;采用的大地基准面为“D_WGS_1984”，该基准面近似椭球体的长轴为6378137.0米、扁率为298.257223563；以格林威治0度经线为起始经线；地图单位为度，该单位的转换因子[2] 为0. 0174532925199433（π/180）；该坐标系统在EPSG[3] 中的编码为“4326”。</p><p>对于<strong>投影坐标系</strong>，WGS84 Web Mercator（Auxiliary Sphere）坐标系统，WKT描述：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PROJCS</span><br><span class="line">[</span><br><span class="line"><span class="string">"WGS_1984_Web_Mercator_Auxiliary_Sphere"</span>,</span><br><span class="line">GEOGCS</span><br><span class="line">[</span><br><span class="line"><span class="string">"GCS_WGS_1984"</span>,</span><br><span class="line">DATUM[<span class="string">"D_WGS_1984"</span>,SPHEROID[<span class="string">"WGS_1984"</span>,<span class="number">6378137.0</span>,<span class="number">298.257223563</span>]],</span><br><span class="line">PRIMEM[<span class="string">"Greenwich"</span>,<span class="number">0.0</span>],</span><br><span class="line">UNIT[<span class="string">"Degree"</span>,<span class="number">0.0174532925199433</span>]</span><br><span class="line">],</span><br><span class="line">PROJECTION[<span class="string">"Mercator_Auxiliary_Sphere"</span>],</span><br><span class="line">PARAMETER[<span class="string">"False_Easting"</span>,<span class="number">0.0</span>],</span><br><span class="line">PARAMETER[<span class="string">"False_Northing"</span>,<span class="number">0.0</span>],</span><br><span class="line">PARAMETER[<span class="string">"Central_Meridian"</span>,<span class="number">0.0</span>],</span><br><span class="line">PARAMETER[<span class="string">"Standard_Parallel_1"</span>,<span class="number">0.0</span>],</span><br><span class="line">PARAMETER[<span class="string">"Auxiliary_Sphere_Type"</span>,<span class="number">0.0</span>],</span><br><span class="line">UNIT[<span class="string">"Meter"</span>,<span class="number">1.0</span>],</span><br><span class="line">AUTHORITY[<span class="string">"EPSG"</span>,<span class="number">3857</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>“PROJCS”代表这是一个投影坐标系。投影坐标系中必然会包括一个地理坐标系，这里的地理坐标系就是“GCS_WGS_1984”，这个地理坐标系的定义和上面的类似。下面紧跟着的是投影的相关参数，“Mercator_Auxiliary_Sphere”是采用投影的名称，这个投影坐标系以0度经线为中央经线进行投影；坐标系的单位为米（显然，转换因子就为1.0），而该坐标系的EPSG编码为“3857”。</p><hr><h2 id="三：GML-地理标记语言"><a href="#三：GML-地理标记语言" class="headerlink" title="三：GML- 地理标记语言"></a>三：GML- 地理标记语言</h2><p>GML是一种基于XML的地理要素描述语言，主要是在不同的软件或系统间交换空间数据。比如WFS要素web服务就使用gml作为输入输出格式。</p><h2 id="四：SLD-图层样式描述"><a href="#四：SLD-图层样式描述" class="headerlink" title="四：SLD -图层样式描述"></a>四：SLD -图层样式描述</h2><p>一个地图不仅包含数据源组成，还需要对数据进行符号化和渲染，sld就是描述地图图层样式的标准，一般用于wms地图web服务。</p><h2 id="五：KML"><a href="#五：KML" class="headerlink" title="五：KML"></a>五：KML</h2><p>主要用于地理数据的可视化，不仅包括地理数据的描述，还包括数据的符号化方式，用户视角的控制等信息。</p><h2 id="六：OWS-OGC-WEB服务通用标准"><a href="#六：OWS-OGC-WEB服务通用标准" class="headerlink" title="六：OWS-OGC WEB服务通用标准"></a>六：OWS-OGC WEB服务通用标准</h2><p>OWS描述web服务通用的接口规范，包括请求和响应的内容，请求的参数和编码等。</p><h3 id="WFS-要素web服务"><a href="#WFS-要素web服务" class="headerlink" title="WFS -要素web服务"></a>WFS -要素web服务</h3><h3 id="WMS-地图web服务"><a href="#WMS-地图web服务" class="headerlink" title="WMS -地图web服务"></a>WMS -地图web服务</h3><h3 id="WCS-栅格web服务"><a href="#WCS-栅格web服务" class="headerlink" title="WCS -栅格web服务"></a>WCS -栅格web服务</h3><h3 id="WMTS-地图切片服务"><a href="#WMTS-地图切片服务" class="headerlink" title="WMTS -地图切片服务"></a>WMTS -地图切片服务</h3><h2 id="OGD标准介绍-pdf"><a href="#OGD标准介绍-pdf" class="headerlink" title="OGD标准介绍.pdf"></a>OGD标准介绍.pdf</h2><p>链接：<a href="https://pan.baidu.com/s/1abhZc-Wsrk1RbEqGpFb8pw" target="_blank" rel="noopener">https://pan.baidu.com/s/1abhZc-Wsrk1RbEqGpFb8pw</a>密码：dei6</p>]]></content>
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常见正则表达式校验</title>
      <link href="/2018/03/20/%E5%B8%B8%E8%A7%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A0%A1%E9%AA%8C/"/>
      <content type="html"><![CDATA[<h2 id="RegExp是什么"><a href="#RegExp是什么" class="headerlink" title="RegExp是什么?"></a>RegExp是什么?</h2><ul><li>RegExp 是正则表达式（Regular expression）的缩写，作用是对字符串执行模式匹配。</li><li>通常用于格式验证、正则替换、查找子串等</li><li>各种编程语言的正则表达式基本相同，不同的语言可能会有一些细小的差别</li><li>推荐一个在线验证的工具<a href="https://regex101.com" target="_blank" rel="noopener">https://regex101.com</a> <a id="more"></a></li></ul><hr><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><table><thead><tr><th style="text-align:center">量词</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:center">n+</td><td style="text-align:left">匹配任何包含至少一个 n 的字符串。同 {1,}</td></tr><tr><td style="text-align:center">n*</td><td style="text-align:left">匹配任何包含零个或多个 n 的字符串。同 {0,}</td></tr><tr><td style="text-align:center">n?</td><td style="text-align:left">匹配任何包含零个或一个 n 的字符串。同 {0,1}</td></tr><tr><td style="text-align:center">n{X}</td><td style="text-align:left">匹配包含 X 个 n 的序列的字符串。</td></tr><tr><td style="text-align:center">n{X,Y}</td><td style="text-align:left">匹配包含 X 至 Y 个 n 的序列的字符串。</td></tr><tr><td style="text-align:center">n{X,}</td><td style="text-align:left">匹配包含至少 X 个 n 的序列的字符串。</td></tr><tr><td style="text-align:center">n$</td><td style="text-align:left">匹配任何<strong>结尾</strong>为 n 的字符串。</td></tr><tr><td style="text-align:center">^n</td><td style="text-align:left">匹配任何<strong>开头</strong>为 n 的字符串。注意 /[^a] / 和 /^ [a]/是不一样的，前者是排除的，后者是代表首位。</td></tr><tr><td style="text-align:center">(?=n)</td><td style="text-align:left">匹配任何其后紧接指定字符串 n 的字符串。正向预查</td></tr><tr><td style="text-align:center">(?!n)</td><td style="text-align:left">匹配任何其后没有紧接指定字符串 n 的字符串。反向预查</td></tr></tbody></table><h2 id="RegExp-对象方法"><a href="#RegExp-对象方法" class="headerlink" title="RegExp 对象方法"></a>RegExp 对象方法</h2><h3 id="test"><a href="#test" class="headerlink" title="test()"></a>test()</h3><p><code>test()</code> 方法检索字符串中是否存在指定的值。返回值是 true 或 false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是不是QQ号</span></span><br><span class="line"><span class="comment">//首位不能是0</span></span><br><span class="line"><span class="comment">//必须是5-11位数的数字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'812634676'</span>;</span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/^[1-9][0-9]&#123;4,10&#125;$/gim</span>;</span><br><span class="line"><span class="keyword">if</span> (regexp.test(str))&#123;</span><br><span class="line">alert(<span class="string">'is'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">'no'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h3><p><code>exec()</code> 方法检索字符串中的指定值。返回值是被找到的值。如果没有发现匹配，则返回 null。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patt1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'e'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(patt1.exec(<span class="string">'some text'</span>));</span><br><span class="line"><span class="comment">//OUTPUT:e</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> patt2 =<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'ee'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(patt2.exec(<span class="string">'some text'</span>));</span><br><span class="line"><span class="comment">//OUTPUT:null</span></span><br></pre></td></tr></table></figure></p><h3 id="compile"><a href="#compile" class="headerlink" title="compile()"></a>compile()</h3><p><code>compile()</code> 既可以改变检索模式，也可以添加或删除第二个参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patt1=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"e"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(patt1.test(<span class="string">"The best things in life are free"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 改变了检索模式</span></span><br><span class="line">patt1.compile(<span class="string">"eee"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(patt1.test(<span class="string">"The best things in life are free"</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="支持正则表达式的String对象的方法"><a href="#支持正则表达式的String对象的方法" class="headerlink" title="支持正则表达式的String对象的方法"></a>支持正则表达式的String对象的方法</h2><h3 id="search-检索与正则表达式相匹配的值。"><a href="#search-检索与正则表达式相匹配的值。" class="headerlink" title="search 检索与正则表达式相匹配的值。"></a>search 检索与正则表达式相匹配的值。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Visit W3School!"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/W3School/</span>))</span><br><span class="line"><span class="comment">// OUTPUT:6</span></span><br></pre></td></tr></table></figure><h3 id="replace替换与正则表达式匹配的子串。"><a href="#replace替换与正则表达式匹配的子串。" class="headerlink" title="replace替换与正则表达式匹配的子串。"></a>replace替换与正则表达式匹配的子串。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Visit Microsoft!"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/Microsoft/</span>,<span class="string">"W3School"</span>));</span><br><span class="line"><span class="comment">// OUTPUT:Visit W3School!</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找重复项最多的字符个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'g21ss4aeba_ersb43sgnnsssstht6sss60snnsj8resw0_ss'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// split : 将字符串转化为数组</span></span><br><span class="line"><span class="comment">// sort : 对数组排序，ASCII</span></span><br><span class="line"><span class="comment">// join : 将数组转化为字符串</span></span><br><span class="line"><span class="keyword">var</span> str_new = str.split(<span class="string">''</span>).sort.join(<span class="string">''</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str_new);</span><br><span class="line"><span class="comment">//OUTPUT:"0012344668__aabbeeegghjnnnnrrssssssssssssssssttw"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/(\w)\1+/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> value = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">str_new.replace(regexp,<span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>,$<span class="number">1</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; $<span class="number">0.</span>length)&#123;</span><br><span class="line">index = $<span class="number">0.</span>length;</span><br><span class="line">value = $<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'重复项最多的字符是：'</span> + value + <span class="string">'，个数是：'</span> + index)</span><br><span class="line"></span><br><span class="line"><span class="comment">// OUTPUT:重复项最多的字符是：s，个数是：16</span></span><br></pre></td></tr></table></figure><h3 id="match找到一个或多个正则表达式的匹配。"><a href="#match找到一个或多个正则表达式的匹配。" class="headerlink" title="match找到一个或多个正则表达式的匹配。"></a>match找到一个或多个正则表达式的匹配。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"1 plus 2 equal 3"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/\d+/g</span>))</span><br><span class="line"><span class="comment">// OUTPUT : 1,2,3</span></span><br></pre></td></tr></table></figure><h3 id="split把字符串分割为字符串数组。"><a href="#split把字符串分割为字符串数组。" class="headerlink" title="split把字符串分割为字符串数组。"></a>split把字符串分割为字符串数组。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">" How are you doing today?"</span></span><br><span class="line"><span class="built_in">document</span>.write(str.split(<span class="regexp">/\s+/</span>));</span><br><span class="line"><span class="comment">// OUTPUT:How,are,you,doing,today?</span></span><br></pre></td></tr></table></figure><blockquote><p>经验：</p><ol><li>检验格式（邮箱格式、IP格式）是否正确，用test()</li><li>抓取信息（如所有手机号），用exec()、match() </li><li>替换敏感词汇，用replace()</li></ol></blockquote><h2 id="常见的正则表达式校验"><a href="#常见的正则表达式校验" class="headerlink" title="常见的正则表达式校验"></a>常见的正则表达式校验</h2><h3 id="校验数字的表达式"><a href="#校验数字的表达式" class="headerlink" title="校验数字的表达式"></a>校验数字的表达式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.数字：^[0-9]*$</span><br><span class="line">2.n位的数字： ^\d&#123;n&#125;$</span><br><span class="line">3.至少n位的数字： ^\d&#123;n,&#125;$</span><br><span class="line">4.m-n位的数字：^\d&#123;m,n&#125;$</span><br><span class="line">5.零和非零开头的数字：^(0|[1-9][0-9]*)$</span><br><span class="line">6.非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;?)$</span><br><span class="line">7.带1-2位小数的正数或负数：^(\-)?\d+(\.\d&#123;1,2&#125;)?$</span><br><span class="line">8.正数，负数，和小数：^(\-|\+)?\d+(\.\d+)?$</span><br><span class="line">9.非零的正整数：^[1-9]/d*$ 或 ^\+?[1-9][0-9]*$</span><br></pre></td></tr></table></figure><h3 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 汉字:^[\u4e00-\u9fa5]&#123;0,&#125;$</span><br><span class="line">2. 英文和数字：^[A-Za-zz-9]+&amp; 或^[A-Za-z0-9]&#123;4,40&#125;$</span><br><span class="line">3. 长度为3-20的所有字符：^.&#123;3,20&#125;$</span><br><span class="line">4. 由26个英文字母组成的字符串:^[A-Za-z]+&amp;</span><br><span class="line">5. 禁止输入含有~的字符：[^~\x22]+</span><br></pre></td></tr></table></figure><h3 id="特殊需求表达式"><a href="#特殊需求表达式" class="headerlink" title="特殊需求表达式"></a>特殊需求表达式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span><br><span class="line">2.域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span><br><span class="line">3.InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</span><br><span class="line">4.手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo-next的魔法糖</title>
      <link href="/2018/03/07/hexo-next%E7%9A%84%E9%AD%94%E6%B3%95%E7%B3%96/"/>
      <content type="html"><![CDATA[<hr><h2 id="文章插入图片"><a href="#文章插入图片" class="headerlink" title="文章插入图片"></a>文章插入图片</h2><ol><li>在站点配置文件<code>_config.yml</code>中的<code>post_asset_folder:</code>这个选项设置为<code>true</code>。<br><img src="/2018/03/07/hexo-next的魔法糖/zdpz.png" alt=""><a id="more"></a></li><li>在hexo目录下执行 <code>npm install hexo-asset-image --save</code>,这是下载安装一个可以上传本地图片的插件。</li><li>运行<code>hexo new &quot;xxx&quot;</code>来生成文章时，在<code>/source/_posts</code>文件夹中生成一个同名的文件夹。<br><img src="/2018/03/07/hexo-next的魔法糖/wjj.png" alt=""></li><li>最后在<code>xxx.md</code>中想引入图片时，先把图片复制到这个xxx文件夹中，然后按照markwown的格式引入图片：<code>！[替代文字](xxx/图片名.png)</code>。</li></ol><hr><h2 id="hexo-next添加自定义页面"><a href="#hexo-next添加自定义页面" class="headerlink" title="hexo-next添加自定义页面"></a>hexo-next添加自定义页面</h2><ol><li>在hexo目录下创建你想要生成的页面    <code>hexo new page &quot;aboutme&quot;</code>。</li><li>修改主题配置<code>_config.yml</code>文件中的 <code>menu</code>和<code>menu_icons</code>,如下图<br><img src="/2018/03/07/hexo-next的魔法糖/menu.png" alt="eg"><br>其中<code>address-card</code>是在<code>font-Awesome</code>图库图标的名称。</li><li>修改主题下的<code>netx/languages/zh-Hans.yml</code>文件中的<code>menu</code>。<br><img src="/2018/03/07/hexo-next的魔法糖/aboutme.png" alt=""></li><li>运行<code>hexo -s</code>效果图。<br><img src="/2018/03/07/hexo-next的魔法糖/xgt.png" alt=""></li><li>设置站点配置文件<code>_config.yml</code>中的<code>skip_render</code>添加<code>aboutme/**</code>,这样就意味着根目录下的<code>source/aboutme</code>文件夹中的内容不会被转化成html。而是直接copy到<code>public</code>文件夹。</li></ol><hr><h2 id="lt-–更多美味糖果–-gt"><a href="#lt-–更多美味糖果–-gt" class="headerlink" title="&lt;–更多美味糖果–&gt;"></a>&lt;–<a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">更多美味糖果</a>–&gt;</h2><p><strong><em>更新线20180603</em></strong></p><p>必须记录一下白忙活一天的状态了。具体原因是hexo clean会清除public下的所有文件。<br>修改应该source文件下的文件。然后再执行hexo g 生成public。</p>]]></content>
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>认识与入门Markdown</title>
      <link href="/2018/03/06/%E8%AE%A4%E8%AF%86%E4%B8%8E%E5%85%A5%E9%97%A8Markdown/"/>
      <content type="html"><![CDATA[<p>Markdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。例如此文从内容到格式，甚至插图，键盘就可以通通搞定了。<br><a id="more"></a></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul><li>无序列表使用<em>或者+或者-（注意</em>后面加空格）</li><li>有序列表使用数字加.</li></ul><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><ul><li>使用#的个数代表等级数</li></ul><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote><p>数据结构</p><blockquote><p>树</p><blockquote><p>二叉树</p></blockquote></blockquote></blockquote><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><ul><li><strong>加粗文本</strong>或者<strong>这样</strong></li><li><em>斜体</em></li><li><del>删除怎么没效果</del></li></ul><h3 id="图片与连接"><a href="#图片与连接" class="headerlink" title="图片与连接"></a>图片与连接</h3><ul><li>语法格式<ol><li>图片：<code>![]()</code>  ![图片文本（可忽略)](图片地址）</li><li>链接：<code>[]()</code>  [链接文本]（链接地址）</li></ol></li><li>链接又分为行内，参考，自动<ul><li>行内链接：<a href="https://ouyangresume.github.io/" target="_blank" rel="noopener">文章地址</a></li><li>参考链接：[文章地址][<a href="https://ouyangresume.github.io/]，其中url为链接标记，可置于文中任意位置。" target="_blank" rel="noopener">https://ouyangresume.github.io/]，其中url为链接标记，可置于文中任意位置。</a></li><li>自动链接：<a href="https://ouyangresume.github.io" target="_blank" rel="noopener">https://ouyangresume.github.io</a></li></ul></li><li>图片也有行内和自动。用法差不多<ul><li>这是图片：<img src="https://connorlin.github.io/images/avatar.jpg" alt=""></li></ul></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li><p>行内代码用`标识<br>这个是行内代码</p><p><code>python manage.py runserver</code></p></li><li>代码块用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">```  java</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;  </span><br><span class="line">        super.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><ul><li>一行中用三个***或者___</li></ul><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>   这是一行后面加两个空格加<br>   回车. </p><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><ul><li>使用[^]来定义脚注。<br>这是一个脚注<a href="eg">^1</a></li></ul><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">| col 3 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      | centered      |   $12 |</span><br><span class="line">| zebra stripes | are neat      |    $1 |</span><br></pre></td></tr></table></figure><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
