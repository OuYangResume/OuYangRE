<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[OGC标准]]></title>
    <url>%2F2018%2F03%2F23%2FOGC%E6%A0%87%E5%87%86%2F</url>
    <content type="text"><![CDATA[一：OGC与OGC标准制定与空间信息，基于位置服务相关的标准文档，按照这些文档开放服务的接口，空间数据存储的编码，空间操作的方法。OGC官网 二：SFS -简单的要素标准 几何对象模型几何对象（点，线，面和多点，多线，多面）和对象的一系列操作。 WKT描述几何对象WKT可以通过文本来描述几何对象。12345Point(10 10) //点LineString(10 10,20 20,30 40) //3个节点的线Polygon((10 10,10 20,20 20,10 10))//只有一个环的多边形MultiPoint((10 10),(20 20))//多点 MultiLineString多线 多面也类似 WKB 描述几何对象wkb通过序列化的字节对象来描述几何对象 WKT描述空间参考wkt除了可以描述几何对象也可以描述空间对象。对于地理坐标系，比如最常见的WGS84坐标系，wkt是描述如下：12345678GEOGCS[ "GCS_WGS_1984", DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]], PRIMEM["Greenwich",0.0], UNIT["Degree",0.0174532925199433] AUTHORITY["EPSG",4326]] “GEOGCS”表明”[]”中描述的是一个地理坐标系统。该坐标系统名称为”GCS_WGS_1984”;采用的大地基准面为“D_WGS_1984”，该基准面近似椭球体的长轴为6378137.0米、扁率为298.257223563；以格林威治0度经线为起始经线；地图单位为度，该单位的转换因子[2] 为0. 0174532925199433（π/180）；该坐标系统在EPSG[3] 中的编码为“4326”。 对于投影坐标系，WGS84 Web Mercator（Auxiliary Sphere）坐标系统，WKT描述：12345678910111213141516171819PROJCS[ "WGS_1984_Web_Mercator_Auxiliary_Sphere", GEOGCS [ "GCS_WGS_1984", DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]], PRIMEM["Greenwich",0.0], UNIT["Degree",0.0174532925199433] ], PROJECTION["Mercator_Auxiliary_Sphere"], PARAMETER["False_Easting",0.0], PARAMETER["False_Northing",0.0], PARAMETER["Central_Meridian",0.0], PARAMETER["Standard_Parallel_1",0.0], PARAMETER["Auxiliary_Sphere_Type",0.0], UNIT["Meter",1.0], AUTHORITY["EPSG",3857]] “PROJCS”代表这是一个投影坐标系。投影坐标系中必然会包括一个地理坐标系，这里的地理坐标系就是“GCS_WGS_1984”，这个地理坐标系的定义和上面的类似。下面紧跟着的是投影的相关参数，“Mercator_Auxiliary_Sphere”是采用投影的名称，这个投影坐标系以0度经线为中央经线进行投影；坐标系的单位为米（显然，转换因子就为1.0），而该坐标系的EPSG编码为“3857”。 三：GML- 地理标记语言GML是一种基于XML的地理要素描述语言，主要是在不同的软件或系统间交换空间数据。比如WFS要素web服务就使用gml作为输入输出格式。 四：SLD -图层样式描述一个地图不仅包含数据源组成，还需要对数据进行符号化和渲染，sld就是描述地图图层样式的标准，一般用于wms地图web服务。 五：KML主要用于地理数据的可视化，不仅包括地理数据的描述，还包括数据的符号化方式，用户视角的控制等信息。 六：OWS-OGC WEB服务通用标准OWS描述web服务通用的接口规范，包括请求和响应的内容，请求的参数和编码等。 WFS -要素web服务WMS -地图web服务WCS -栅格web服务WMTS -地图切片服务OGD标准介绍.pdf链接：https://pan.baidu.com/s/1abhZc-Wsrk1RbEqGpFb8pw密码：dei6]]></content>
      <categories>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>GIS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常见正则表达式校验]]></title>
    <url>%2F2018%2F03%2F20%2F%E5%B8%B8%E8%A7%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A0%A1%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[RegExp是什么? RegExp 是正则表达式（Regular expression）的缩写，作用是对字符串执行模式匹配。 通常用于格式验证、正则替换、查找子串等 各种编程语言的正则表达式基本相同，不同的语言可能会有一些细小的差别 推荐一个在线验证的工具https://regex101.com 量词 量词 作用 n+ 匹配任何包含至少一个 n 的字符串。同 {1,} n* 匹配任何包含零个或多个 n 的字符串。同 {0,} n? 匹配任何包含零个或一个 n 的字符串。同 {0,1} n{X} 匹配包含 X 个 n 的序列的字符串。 n{X,Y} 匹配包含 X 至 Y 个 n 的序列的字符串。 n{X,} 匹配包含至少 X 个 n 的序列的字符串。 n$ 匹配任何结尾为 n 的字符串。 ^n 匹配任何开头为 n 的字符串。注意 /[^a] / 和 /^ [a]/是不一样的，前者是排除的，后者是代表首位。 (?=n) 匹配任何其后紧接指定字符串 n 的字符串。正向预查 (?!n) 匹配任何其后没有紧接指定字符串 n 的字符串。反向预查 RegExp 对象方法test()test() 方法检索字符串中是否存在指定的值。返回值是 true 或 false。1234567891011//判断是不是QQ号//首位不能是0//必须是5-11位数的数字var str = '812634676';var regexp = /^[1-9][0-9]&#123;4,10&#125;$/gim;if (regexp.test(str))&#123; alert('is');&#125;else&#123; alert('no');&#125; exec()exec() 方法检索字符串中的指定值。返回值是被找到的值。如果没有发现匹配，则返回 null。1234567var patt1 = new RegExp('e');console.log(patt1.exec('some text'));//OUTPUT:evar patt2 =new RegExp('ee');console.log(patt2.exec('some text'));//OUTPUT:null compile()compile() 既可以改变检索模式，也可以添加或删除第二个参数。12345var patt1=new RegExp("e");document.write(patt1.test("The best things in life are free")); // true// 改变了检索模式patt1.compile("eee");document.write(patt1.test("The best things in life are free")); // false 支持正则表达式的String对象的方法search 检索与正则表达式相匹配的值。123var str = "Visit W3School!";console.log(str.search(/W3School/))// OUTPUT:6 replace替换与正则表达式匹配的子串。123var str = "Visit Microsoft!";console.log(str.replace(/Microsoft/,"W3School"));// OUTPUT:Visit W3School! 1234567891011121314151617181920212223242526// 找重复项最多的字符个数var str = 'g21ss4aeba_ersb43sgnnsssstht6sss60snnsj8resw0_ss'// split : 将字符串转化为数组// sort : 对数组排序，ASCII// join : 将数组转化为字符串var str_new = str.split('').sort.join('');console.log(str_new);//OUTPUT:"0012344668__aabbeeegghjnnnnrrssssssssssssssssttw"var regexp = /(\w)\1+/g;var index = 0;var value = '';str_new.replace(regexp,function($0,$1)&#123; if (index &lt; $0.length)&#123; index = $0.length; value = $1; &#125;&#125;);document.write('重复项最多的字符是：' + value + '，个数是：' + index)// OUTPUT:重复项最多的字符是：s，个数是：16 match找到一个或多个正则表达式的匹配。123var str = "1 plus 2 equal 3"console.log(str.match(/\d+/g))// OUTPUT : 1,2,3 split把字符串分割为字符串数组。123var str = " How are you doing today?"document.write(str.split(/\s+/));// OUTPUT:How,are,you,doing,today? 经验： 检验格式（邮箱格式、IP格式）是否正确，用test() 抓取信息（如所有手机号），用exec()、match() 替换敏感词汇，用replace() 常见的正则表达式校验校验数字的表达式1234567891.数字：^[0-9]*$2.n位的数字： ^\d&#123;n&#125;$3.至少n位的数字： ^\d&#123;n,&#125;$4.m-n位的数字：^\d&#123;m,n&#125;$5.零和非零开头的数字：^(0|[1-9][0-9]*)$6.非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;?)$7.带1-2位小数的正数或负数：^(\-)?\d+(\.\d&#123;1,2&#125;)?$8.正数，负数，和小数：^(\-|\+)?\d+(\.\d+)?$9.非零的正整数：^[1-9]/d*$ 或 ^\+?[1-9][0-9]*$ 校验字符的表达式123451. 汉字:^[\u4e00-\u9fa5]&#123;0,&#125;$2. 英文和数字：^[A-Za-zz-9]+&amp; 或^[A-Za-z0-9]&#123;4,40&#125;$3. 长度为3-20的所有字符：^.&#123;3,20&#125;$4. 由26个英文字母组成的字符串:^[A-Za-z]+&amp;5. 禁止输入含有~的字符：[^~\x22]+ 特殊需求表达式11.Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo-next的魔法糖]]></title>
    <url>%2F2018%2F03%2F07%2Fhexo-next%E7%9A%84%E9%AD%94%E6%B3%95%E7%B3%96%2F</url>
    <content type="text"><![CDATA[文章插入图片 在站点配置文件_config.yml中的post_asset_folder:这个选项设置为true。 在hexo目录下执行 npm install hexo-asset-image --save,这是下载安装一个可以上传本地图片的插件。 运行hexo new &quot;xxx&quot;来生成文章时，在/source/_posts文件夹中生成一个同名的文件夹。 最后在xxx.md中想引入图片时，先把图片复制到这个xxx文件夹中，然后按照markwown的格式引入图片：！[替代文字](xxx/图片名.png)。 hexo-next添加自定义页面 在hexo目录下创建你想要生成的页面 hexo new page &quot;aboutme&quot;。 修改主题配置_config.yml文件中的 menu和menu_icons,如下图其中address-card是在font-Awesome图库图标的名称。 修改主题下的netx/languages/zh-Hans.yml文件中的menu。 运行hexo -s效果图。 设置站点配置文件_config.yml中的skip_render添加aboutme/**,这样就意味着根目录下的source/aboutme文件夹中的内容不会被转化成html。而是直接copy到public文件夹。 &lt;–更多美味糖果–&gt;]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇测试文章]]></title>
    <url>%2F2018%2F03%2F06%2F%E7%AC%AC%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[第一篇测试文章1. 是吗？ 记录用markdownPad2富文本编辑器编写第一篇文章。 我觉得还ok。 2. 顺便记录markdown语法的学习过程 列表 无序列表使用或者+或者-（注意后面加空格） 有序列表使用数字加. 标题 使用#的个数代表等级数 引用 这是一段引用 二级引用块状引用 块状引用。符号&gt;后面有五个空格. &gt;一级引用 &gt;&gt;二级引用 这个是引用加列表 引用加列表 强调 加粗文本或者这样 斜体 删除]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>博客，文章</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown进阶]]></title>
    <url>%2F2018%2F03%2F06%2Fmarkdown%E8%BF%9B%E9%98%B6%2F</url>
    <content type="text"><![CDATA[图片与连接 语法格式 图片：![]() ![图片文本（可忽略)](图片地址） 链接：[]() [链接文本]（链接地址） 链接又分为行内，参考，自动 * 行内链接：[文章地址](https://ouyangresume.github.io/) * 参考链接：[文章地址][url]，其中url为链接标记，可置于文中任意位置。 * 自动链接：&lt;https://ouyangresume.github.io&gt; 图片也有行内和自动。用法差不多 这是图片： 代码 行内代码用`标识 这个是行内代码python manage.py runserver 代码块用123456&gt; ``` java // 注意java前面有空格 protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); &#125; 分割线 一行中用三个***或者___ 换行这是一行后面加两个空格加回车 脚注 使用[^]来定义脚注。这是一个脚注^1]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>文章</tag>
      </tags>
  </entry>
</search>
